import typing
from System import IDisposable
from Autodesk.Revit.DB import LinkConversionData
from System.Collections.Generic import IDictionary_2

class IFCImportAction(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Open : IFCImportAction # 0
    Link : IFCImportAction # 1


class IFCImportIntent(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Parametric : IFCImportIntent # 0
    Reference : IFCImportIntent # 1


class IFCImportOptions(IDisposable):
    def __init__(self) -> None: ...
    @property
    def Action(self) -> IFCImportAction: ...
    @Action.setter
    def Action(self, value: IFCImportAction) -> IFCImportAction: ...
    @property
    def AutocorrectOffAxisLines(self) -> bool: ...
    @AutocorrectOffAxisLines.setter
    def AutocorrectOffAxisLines(self, value: bool) -> bool: ...
    @property
    def AutoJoin(self) -> bool: ...
    @AutoJoin.setter
    def AutoJoin(self, value: bool) -> bool: ...
    @property
    def CreateLinkInstanceOnly(self) -> bool: ...
    @CreateLinkInstanceOnly.setter
    def CreateLinkInstanceOnly(self, value: bool) -> bool: ...
    @property
    def ForceImport(self) -> bool: ...
    @ForceImport.setter
    def ForceImport(self, value: bool) -> bool: ...
    @property
    def Intent(self) -> IFCImportIntent: ...
    @Intent.setter
    def Intent(self, value: IFCImportIntent) -> IFCImportIntent: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def RevitLinkFileName(self) -> str: ...
    @RevitLinkFileName.setter
    def RevitLinkFileName(self, value: str) -> str: ...
    def Dispose(self) -> None: ...
    def GetConversionData(self) -> LinkConversionData: ...
    def GetExtraOptions(self) -> IDictionary_2[str, str]: ...
    def SetExtraOptions(self, options: IDictionary_2[str, str]) -> None: ...

