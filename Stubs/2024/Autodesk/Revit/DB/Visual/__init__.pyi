import typing, abc
from System import IDisposable, DateTime
from Autodesk.Revit.DB import Document, ElementId, ForgeTypeId, DoubleArray, XYZ, Color, APIObject
from System.Collections.Generic import IList_1
from System.Collections import IEnumerable, IEnumerator

class AdvancedGlazing(abc.ABC):
    @classmethod
    @property
    def GlazingBackfaceCulling(cls) -> str: ...
    @classmethod
    @property
    def GlazingF0(cls) -> str: ...
    @classmethod
    @property
    def GlazingTransmissionColor(cls) -> str: ...
    @classmethod
    @property
    def GlazingTransmissionRoughness(cls) -> str: ...
    @classmethod
    @property
    def SurfaceAlbedo(cls) -> str: ...
    @classmethod
    @property
    def SurfaceAnisotropy(cls) -> str: ...
    @classmethod
    @property
    def SurfaceCutout(cls) -> str: ...
    @classmethod
    @property
    def SurfaceNdfType(cls) -> str: ...
    @classmethod
    @property
    def SurfaceNormal(cls) -> str: ...
    @classmethod
    @property
    def SurfaceRotation(cls) -> str: ...
    @classmethod
    @property
    def SurfaceRoughness(cls) -> str: ...


class AdvancedLayered(abc.ABC):
    @classmethod
    @property
    def LayeredAnisotropy(cls) -> str: ...
    @classmethod
    @property
    def LayeredBottomF0(cls) -> str: ...
    @classmethod
    @property
    def LayeredDiffuse(cls) -> str: ...
    @classmethod
    @property
    def LayeredF0(cls) -> str: ...
    @classmethod
    @property
    def LayeredFraction(cls) -> str: ...
    @classmethod
    @property
    def LayeredNdfType(cls) -> str: ...
    @classmethod
    @property
    def LayeredNormal(cls) -> str: ...
    @classmethod
    @property
    def LayeredRotation(cls) -> str: ...
    @classmethod
    @property
    def LayeredRoughness(cls) -> str: ...
    @classmethod
    @property
    def SurfaceAlbedo(cls) -> str: ...
    @classmethod
    @property
    def SurfaceAnisotropy(cls) -> str: ...
    @classmethod
    @property
    def SurfaceCutout(cls) -> str: ...
    @classmethod
    @property
    def SurfaceNdfType(cls) -> str: ...
    @classmethod
    @property
    def SurfaceNormal(cls) -> str: ...
    @classmethod
    @property
    def SurfaceRotation(cls) -> str: ...
    @classmethod
    @property
    def SurfaceRoughness(cls) -> str: ...


class AdvancedMetal(abc.ABC):
    @classmethod
    @property
    def MetalF0(cls) -> str: ...
    @classmethod
    @property
    def SurfaceAlbedo(cls) -> str: ...
    @classmethod
    @property
    def SurfaceAnisotropy(cls) -> str: ...
    @classmethod
    @property
    def SurfaceCutout(cls) -> str: ...
    @classmethod
    @property
    def SurfaceNdfType(cls) -> str: ...
    @classmethod
    @property
    def SurfaceNormal(cls) -> str: ...
    @classmethod
    @property
    def SurfaceRotation(cls) -> str: ...
    @classmethod
    @property
    def SurfaceRoughness(cls) -> str: ...


class AdvancedOpaque(abc.ABC):
    @classmethod
    @property
    def OpaqueAlbedo(cls) -> str: ...
    @classmethod
    @property
    def OpaqueEmission(cls) -> str: ...
    @classmethod
    @property
    def OpaqueF0(cls) -> str: ...
    @classmethod
    @property
    def OpaqueLuminance(cls) -> str: ...
    @classmethod
    @property
    def OpaqueLuminanceModifier(cls) -> str: ...
    @classmethod
    @property
    def OpaqueMfp(cls) -> str: ...
    @classmethod
    @property
    def OpaqueMfpModifier(cls) -> str: ...
    @classmethod
    @property
    def OpaqueTranslucency(cls) -> str: ...
    @classmethod
    @property
    def SurfaceAlbedo(cls) -> str: ...
    @classmethod
    @property
    def SurfaceAnisotropy(cls) -> str: ...
    @classmethod
    @property
    def SurfaceCutout(cls) -> str: ...
    @classmethod
    @property
    def SurfaceNdfType(cls) -> str: ...
    @classmethod
    @property
    def SurfaceNormal(cls) -> str: ...
    @classmethod
    @property
    def SurfaceRotation(cls) -> str: ...
    @classmethod
    @property
    def SurfaceRoughness(cls) -> str: ...


class AdvancedTransparent(abc.ABC):
    @classmethod
    @property
    def SurfaceAlbedo(cls) -> str: ...
    @classmethod
    @property
    def SurfaceAnisotropy(cls) -> str: ...
    @classmethod
    @property
    def SurfaceCutout(cls) -> str: ...
    @classmethod
    @property
    def SurfaceNdfType(cls) -> str: ...
    @classmethod
    @property
    def SurfaceNormal(cls) -> str: ...
    @classmethod
    @property
    def SurfaceRotation(cls) -> str: ...
    @classmethod
    @property
    def SurfaceRoughness(cls) -> str: ...
    @classmethod
    @property
    def TransparentColor(cls) -> str: ...
    @classmethod
    @property
    def TransparentDistance(cls) -> str: ...
    @classmethod
    @property
    def TransparentIor(cls) -> str: ...


class AdvancedWood(abc.ABC):
    @classmethod
    @property
    def WoodCurlyDistortionEnable(cls) -> str: ...
    @classmethod
    @property
    def WoodCurlyDistortionMap(cls) -> str: ...
    @classmethod
    @property
    def WoodCurlyDistortionScale(cls) -> str: ...
    @classmethod
    @property
    def WoodDiffuseLobeWeight(cls) -> str: ...
    @classmethod
    @property
    def WoodDiffusePerlinEnable(cls) -> str: ...
    @classmethod
    @property
    def WoodDiffusePerlinProf(cls) -> str: ...
    @classmethod
    @property
    def WoodDiffusePerlinScaleZ(cls) -> str: ...
    @classmethod
    @property
    def WoodEarlyColor(cls) -> str: ...
    @classmethod
    @property
    def WoodEarlycolorPerlinEnable(cls) -> str: ...
    @classmethod
    @property
    def WoodEarlycolorPerlinProf(cls) -> str: ...
    @classmethod
    @property
    def WoodEarlywoodSharpness(cls) -> str: ...
    @classmethod
    @property
    def WoodFiberCosineEnable(cls) -> str: ...
    @classmethod
    @property
    def WoodFiberCosineProf(cls) -> str: ...
    @classmethod
    @property
    def WoodFiberPerlinEnable(cls) -> str: ...
    @classmethod
    @property
    def WoodFiberPerlinProf(cls) -> str: ...
    @classmethod
    @property
    def WoodFiberPerlinScaleZ(cls) -> str: ...
    @classmethod
    @property
    def WoodFiberRoughness(cls) -> str: ...
    @classmethod
    @property
    def WoodGrooveRoughness(cls) -> str: ...
    @classmethod
    @property
    def WoodGrowthPerlinEnable(cls) -> str: ...
    @classmethod
    @property
    def WoodGrowthPerlinProf(cls) -> str: ...
    @classmethod
    @property
    def WoodLatecolorPerlinEnable(cls) -> str: ...
    @classmethod
    @property
    def WoodLatecolorPerlinProf(cls) -> str: ...
    @classmethod
    @property
    def WoodLateColorPower(cls) -> str: ...
    @classmethod
    @property
    def WoodLatewoodBumpDepth(cls) -> str: ...
    @classmethod
    @property
    def WoodLatewoodRatio(cls) -> str: ...
    @classmethod
    @property
    def WoodLatewoodSharpness(cls) -> str: ...
    @classmethod
    @property
    def WoodManualLateColor(cls) -> str: ...
    @classmethod
    @property
    def WoodPoreCellDim(cls) -> str: ...
    @classmethod
    @property
    def WoodPoreColorPower(cls) -> str: ...
    @classmethod
    @property
    def WoodPoreDepth(cls) -> str: ...
    @classmethod
    @property
    def WoodPoreRadius(cls) -> str: ...
    @classmethod
    @property
    def WoodPoreType(cls) -> str: ...
    @classmethod
    @property
    def WoodRayColorPower(cls) -> str: ...
    @classmethod
    @property
    def WoodRayEllipseRadiusX(cls) -> str: ...
    @classmethod
    @property
    def WoodRayEllipseZ2x(cls) -> str: ...
    @classmethod
    @property
    def WoodRayNumSlices(cls) -> str: ...
    @classmethod
    @property
    def WoodRaySegLengthZ(cls) -> str: ...
    @classmethod
    @property
    def WoodRingThickness(cls) -> str: ...
    @classmethod
    @property
    def WoodSecondaryColorPower(cls) -> str: ...
    @classmethod
    @property
    def WoodSecondaryPerlinEnable(cls) -> str: ...
    @classmethod
    @property
    def WoodSecondaryPerlinProf(cls) -> str: ...
    @classmethod
    @property
    def WoodSecondaryPerlinScaleZ(cls) -> str: ...
    @classmethod
    @property
    def WoodUseGrooveRoughness(cls) -> str: ...
    @classmethod
    @property
    def WoodUseLatewoodBump(cls) -> str: ...
    @classmethod
    @property
    def WoodUseManualLateColor(cls) -> str: ...
    @classmethod
    @property
    def WoodUsePores(cls) -> str: ...
    @classmethod
    @property
    def WoodUseRays(cls) -> str: ...


class AppearanceAssetEditScope(IDisposable):
    def __init__(self, document: Document) -> None: ...
    @property
    def IsActive(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    def Cancel(self) -> None: ...
    def Commit(self, updateOpenViews: bool) -> None: ...
    def Dispose(self) -> None: ...
    def Start(self, assetElementId: ElementId) -> Asset: ...


class Asset(AssetProperties):
    @property
    def AssetType(self) -> AssetType: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Item(self) -> AssetProperty: ...
    @property
    def LibraryName(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Size(self) -> int: ...
    @property
    def Title(self) -> str: ...
    @property
    def Type(self) -> AssetPropertyType: ...


class AssetProperties(AssetProperty):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Item(self) -> AssetProperty: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Size(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...
    def FindByName(self, name: str) -> AssetProperty: ...
    def Get(self, index: int) -> AssetProperty: ...
    def IsValidIndex(self, index: int) -> bool: ...


class AssetProperty(IDisposable):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...
    def AddConnectedAsset(self, schema: str) -> None: ...
    def AddCopyAsConnectedAsset(self, pRenderingAsset: Asset) -> None: ...
    def Dispose(self) -> None: ...
    def GetAllConnectedProperties(self) -> IList_1[AssetProperty]: ...
    def GetConnectedProperty(self, index: int) -> AssetProperty: ...
    def GetSingleConnectedAsset(self) -> Asset: ...
    @staticmethod
    def GetTypeName(type: AssetPropertyType) -> str: ...
    def IsEditable(self) -> bool: ...
    def IsValidSchemaIdentifier(self, schemaID: str) -> bool: ...
    def RemoveConnectedAsset(self) -> None: ...


class AssetPropertyBoolean(AssetProperty):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...
    @property
    def Value(self) -> bool: ...
    @Value.setter
    def Value(self, value: bool) -> bool: ...


class AssetPropertyDistance(AssetProperty):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...
    @property
    def Value(self) -> float: ...
    @Value.setter
    def Value(self, value: float) -> float: ...
    def GetUnitTypeId(self) -> ForgeTypeId: ...
    def IsValidValue(self, value: float) -> bool: ...


class AssetPropertyDouble(AssetProperty):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...
    @property
    def Value(self) -> float: ...
    @Value.setter
    def Value(self, value: float) -> float: ...
    def IsValidValue(self, value: float) -> bool: ...


class AssetPropertyDoubleArray2d(AssetProperty):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...
    @property
    def Value(self) -> DoubleArray: ...


class AssetPropertyDoubleArray3d(AssetProperty):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...
    def GetValueAsDoubles(self) -> IList_1[float]: ...
    def GetValueAsXYZ(self) -> XYZ: ...
    def IsValidValue(self, xyz: XYZ) -> bool: ...
    def SetValueAsXYZ(self, xyz: XYZ) -> None: ...


class AssetPropertyDoubleArray4d(AssetProperty):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...
    def GetValueAsColor(self) -> Color: ...
    def GetValueAsDoubles(self) -> IList_1[float]: ...
    def SetValueAsColor(self, color: Color) -> None: ...
    def SetValueAsDoubles(self, value: IList_1[float]) -> None: ...
    # Skipped IsValidValue due to it being static, abstract and generic.

    IsValidValue : IsValidValue_MethodGroup
    class IsValidValue_MethodGroup:
        @typing.overload
        def __call__(self, value: IList_1[float]) -> bool:...
        @typing.overload
        def __call__(self, color: Color) -> bool:...



class AssetPropertyDoubleMatrix44(AssetProperty):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...
    @property
    def Value(self) -> DoubleArray: ...


class AssetPropertyEnum(AssetProperty):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...
    @property
    def Value(self) -> int: ...
    @Value.setter
    def Value(self, value: int) -> int: ...
    def IsValidValue(self, value: int) -> bool: ...


class AssetPropertyFloat(AssetProperty):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...
    @property
    def Value(self) -> float: ...
    @Value.setter
    def Value(self, value: float) -> float: ...
    def IsValidValue(self, value: float) -> bool: ...


class AssetPropertyFloatArray(AssetProperty):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...
    def GetValue(self) -> IList_1[float]: ...


class AssetPropertyInt64(AssetProperty):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...
    @property
    def Value(self) -> int: ...


class AssetPropertyInteger(AssetProperty):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...
    @property
    def Value(self) -> int: ...
    @Value.setter
    def Value(self, value: int) -> int: ...
    def IsValidValue(self, value: int) -> bool: ...


class AssetPropertyList(AssetProperty):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...
    def AddNewAssetAsColor(self, value: Color) -> None: ...
    def AddNewAssetPropertyDouble(self, value: float) -> None: ...
    def AddNewAssetPropertyInteger(self, value: int) -> None: ...
    def GetValue(self) -> IList_1[AssetProperty]: ...
    def InsertNewAssetAsColor(self, value: Color, index: int) -> None: ...
    def InsertNewAssetPropertyDouble(self, value: float, index: int) -> None: ...
    def InsertNewAssetPropertyInteger(self, value: int, index: int) -> None: ...
    def IsValidValue(self, value: IList_1[AssetProperty]) -> bool: ...
    def RemoveAssetProperty(self, index: int) -> None: ...
    def SetValue(self, value: IList_1[AssetProperty]) -> None: ...


class AssetPropertyReference(AssetProperty):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...


class AssetPropertyString(AssetProperty):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> str: ...
    def IsValidValue(self, value: str) -> bool: ...


class AssetPropertyTime(AssetProperty):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...
    @property
    def Value(self) -> DateTime: ...


class AssetPropertyType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unknown : AssetPropertyType # 0
    Properties : AssetPropertyType # 1
    Boolean : AssetPropertyType # 2
    Enumeration : AssetPropertyType # 3
    Integer : AssetPropertyType # 4
    Float : AssetPropertyType # 5
    Double1 : AssetPropertyType # 6
    Double2 : AssetPropertyType # 7
    Double3 : AssetPropertyType # 8
    Double4 : AssetPropertyType # 9
    Double44 : AssetPropertyType # 10
    String : AssetPropertyType # 11
    Time : AssetPropertyType # 12
    Distance : AssetPropertyType # 14
    Asset : AssetPropertyType # 15
    Reference : AssetPropertyType # 16
    Longlong : AssetPropertyType # 17
    ULonglong : AssetPropertyType # 18
    List : AssetPropertyType # 19
    Float3 : AssetPropertyType # 20


class AssetPropertyUInt64(AssetProperty):
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfConnectedProperties(self) -> int: ...
    @property
    def Type(self) -> AssetPropertyType: ...
    @property
    def Value(self) -> int: ...


class AssetSet(APIObject, IEnumerable):
    def __init__(self) -> None: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def IsReadOnly(self) -> bool: ...
    @property
    def Size(self) -> int: ...
    def Clear(self) -> None: ...
    def Contains(self, item: Asset) -> bool: ...
    def Erase(self, item: Asset) -> int: ...
    def ForwardIterator(self) -> AssetSetIterator: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Insert(self, item: Asset) -> bool: ...
    def ReverseIterator(self) -> AssetSetIterator: ...


class AssetSetIterator(APIObject, IEnumerator, abc.ABC):
    def __init__(self) -> None: ...
    @property
    def Current(self) -> typing.Any: ...
    @property
    def IsReadOnly(self) -> bool: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class AssetType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Appearance : AssetType # 4
    Content : AssetType # 5


class BumpMap(abc.ABC):
    @classmethod
    @property
    def BumpmapBitmap(cls) -> str: ...
    @classmethod
    @property
    def BumpmapDepth(cls) -> str: ...
    @classmethod
    @property
    def BumpmapNormalScale(cls) -> str: ...
    @classmethod
    @property
    def BumpmapType(cls) -> str: ...
    @classmethod
    @property
    def TextureLinkTextureTransforms(cls) -> str: ...
    @classmethod
    @property
    def TextureOffsetLock(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetX(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetY(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldScaleX(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldScaleY(cls) -> str: ...
    @classmethod
    @property
    def TextureScaleLock(cls) -> str: ...
    @classmethod
    @property
    def TextureURepeat(cls) -> str: ...
    @classmethod
    @property
    def TextureVRepeat(cls) -> str: ...
    @classmethod
    @property
    def TextureWAngle(cls) -> str: ...


class BumpmapType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    HeightMap : BumpmapType # 0
    NormalMap : BumpmapType # 1


class Ceramic(abc.ABC):
    @classmethod
    @property
    def CeramicApplication(cls) -> str: ...
    @classmethod
    @property
    def CeramicBump(cls) -> str: ...
    @classmethod
    @property
    def CeramicBumpAmount(cls) -> str: ...
    @classmethod
    @property
    def CeramicBumpMap(cls) -> str: ...
    @classmethod
    @property
    def CeramicColor(cls) -> str: ...
    @classmethod
    @property
    def CeramicColorByObject(cls) -> str: ...
    @classmethod
    @property
    def CeramicPattern(cls) -> str: ...
    @classmethod
    @property
    def CeramicPatternAmount(cls) -> str: ...
    @classmethod
    @property
    def CeramicPatternMap(cls) -> str: ...
    @classmethod
    @property
    def CeramicType(cls) -> str: ...
    @classmethod
    @property
    def CommonTintColor(cls) -> str: ...
    @classmethod
    @property
    def CommonTintToggle(cls) -> str: ...


class CeramicApplicationType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    HighGlossy : CeramicApplicationType # 0
    Satin : CeramicApplicationType # 1
    Matte : CeramicApplicationType # 2


class CeramicBumpType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : CeramicBumpType # 0
    Wavy : CeramicBumpType # 1
    Custom : CeramicBumpType # 2


class CeramicPatternType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : CeramicPatternType # 0
    Custom : CeramicPatternType # 1


class CeramicType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Ceramic : CeramicType # 0
    Porcelain : CeramicType # 1


class Checker(abc.ABC):
    @classmethod
    @property
    def CheckerColor1(cls) -> str: ...
    @classmethod
    @property
    def CheckerColor2(cls) -> str: ...
    @classmethod
    @property
    def CheckerSoften(cls) -> str: ...
    @classmethod
    @property
    def TextureLinkTextureTransforms(cls) -> str: ...
    @classmethod
    @property
    def TextureOffsetLock(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetX(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetY(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldScaleX(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldScaleY(cls) -> str: ...
    @classmethod
    @property
    def TextureScaleLock(cls) -> str: ...
    @classmethod
    @property
    def TextureURepeat(cls) -> str: ...
    @classmethod
    @property
    def TextureVRepeat(cls) -> str: ...
    @classmethod
    @property
    def TextureWAngle(cls) -> str: ...


class CommonSharedAssetType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Shared : CommonSharedAssetType # 0
    Independent : CommonSharedAssetType # 1


class Concrete(abc.ABC):
    @classmethod
    @property
    def CommonTintColor(cls) -> str: ...
    @classmethod
    @property
    def CommonTintToggle(cls) -> str: ...
    @classmethod
    @property
    def ConcreteBmMap(cls) -> str: ...
    @classmethod
    @property
    def ConcreteBrightmode(cls) -> str: ...
    @classmethod
    @property
    def ConcreteBumpAmount(cls) -> str: ...
    @classmethod
    @property
    def ConcreteBumpMap(cls) -> str: ...
    @classmethod
    @property
    def ConcreteColor(cls) -> str: ...
    @classmethod
    @property
    def ConcreteFinish(cls) -> str: ...
    @classmethod
    @property
    def ConcreteSealant(cls) -> str: ...


class ConcreteBrightmodeType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : ConcreteBrightmodeType # 0
    Automatic : ConcreteBrightmodeType # 1
    Custom : ConcreteBrightmodeType # 2


class ConcreteFinishType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Straight : ConcreteFinishType # 0
    Curved : ConcreteFinishType # 1
    Smooth : ConcreteFinishType # 2
    Polished : ConcreteFinishType # 3
    Custom : ConcreteFinishType # 4


class ConcreteSealantType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : ConcreteSealantType # 0
    Epoxy : ConcreteSealantType # 1
    Acrylic : ConcreteSealantType # 2


class Generic(abc.ABC):
    @classmethod
    @property
    def ColorByObject(cls) -> str: ...
    @classmethod
    @property
    def CommonTintColor(cls) -> str: ...
    @classmethod
    @property
    def CommonTintToggle(cls) -> str: ...
    @classmethod
    @property
    def GenericBumpAmount(cls) -> str: ...
    @classmethod
    @property
    def GenericBumpMap(cls) -> str: ...
    @classmethod
    @property
    def GenericCutoutOpacity(cls) -> str: ...
    @classmethod
    @property
    def GenericDiffuse(cls) -> str: ...
    @classmethod
    @property
    def GenericDiffuseImageFade(cls) -> str: ...
    @classmethod
    @property
    def GenericGlossiness(cls) -> str: ...
    @classmethod
    @property
    def GenericIsMetal(cls) -> str: ...
    @classmethod
    @property
    def GenericReflectivityAt0deg(cls) -> str: ...
    @classmethod
    @property
    def GenericReflectivityAt90deg(cls) -> str: ...
    @classmethod
    @property
    def GenericRefractionIndex(cls) -> str: ...
    @classmethod
    @property
    def GenericRefractionTranslucencyWeight(cls) -> str: ...
    @classmethod
    @property
    def GenericSelfIllumColorTemperature(cls) -> str: ...
    @classmethod
    @property
    def GenericSelfIllumFilterMap(cls) -> str: ...
    @classmethod
    @property
    def GenericSelfIllumLuminance(cls) -> str: ...
    @classmethod
    @property
    def GenericTransparency(cls) -> str: ...
    @classmethod
    @property
    def GenericTransparencyImageFade(cls) -> str: ...


class Glazing(abc.ABC):
    @classmethod
    @property
    def CommonTintColor(cls) -> str: ...
    @classmethod
    @property
    def CommonTintToggle(cls) -> str: ...
    @classmethod
    @property
    def GlazingColorByObject(cls) -> str: ...
    @classmethod
    @property
    def GlazingNoLevels(cls) -> str: ...
    @classmethod
    @property
    def GlazingReflectance(cls) -> str: ...
    @classmethod
    @property
    def GlazingTransmittanceColor(cls) -> str: ...
    @classmethod
    @property
    def GlazingTransmittanceMap(cls) -> str: ...


class GlazingTransmittanceColorType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Clear : GlazingTransmittanceColorType # 0
    Green : GlazingTransmittanceColorType # 1
    Gray : GlazingTransmittanceColorType # 2
    Blue : GlazingTransmittanceColorType # 3
    Bluegreen : GlazingTransmittanceColorType # 4
    Bronze : GlazingTransmittanceColorType # 5
    Custom : GlazingTransmittanceColorType # 6


class Gradient(abc.ABC):
    @classmethod
    @property
    def GradientColor(cls) -> str: ...
    @classmethod
    @property
    def GradientInterpolation(cls) -> str: ...
    @classmethod
    @property
    def GradientNoise(cls) -> str: ...
    @classmethod
    @property
    def GradientNoiseAmount(cls) -> str: ...
    @classmethod
    @property
    def GradientNoiseHigh(cls) -> str: ...
    @classmethod
    @property
    def GradientNoiseLevels(cls) -> str: ...
    @classmethod
    @property
    def GradientNoiseLow(cls) -> str: ...
    @classmethod
    @property
    def GradientNoisePhase(cls) -> str: ...
    @classmethod
    @property
    def GradientNoiseSize(cls) -> str: ...
    @classmethod
    @property
    def GradientNoiseSmooth(cls) -> str: ...
    @classmethod
    @property
    def GradientPosition(cls) -> str: ...
    @classmethod
    @property
    def GradientType(cls) -> str: ...
    @classmethod
    @property
    def TextureLinkTextureTransforms(cls) -> str: ...
    @classmethod
    @property
    def TextureOffsetLock(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetX(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetY(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldScaleX(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldScaleY(cls) -> str: ...
    @classmethod
    @property
    def TextureScaleLock(cls) -> str: ...
    @classmethod
    @property
    def TextureURepeat(cls) -> str: ...
    @classmethod
    @property
    def TextureVRepeat(cls) -> str: ...
    @classmethod
    @property
    def TextureWAngle(cls) -> str: ...


class GradientInterpolationType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Custom : GradientInterpolationType # 0
    Easein : GradientInterpolationType # 1
    Easeinout : GradientInterpolationType # 2
    Easeout : GradientInterpolationType # 3
    Linear : GradientInterpolationType # 4
    Solid : GradientInterpolationType # 5


class GradientNoiseType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Regular : GradientNoiseType # 0
    Turbulence : GradientNoiseType # 1
    Fractal : GradientNoiseType # 2


class GradientType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Fourcorner : GradientType # 0
    Box : GradientType # 1
    Diagonal : GradientType # 2
    Lighting : GradientType # 3
    Linear : GradientType # 4
    Mapped : GradientType # 5
    Normal : GradientType # 6
    Pong : GradientType # 7
    Radial : GradientType # 8
    Spiral : GradientType # 9
    Sweep : GradientType # 10
    Tartan : GradientType # 11


class Hardwood(abc.ABC):
    @classmethod
    @property
    def CommonTintColor(cls) -> str: ...
    @classmethod
    @property
    def CommonTintToggle(cls) -> str: ...
    @classmethod
    @property
    def HardwoodApplication(cls) -> str: ...
    @classmethod
    @property
    def HardwoodColor(cls) -> str: ...
    @classmethod
    @property
    def HardwoodFinish(cls) -> str: ...
    @classmethod
    @property
    def HardwoodImperfections(cls) -> str: ...
    @classmethod
    @property
    def HardwoodImperfectionsAmount(cls) -> str: ...
    @classmethod
    @property
    def HardwoodImperfectionsShader(cls) -> str: ...
    @classmethod
    @property
    def HardwoodTintColor(cls) -> str: ...
    @classmethod
    @property
    def HardwoodTintEnabled(cls) -> str: ...


class HardwoodApplicationType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    looring : HardwoodApplicationType # 0
    urniture : HardwoodApplicationType # 1


class HardwoodFinishType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Gloss : HardwoodFinishType # 0
    Semigloss : HardwoodFinishType # 1
    Satin : HardwoodFinishType # 2
    Unfinished : HardwoodFinishType # 3


class HardwoodImperfectionsType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : HardwoodImperfectionsType # 0
    Automatic : HardwoodImperfectionsType # 1
    Custom : HardwoodImperfectionsType # 2


class HardwoodTintEnabledType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NoColor : HardwoodTintEnabledType # 0
    ColorChoice : HardwoodTintEnabledType # 1


class LayeredNdfType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Beckmann : LayeredNdfType # 0
    Ggx : LayeredNdfType # 1


class Marble(abc.ABC):
    @classmethod
    @property
    def MarbleColor1(cls) -> str: ...
    @classmethod
    @property
    def MarbleColor2(cls) -> str: ...
    @classmethod
    @property
    def MarbleSize(cls) -> str: ...
    @classmethod
    @property
    def MarbleWidth(cls) -> str: ...
    @classmethod
    @property
    def TextureAngle(cls) -> str: ...
    @classmethod
    @property
    def TextureLinkTextureTransforms(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetX(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetY(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetZ(cls) -> str: ...


class MasonryCMU(abc.ABC):
    @classmethod
    @property
    def CommonTintColor(cls) -> str: ...
    @classmethod
    @property
    def CommonTintToggle(cls) -> str: ...
    @classmethod
    @property
    def MasonryCMUApplication(cls) -> str: ...
    @classmethod
    @property
    def MasonryCMUColor(cls) -> str: ...
    @classmethod
    @property
    def MasonryCMUColorByObject(cls) -> str: ...
    @classmethod
    @property
    def MasonryCMUPattern(cls) -> str: ...
    @classmethod
    @property
    def MasonryCMUPatternHeight(cls) -> str: ...
    @classmethod
    @property
    def MasonryCMUPatternMap(cls) -> str: ...
    @classmethod
    @property
    def MasonryCMUType(cls) -> str: ...


class MasonryCMUApplicationType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Glossy : MasonryCMUApplicationType # 0
    Matte : MasonryCMUApplicationType # 1
    Unfinished : MasonryCMUApplicationType # 2


class MasonryCMUPatternType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : MasonryCMUPatternType # 0
    Custom : MasonryCMUPatternType # 1


class MasonryCMUType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Cmu : MasonryCMUType # 0
    Masonry : MasonryCMUType # 1


class Metal(abc.ABC):
    @classmethod
    @property
    def CommonTintColor(cls) -> str: ...
    @classmethod
    @property
    def CommonTintToggle(cls) -> str: ...
    @classmethod
    @property
    def MetalColor(cls) -> str: ...
    @classmethod
    @property
    def MetalFinish(cls) -> str: ...
    @classmethod
    @property
    def MetalPatina(cls) -> str: ...
    @classmethod
    @property
    def MetalPattern(cls) -> str: ...
    @classmethod
    @property
    def MetalPatternHeight(cls) -> str: ...
    @classmethod
    @property
    def MetalPatternScale(cls) -> str: ...
    @classmethod
    @property
    def MetalPatternShader(cls) -> str: ...
    @classmethod
    @property
    def MetalPerforations(cls) -> str: ...
    @classmethod
    @property
    def MetalPerforationsCenter(cls) -> str: ...
    @classmethod
    @property
    def MetalPerforationsShader(cls) -> str: ...
    @classmethod
    @property
    def MetalPerforationsSize(cls) -> str: ...
    @classmethod
    @property
    def MetalType(cls) -> str: ...


class MetalFinishType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Polished : MetalFinishType # 0
    SemiPolished : MetalFinishType # 1
    Satin : MetalFinishType # 2
    Brushed : MetalFinishType # 3


class MetallicPaint(abc.ABC):
    @classmethod
    @property
    def CommonTintColor(cls) -> str: ...
    @classmethod
    @property
    def CommonTintToggle(cls) -> str: ...
    @classmethod
    @property
    def MetallicpaintBaseColor(cls) -> str: ...
    @classmethod
    @property
    def MetallicpaintBaseColorByObject(cls) -> str: ...
    @classmethod
    @property
    def MetallicpaintBaseHighlightspread(cls) -> str: ...
    @classmethod
    @property
    def MetallicpaintFinish(cls) -> str: ...
    @classmethod
    @property
    def MetallicpaintFinishPeelamount(cls) -> str: ...
    @classmethod
    @property
    def MetallicpaintFlecks(cls) -> str: ...
    @classmethod
    @property
    def MetallicpaintFlecksColor(cls) -> str: ...
    @classmethod
    @property
    def MetallicpaintFlecksColorByObject(cls) -> str: ...
    @classmethod
    @property
    def MetallicpaintFlecksSize(cls) -> str: ...
    @classmethod
    @property
    def MetallicpaintPearl(cls) -> str: ...
    @classmethod
    @property
    def MetallicpaintPearlAmount(cls) -> str: ...
    @classmethod
    @property
    def MetallicpaintPearlColor(cls) -> str: ...
    @classmethod
    @property
    def MetallicpaintPearlColorByObject(cls) -> str: ...
    @classmethod
    @property
    def MetallicpaintPearlIor(cls) -> str: ...
    @classmethod
    @property
    def MetallicpaintTopcoat(cls) -> str: ...
    @classmethod
    @property
    def MetallicpaintTopcoatFalloff(cls) -> str: ...
    @classmethod
    @property
    def MetallicpaintTopcoatGlossy(cls) -> str: ...


class MetallicpaintFinishType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Smooth : MetallicpaintFinishType # 0
    Peeling : MetallicpaintFinishType # 1


class MetallicpaintFlecksType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : MetallicpaintFlecksType # 0
    Enable : MetallicpaintFlecksType # 1


class MetallicpaintPearlType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : MetallicpaintPearlType # 0
    Chromatic : MetallicpaintPearlType # 1
    Custom : MetallicpaintPearlType # 2


class MetallicpaintTopcoatType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Carpaint : MetallicpaintTopcoatType # 0
    Chrome : MetallicpaintTopcoatType # 1
    Matte : MetallicpaintTopcoatType # 2
    Custom : MetallicpaintTopcoatType # 3


class MetalPatternType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : MetalPatternType # 0
    Knurl : MetalPatternType # 1
    DiamondPlate : MetalPatternType # 2
    CheckerPlate : MetalPatternType # 3
    Custom : MetalPatternType # 4


class MetalPerforationsType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : MetalPerforationsType # 0
    CirclesStaggered : MetalPerforationsType # 1
    CirclesStraight : MetalPerforationsType # 2
    Squares : MetalPerforationsType # 3
    Grecian : MetalPerforationsType # 4
    Cloverleaf : MetalPerforationsType # 5
    Hexagon : MetalPerforationsType # 6
    Custom : MetalPerforationsType # 7


class MetalType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Aluminum : MetalType # 0
    GalvanizedAlu : MetalType # 1
    Chrome : MetalType # 2
    Copper : MetalType # 3
    Brass : MetalType # 4
    Bronze : MetalType # 5
    StainlessSteel : MetalType # 6
    Zinc : MetalType # 7


class Mirror(abc.ABC):
    @classmethod
    @property
    def CommonTintColor(cls) -> str: ...
    @classmethod
    @property
    def CommonTintToggle(cls) -> str: ...
    @classmethod
    @property
    def MirrorColorByObject(cls) -> str: ...
    @classmethod
    @property
    def MirrorTintcolor(cls) -> str: ...


class Noise(abc.ABC):
    @classmethod
    @property
    def NoiseColor1(cls) -> str: ...
    @classmethod
    @property
    def NoiseColor2(cls) -> str: ...
    @classmethod
    @property
    def NoiseLevels(cls) -> str: ...
    @classmethod
    @property
    def NoisePhase(cls) -> str: ...
    @classmethod
    @property
    def NoiseSize(cls) -> str: ...
    @classmethod
    @property
    def NoiseThresholdHigh(cls) -> str: ...
    @classmethod
    @property
    def NoiseThresholdLow(cls) -> str: ...
    @classmethod
    @property
    def NoiseType(cls) -> str: ...
    @classmethod
    @property
    def TextureAngle(cls) -> str: ...
    @classmethod
    @property
    def TextureLinkTextureTransforms(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetX(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetY(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetZ(cls) -> str: ...


class NoiseType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Regular : NoiseType # 0
    Fractal : NoiseType # 1
    Turbulence : NoiseType # 2


class PlasticVinyl(abc.ABC):
    @classmethod
    @property
    def CommonTintColor(cls) -> str: ...
    @classmethod
    @property
    def CommonTintToggle(cls) -> str: ...
    @classmethod
    @property
    def PlasticvinylApplication(cls) -> str: ...
    @classmethod
    @property
    def PlasticvinylBump(cls) -> str: ...
    @classmethod
    @property
    def PlasticvinylBumpAmount(cls) -> str: ...
    @classmethod
    @property
    def PlasticvinylBumpMap(cls) -> str: ...
    @classmethod
    @property
    def PlasticvinylColor(cls) -> str: ...
    @classmethod
    @property
    def PlasticvinylColorByObject(cls) -> str: ...
    @classmethod
    @property
    def PlasticvinylPattern(cls) -> str: ...
    @classmethod
    @property
    def PlasticvinylPatternAmount(cls) -> str: ...
    @classmethod
    @property
    def PlasticvinylPatternMap(cls) -> str: ...
    @classmethod
    @property
    def PlasticvinylType(cls) -> str: ...


class PlasticvinylApplicationType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Polished : PlasticvinylApplicationType # 0
    Glossy : PlasticvinylApplicationType # 1
    Matte : PlasticvinylApplicationType # 2


class PlasticvinylBumpType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : PlasticvinylBumpType # 0
    Custom : PlasticvinylBumpType # 1


class PlasticvinylPatternType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : PlasticvinylPatternType # 0
    Custom : PlasticvinylPatternType # 1


class PlasticvinylType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Plasticsolid : PlasticvinylType # 0
    Plastictransparent : PlasticvinylType # 1
    Vinyl : PlasticvinylType # 2


class SchemaCommon(abc.ABC):
    @classmethod
    @property
    def BaseSchema(cls) -> str: ...
    @classmethod
    @property
    def Category(cls) -> str: ...
    @classmethod
    @property
    def Description(cls) -> str: ...
    @classmethod
    @property
    def Hidden(cls) -> str: ...
    @classmethod
    @property
    def Keyword(cls) -> str: ...
    @classmethod
    @property
    def Thumbnail(cls) -> str: ...
    @classmethod
    @property
    def UIName(cls) -> str: ...
    @classmethod
    @property
    def VersionGUID(cls) -> str: ...


class SolidGlass(abc.ABC):
    @classmethod
    @property
    def CommonTintColor(cls) -> str: ...
    @classmethod
    @property
    def CommonTintToggle(cls) -> str: ...
    @classmethod
    @property
    def SolidglassBumpAmount(cls) -> str: ...
    @classmethod
    @property
    def SolidglassBumpEnable(cls) -> str: ...
    @classmethod
    @property
    def SolidglassBumpMap(cls) -> str: ...
    @classmethod
    @property
    def SolidglassColorByObject(cls) -> str: ...
    @classmethod
    @property
    def SolidglassGlossiness(cls) -> str: ...
    @classmethod
    @property
    def SolidglassReflectance(cls) -> str: ...
    @classmethod
    @property
    def SolidglassRefractionIor(cls) -> str: ...
    @classmethod
    @property
    def SolidglassTransmittance(cls) -> str: ...
    @classmethod
    @property
    def SolidglassTransmittanceCustomColor(cls) -> str: ...


class SolidglassBumpEnableType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : SolidglassBumpEnableType # 0
    Rippled : SolidglassBumpEnableType # 1
    Wavy : SolidglassBumpEnableType # 2
    Custom : SolidglassBumpEnableType # 3


class SolidglassTransmittanceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Clear : SolidglassTransmittanceType # 0
    Green : SolidglassTransmittanceType # 1
    Gray : SolidglassTransmittanceType # 2
    Blue : SolidglassTransmittanceType # 3
    Bluegreen : SolidglassTransmittanceType # 4
    Bronze : SolidglassTransmittanceType # 5
    CustomColor : SolidglassTransmittanceType # 6


class Speckle(abc.ABC):
    @classmethod
    @property
    def SpeckleColor1(cls) -> str: ...
    @classmethod
    @property
    def SpeckleColor2(cls) -> str: ...
    @classmethod
    @property
    def SpeckleSize(cls) -> str: ...
    @classmethod
    @property
    def TextureAngle(cls) -> str: ...
    @classmethod
    @property
    def TextureLinkTextureTransforms(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetX(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetY(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetZ(cls) -> str: ...


class Stone(abc.ABC):
    @classmethod
    @property
    def CommonTintColor(cls) -> str: ...
    @classmethod
    @property
    def CommonTintToggle(cls) -> str: ...
    @classmethod
    @property
    def StoneApplication(cls) -> str: ...
    @classmethod
    @property
    def StoneBump(cls) -> str: ...
    @classmethod
    @property
    def StoneBumpAmount(cls) -> str: ...
    @classmethod
    @property
    def StoneBumpMap(cls) -> str: ...
    @classmethod
    @property
    def StoneColor(cls) -> str: ...
    @classmethod
    @property
    def StonePattern(cls) -> str: ...
    @classmethod
    @property
    def StonePatternAmount(cls) -> str: ...
    @classmethod
    @property
    def StonePatternMap(cls) -> str: ...


class StoneApplicationType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Polished : StoneApplicationType # 0
    Glossy : StoneApplicationType # 1
    Matte : StoneApplicationType # 2
    Unfinished : StoneApplicationType # 3


class StoneBumpType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : StoneBumpType # 0
    Polishedgranite : StoneBumpType # 1
    Stonewall : StoneBumpType # 2
    Glossymarble : StoneBumpType # 3
    Custom : StoneBumpType # 4


class StonePatternType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : StonePatternType # 0
    Custom : StonePatternType # 1


class SurfaceNdfType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Beckmann : SurfaceNdfType # 0
    Ggx : SurfaceNdfType # 1


class Tile(abc.ABC):
    @classmethod
    @property
    def TextureLinkTextureTransforms(cls) -> str: ...
    @classmethod
    @property
    def TextureOffsetLock(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetX(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetY(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldScaleX(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldScaleY(cls) -> str: ...
    @classmethod
    @property
    def TextureScaleLock(cls) -> str: ...
    @classmethod
    @property
    def TextureURepeat(cls) -> str: ...
    @classmethod
    @property
    def TextureVRepeat(cls) -> str: ...
    @classmethod
    @property
    def TextureWAngle(cls) -> str: ...
    @classmethod
    @property
    def TileBrickColor(cls) -> str: ...
    @classmethod
    @property
    def TileBrickType(cls) -> str: ...
    @classmethod
    @property
    def TileChangeColumn(cls) -> str: ...
    @classmethod
    @property
    def TileChangeRow(cls) -> str: ...
    @classmethod
    @property
    def TileColorVariance(cls) -> str: ...
    @classmethod
    @property
    def TileEdgeRoughness(cls) -> str: ...
    @classmethod
    @property
    def TileFadeVariance(cls) -> str: ...
    @classmethod
    @property
    def TileHorizontalCount(cls) -> str: ...
    @classmethod
    @property
    def TileHorizontalGap(cls) -> str: ...
    @classmethod
    @property
    def TileLineShift(cls) -> str: ...
    @classmethod
    @property
    def TileMortarColor(cls) -> str: ...
    @classmethod
    @property
    def TilePerColumn(cls) -> str: ...
    @classmethod
    @property
    def TilePerRow(cls) -> str: ...
    @classmethod
    @property
    def TileRandomSeed(cls) -> str: ...
    @classmethod
    @property
    def TileRandomShift(cls) -> str: ...
    @classmethod
    @property
    def TileUseColumnEdit(cls) -> str: ...
    @classmethod
    @property
    def TileUseRowEdit(cls) -> str: ...
    @classmethod
    @property
    def TileVerticalCount(cls) -> str: ...
    @classmethod
    @property
    def TileVerticalGap(cls) -> str: ...


class TileBrickType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    RunningBond : TileBrickType # 0
    CommonFlemishBond : TileBrickType # 1
    EnglishBond : TileBrickType # 2
    HalfRunningBond : TileBrickType # 3
    StackBond : TileBrickType # 4
    FineRunningBond : TileBrickType # 5
    FineStackBond : TileBrickType # 6
    Custom : TileBrickType # 7


class UnifiedBitmap(abc.ABC):
    @classmethod
    @property
    def TextureLinkTextureTransforms(cls) -> str: ...
    @classmethod
    @property
    def TextureOffsetLock(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetX(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetY(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldScaleX(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldScaleY(cls) -> str: ...
    @classmethod
    @property
    def TextureScaleLock(cls) -> str: ...
    @classmethod
    @property
    def TextureURepeat(cls) -> str: ...
    @classmethod
    @property
    def TextureVRepeat(cls) -> str: ...
    @classmethod
    @property
    def TextureWAngle(cls) -> str: ...
    @classmethod
    @property
    def UnifiedbitmapBitmap(cls) -> str: ...
    @classmethod
    @property
    def UnifiedbitmapInvert(cls) -> str: ...
    @classmethod
    @property
    def UnifiedbitmapRGBAmount(cls) -> str: ...


class WallPaint(abc.ABC):
    @classmethod
    @property
    def CommonTintColor(cls) -> str: ...
    @classmethod
    @property
    def CommonTintToggle(cls) -> str: ...
    @classmethod
    @property
    def WallpaintApplication(cls) -> str: ...
    @classmethod
    @property
    def WallpaintColor(cls) -> str: ...
    @classmethod
    @property
    def WallpaintFinish(cls) -> str: ...


class WallpaintApplicationType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Roller : WallpaintApplicationType # 0
    Brush : WallpaintApplicationType # 1
    Spray : WallpaintApplicationType # 2


class WallpaintFinishType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Flat : WallpaintFinishType # 0
    Eggshell : WallpaintFinishType # 1
    Platinum : WallpaintFinishType # 2
    Pearl : WallpaintFinishType # 3
    Semigloss : WallpaintFinishType # 4
    Gloss : WallpaintFinishType # 5


class Water(abc.ABC):
    @classmethod
    @property
    def CommonTintColor(cls) -> str: ...
    @classmethod
    @property
    def CommonTintToggle(cls) -> str: ...
    @classmethod
    @property
    def WaterBumpAmount(cls) -> str: ...
    @classmethod
    @property
    def WaterColorByObject(cls) -> str: ...
    @classmethod
    @property
    def WaterTintColor(cls) -> str: ...
    @classmethod
    @property
    def WaterTintEnable(cls) -> str: ...
    @classmethod
    @property
    def WaterType(cls) -> str: ...


class WaterTintEnableType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Tropical : WaterTintEnableType # 0
    Algae : WaterTintEnableType # 1
    Murky : WaterTintEnableType # 2
    ReflectingPool : WaterTintEnableType # 3
    River : WaterTintEnableType # 4
    Lake : WaterTintEnableType # 5
    Ocean : WaterTintEnableType # 6
    Custom : WaterTintEnableType # 7


class WaterType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SwimmingPool : WaterType # 0
    ReflectingPool : WaterType # 1
    River : WaterType # 2
    Lake : WaterType # 3
    Ocean : WaterType # 4


class Wave(abc.ABC):
    @classmethod
    @property
    def TextureAngle(cls) -> str: ...
    @classmethod
    @property
    def TextureLinkTextureTransforms(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetX(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetY(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetZ(cls) -> str: ...
    @classmethod
    @property
    def WaveAmplitude(cls) -> str: ...
    @classmethod
    @property
    def WaveColor1(cls) -> str: ...
    @classmethod
    @property
    def WaveColor2(cls) -> str: ...
    @classmethod
    @property
    def WaveDistribution(cls) -> str: ...
    @classmethod
    @property
    def WaveNumWaveSets(cls) -> str: ...
    @classmethod
    @property
    def WavePhase(cls) -> str: ...
    @classmethod
    @property
    def WaveRandomSeed(cls) -> str: ...
    @classmethod
    @property
    def WaveWaveLenMax(cls) -> str: ...
    @classmethod
    @property
    def WaveWaveLenMin(cls) -> str: ...
    @classmethod
    @property
    def WaveWaveRadius(cls) -> str: ...


class WaveDistributionType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    TwoD : WaveDistributionType # 0
    ThreeD : WaveDistributionType # 1


class Wood(abc.ABC):
    @classmethod
    @property
    def TextureAngle(cls) -> str: ...
    @classmethod
    @property
    def TextureLinkTextureTransforms(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetX(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetY(cls) -> str: ...
    @classmethod
    @property
    def TextureRealWorldOffsetZ(cls) -> str: ...
    @classmethod
    @property
    def WoodAxialNoise(cls) -> str: ...
    @classmethod
    @property
    def WoodColor1(cls) -> str: ...
    @classmethod
    @property
    def WoodColor2(cls) -> str: ...
    @classmethod
    @property
    def WoodRadialNoise(cls) -> str: ...
    @classmethod
    @property
    def WoodThickness(cls) -> str: ...


class WoodPoreType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    InBothWoods : WoodPoreType # 0
    EarlywoodOnly : WoodPoreType # 1
    LatewoodOnly : WoodPoreType # 2

