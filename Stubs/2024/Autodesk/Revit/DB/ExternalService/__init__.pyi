import typing, abc
from System import IDisposable, Guid
from System.Collections.Generic import IList_1
from Autodesk.Revit.DB import GuidEnum, Document

class DisparityResponse(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DoNothing : DisparityResponse # 0
    ApplyDefaults : DisparityResponse # 1
    LetUserDecide : DisparityResponse # 2


class ExecutionPolicy(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    FirstApplicableServer : ExecutionPolicy # 0
    AllApplicableServers : ExecutionPolicy # 1


class ExternalService(IDisposable):
    @property
    def Description(self) -> str: ...
    @property
    def IsSerializable(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfServers(self) -> int: ...
    @property
    def ServiceId(self) -> ExternalServiceId: ...
    @property
    def SupportActivation(self) -> bool: ...
    @property
    def VendorId(self) -> str: ...
    def AddServer(self, server: IExternalServer) -> None: ...
    def Dispose(self) -> None: ...
    def GetDefaultServerId(self) -> Guid: ...
    def GetOptions(self) -> ExternalServiceOptions: ...
    def GetPublicAccessKey(self) -> Guid: ...
    def GetRegisteredServerIds(self) -> IList_1[Guid]: ...
    def GetServer(self, serverId: Guid) -> IExternalServer: ...
    def IsRegisteredServerId(self, serverId: Guid) -> bool: ...
    def RemoveServer(self, serverId: Guid) -> None: ...


class ExternalServiceId(GuidEnum):
    def __init__(self, guid: Guid) -> None: ...
    @property
    def Guid(self) -> Guid: ...
    def __eq__(self, first: ExternalServiceId, second: ExternalServiceId) -> bool: ...
    def __ne__(self, first: ExternalServiceId, second: ExternalServiceId) -> bool: ...


class ExternalServiceOptions(IDisposable):
    def __init__(self) -> None: ...
    @property
    def IsPublic(self) -> bool: ...
    @IsPublic.setter
    def IsPublic(self, value: bool) -> bool: ...
    @property
    def IsRecordable(self) -> bool: ...
    @IsRecordable.setter
    def IsRecordable(self, value: bool) -> bool: ...
    @property
    def IsSelfsynchronizing(self) -> bool: ...
    @IsSelfsynchronizing.setter
    def IsSelfsynchronizing(self, value: bool) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def SupportActivation(self) -> bool: ...
    @SupportActivation.setter
    def SupportActivation(self, value: bool) -> bool: ...
    def Dispose(self) -> None: ...


class ExternalServiceRegistry(abc.ABC):
    @staticmethod
    def GetService(serviceId: ExternalServiceId) -> ExternalService: ...
    @staticmethod
    def GetServices() -> IList_1[ExternalService]: ...
    # Skipped ExecuteService due to it being static, abstract and generic.

    ExecuteService : ExecuteService_MethodGroup
    class ExecuteService_MethodGroup:
        @typing.overload
        def __call__(self, executionKey: Guid, data: IExternalData) -> ExternalServiceResult:...
        @typing.overload
        def __call__(self, executionKey: Guid, serverId: Guid, data: IExternalData) -> ExternalServiceResult:...
        @typing.overload
        def __call__(self, executionKey: Guid, document: Document, data: IExternalData) -> ExternalServiceResult:...

    # Skipped RegisterService due to it being static, abstract and generic.

    RegisterService : RegisterService_MethodGroup
    class RegisterService_MethodGroup:
        @typing.overload
        def __call__(self, service: ISingleServerService, options: ExternalServiceOptions) -> Guid:...
        @typing.overload
        def __call__(self, service: ISingleServerService, defaultServerId: Guid, options: ExternalServiceOptions) -> Guid:...
        @typing.overload
        def __call__(self, service: IMultiServerService, options: ExternalServiceOptions, policy: ExecutionPolicy) -> Guid:...



class ExternalServiceResult(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Succeeded : ExternalServiceResult # 0
    Failed : ExternalServiceResult # 1
    Unhandled : ExternalServiceResult # 2


class ExternalServices(abc.ABC):

    class BuiltInExternalServices(abc.ABC):
        @classmethod
        @property
        def AlignmentService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def ATFTranslationService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def AXMImporterService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def CloudExternalService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def CodeCheckingParameterService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def ConnectionTypeChangedService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def CustomFieldEditPropertiesService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def CustomFieldService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def DirectContext3DService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def DuctFittingAndAccessoryPressureDropService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def DuctFittingAndAccessoryPressureDropUIService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def DuctPressureDropService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def ElectricalAnalyticalLoadCombinationUIService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def ElectricalAnalyticalLoadSetUIService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def EntitlementExternalService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def ExternalDataManagerService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def ExternalDataTypeService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def ExternalParameterService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def ExternalResourceService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def ExternalResourceUIService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def ExternalUIService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def ForgeSchemaService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def FramingProfileService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def GenericRepoHelperService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def GeometryAugmentationService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def HoleDefinitionService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def IFCEntityTreeUIService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def IFCExporterService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def IFCImporterService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def MemberForcesService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def ModelAccessValidationService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def ModifyConnectionParametersService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def ModifyConnectionRangesService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def NavisworksExporterService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def PathOfTravelCalculationService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def PipeFittingAndAccessoryPressureDropService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def PipeFittingAndAccessoryPressureDropUIService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def PipeFrictionFactorService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def PipePlumbingFixtureFlowService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def PipePressureDropService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def RebarUpdateService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def RevisionsOnSheetUIService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def SiteInsertService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def SiteLinkerUIService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def SnappingService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def StructuralSectionsService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def TemporaryGraphicsHandlerService(cls) -> ExternalServiceId: ...
        @classmethod
        @property
        def ViewSheetSetUIService(cls) -> ExternalServiceId: ...



class IExternalData(typing.Protocol):
    pass


class IExternalServer(typing.Protocol):
    @abc.abstractmethod
    def GetDescription(self) -> str: ...
    @abc.abstractmethod
    def GetName(self) -> str: ...
    @abc.abstractmethod
    def GetServerId(self) -> Guid: ...
    @abc.abstractmethod
    def GetServiceId(self) -> ExternalServiceId: ...
    @abc.abstractmethod
    def GetVendorId(self) -> str: ...


class IExternalService(typing.Protocol):
    @abc.abstractmethod
    def Execute(self, server: IExternalServer, document: Document, data: IExternalData) -> bool: ...
    @abc.abstractmethod
    def GetDescription(self) -> str: ...
    @abc.abstractmethod
    def GetName(self) -> str: ...
    @abc.abstractmethod
    def GetServiceId(self) -> ExternalServiceId: ...
    @abc.abstractmethod
    def GetVendorId(self) -> str: ...
    @abc.abstractmethod
    def IsValidServer(self, server: IExternalServer) -> bool: ...
    @abc.abstractmethod
    def OnServersChanged(self, document: Document, cause: ServerChangeCause, oldServers: IList_1[Guid]) -> None: ...
    @abc.abstractmethod
    def OnServersDisparity(self, document: Document, oldServers: IList_1[Guid]) -> DisparityResponse: ...


class IMultiServerService(IExternalService, typing.Protocol):
    @abc.abstractmethod
    def CanExecute(self, server: IExternalServer, document: Document, data: IExternalData) -> bool: ...


class ISingleServerService(IExternalService, typing.Protocol):
    pass


class MultiServerService(ExternalService):
    @property
    def Description(self) -> str: ...
    @property
    def ExecutionPolicy(self) -> ExecutionPolicy: ...
    @property
    def IsSerializable(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfServers(self) -> int: ...
    @property
    def ServiceId(self) -> ExternalServiceId: ...
    @property
    def SupportActivation(self) -> bool: ...
    @property
    def VendorId(self) -> str: ...
    def SetServerState(self, serverId: Guid, document: Document, bActive: bool) -> bool: ...
    # Skipped GetActiveServerIds due to it being static, abstract and generic.

    GetActiveServerIds : GetActiveServerIds_MethodGroup
    class GetActiveServerIds_MethodGroup:
        @typing.overload
        def __call__(self) -> IList_1[Guid]:...
        @typing.overload
        def __call__(self, document: Document) -> IList_1[Guid]:...

    # Skipped SetActiveServers due to it being static, abstract and generic.

    SetActiveServers : SetActiveServers_MethodGroup
    class SetActiveServers_MethodGroup:
        @typing.overload
        def __call__(self, serverIds: IList_1[Guid]) -> None:...
        @typing.overload
        def __call__(self, serverIds: IList_1[Guid], document: Document) -> None:...



class ServerChangeCause(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ImposedChange : ServerChangeCause # 0
    UserChange : ServerChangeCause # 1


class SingleServerService(ExternalService):
    @property
    def Description(self) -> str: ...
    @property
    def IsSerializable(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def NumberOfServers(self) -> int: ...
    @property
    def ServiceId(self) -> ExternalServiceId: ...
    @property
    def SupportActivation(self) -> bool: ...
    @property
    def VendorId(self) -> str: ...
    def UnsetActiveServer(self, document: Document) -> None: ...
    # Skipped GetActiveServerId due to it being static, abstract and generic.

    GetActiveServerId : GetActiveServerId_MethodGroup
    class GetActiveServerId_MethodGroup:
        @typing.overload
        def __call__(self) -> Guid:...
        @typing.overload
        def __call__(self, document: Document) -> Guid:...

    # Skipped SetActiveServer due to it being static, abstract and generic.

    SetActiveServer : SetActiveServer_MethodGroup
    class SetActiveServer_MethodGroup:
        @typing.overload
        def __call__(self, serverId: Guid) -> None:...
        @typing.overload
        def __call__(self, serverId: Guid, document: Document) -> None:...


