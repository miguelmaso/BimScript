import typing, clr, abc
from System.IO import Stream
from System.Drawing.Imaging import PixelFormat, ColorPalette, PropertyItem, ImageFormat, BitmapData, ImageLockMode, ImageAttributes, Metafile, EmfPlusRecordType, PlayRecordCallback, EncoderParameters, FrameDimension, ImageCodecInfo
from System import Array_1, Guid, MarshalByRefObject, IDisposable, ICloneable, IEquatable_1, MulticastDelegate, IAsyncResult, AsyncCallback
from System.Runtime.Serialization import ISerializable
from System.Drawing.Text import GenericFontFamilies, FontCollection, TextRenderingHint, HotkeyPrefix
from System.Drawing.Drawing2D import CompositingMode, CompositingQuality, InterpolationMode, PixelOffsetMode, SmoothingMode, Matrix, GraphicsPath, GraphicsContainer, GraphicsState, FillMode, FlushIntention, MatrixOrder, CombineMode, CoordinateSpace, PenAlignment, CustomLineCap, DashCap, DashStyle, LineCap, LineJoin, PenType, RegionData
from System.Reflection import MethodInfo
from System.Numerics import Vector2, Vector4

class Bitmap(Image):
    @typing.overload
    def __init__(self, filename: str) -> None: ...
    @typing.overload
    def __init__(self, filename: str, useIcm: bool) -> None: ...
    @typing.overload
    def __init__(self, original: Image) -> None: ...
    @typing.overload
    def __init__(self, original: Image, newSize: Size) -> None: ...
    @typing.overload
    def __init__(self, original: Image, width: int, height: int) -> None: ...
    @typing.overload
    def __init__(self, stream: Stream) -> None: ...
    @typing.overload
    def __init__(self, stream: Stream, useIcm: bool) -> None: ...
    @typing.overload
    def __init__(self, type: typing.Type[typing.Any], resource: str) -> None: ...
    @typing.overload
    def __init__(self, width: int, height: int) -> None: ...
    @typing.overload
    def __init__(self, width: int, height: int, format: PixelFormat) -> None: ...
    @typing.overload
    def __init__(self, width: int, height: int, g: Graphics) -> None: ...
    @typing.overload
    def __init__(self, width: int, height: int, stride: int, format: PixelFormat, scan0: int) -> None: ...
    @property
    def Flags(self) -> int: ...
    @property
    def FrameDimensionsList(self) -> Array_1[Guid]: ...
    @property
    def Height(self) -> int: ...
    @property
    def HorizontalResolution(self) -> float: ...
    @property
    def Palette(self) -> ColorPalette: ...
    @Palette.setter
    def Palette(self, value: ColorPalette) -> ColorPalette: ...
    @property
    def PhysicalDimension(self) -> SizeF: ...
    @property
    def PixelFormat(self) -> PixelFormat: ...
    @property
    def PropertyIdList(self) -> Array_1[int]: ...
    @property
    def PropertyItems(self) -> Array_1[PropertyItem]: ...
    @property
    def RawFormat(self) -> ImageFormat: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Tag(self) -> typing.Any: ...
    @Tag.setter
    def Tag(self, value: typing.Any) -> typing.Any: ...
    @property
    def VerticalResolution(self) -> float: ...
    @property
    def Width(self) -> int: ...
    @staticmethod
    def FromHicon(hicon: int) -> Bitmap: ...
    @staticmethod
    def FromResource(hinstance: int, bitmapName: str) -> Bitmap: ...
    def GetHicon(self) -> int: ...
    def GetPixel(self, x: int, y: int) -> Color: ...
    def SetPixel(self, x: int, y: int, color: Color) -> None: ...
    def SetResolution(self, xDpi: float, yDpi: float) -> None: ...
    def UnlockBits(self, bitmapdata: BitmapData) -> None: ...
    # Skipped Clone due to it being static, abstract and generic.

    Clone : Clone_MethodGroup
    class Clone_MethodGroup:
        @typing.overload
        def __call__(self, rect: RectangleF, format: PixelFormat) -> Bitmap:...
        @typing.overload
        def __call__(self, rect: Rectangle, format: PixelFormat) -> Bitmap:...

    # Skipped GetHbitmap due to it being static, abstract and generic.

    GetHbitmap : GetHbitmap_MethodGroup
    class GetHbitmap_MethodGroup:
        @typing.overload
        def __call__(self) -> int:...
        @typing.overload
        def __call__(self, background: Color) -> int:...

    # Skipped LockBits due to it being static, abstract and generic.

    LockBits : LockBits_MethodGroup
    class LockBits_MethodGroup:
        @typing.overload
        def __call__(self, rect: Rectangle, flags: ImageLockMode, format: PixelFormat) -> BitmapData:...
        @typing.overload
        def __call__(self, rect: Rectangle, flags: ImageLockMode, format: PixelFormat, bitmapData: BitmapData) -> BitmapData:...

    # Skipped MakeTransparent due to it being static, abstract and generic.

    MakeTransparent : MakeTransparent_MethodGroup
    class MakeTransparent_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, transparentColor: Color) -> None:...



class Brush(MarshalByRefObject, IDisposable, ICloneable):
    @abc.abstractmethod
    def Clone(self) -> typing.Any: ...
    def Dispose(self) -> None: ...


class CharacterRange:
    def __init__(self, First: int, Length: int) -> None: ...
    @property
    def First(self) -> int: ...
    @First.setter
    def First(self, value: int) -> int: ...
    @property
    def Length(self) -> int: ...
    @Length.setter
    def Length(self, value: int) -> int: ...
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, cr1: CharacterRange, cr2: CharacterRange) -> bool: ...
    def __ne__(self, cr1: CharacterRange, cr2: CharacterRange) -> bool: ...


class Color(IEquatable_1[Color]):
    Empty : Color
    @property
    def A(self) -> int: ...
    @classmethod
    @property
    def AliceBlue(cls) -> Color: ...
    @classmethod
    @property
    def AntiqueWhite(cls) -> Color: ...
    @classmethod
    @property
    def Aqua(cls) -> Color: ...
    @classmethod
    @property
    def Aquamarine(cls) -> Color: ...
    @classmethod
    @property
    def Azure(cls) -> Color: ...
    @property
    def B(self) -> int: ...
    @classmethod
    @property
    def Beige(cls) -> Color: ...
    @classmethod
    @property
    def Bisque(cls) -> Color: ...
    @classmethod
    @property
    def Black(cls) -> Color: ...
    @classmethod
    @property
    def BlanchedAlmond(cls) -> Color: ...
    @classmethod
    @property
    def Blue(cls) -> Color: ...
    @classmethod
    @property
    def BlueViolet(cls) -> Color: ...
    @classmethod
    @property
    def Brown(cls) -> Color: ...
    @classmethod
    @property
    def BurlyWood(cls) -> Color: ...
    @classmethod
    @property
    def CadetBlue(cls) -> Color: ...
    @classmethod
    @property
    def Chartreuse(cls) -> Color: ...
    @classmethod
    @property
    def Chocolate(cls) -> Color: ...
    @classmethod
    @property
    def Coral(cls) -> Color: ...
    @classmethod
    @property
    def CornflowerBlue(cls) -> Color: ...
    @classmethod
    @property
    def Cornsilk(cls) -> Color: ...
    @classmethod
    @property
    def Crimson(cls) -> Color: ...
    @classmethod
    @property
    def Cyan(cls) -> Color: ...
    @classmethod
    @property
    def DarkBlue(cls) -> Color: ...
    @classmethod
    @property
    def DarkCyan(cls) -> Color: ...
    @classmethod
    @property
    def DarkGoldenrod(cls) -> Color: ...
    @classmethod
    @property
    def DarkGray(cls) -> Color: ...
    @classmethod
    @property
    def DarkGreen(cls) -> Color: ...
    @classmethod
    @property
    def DarkKhaki(cls) -> Color: ...
    @classmethod
    @property
    def DarkMagenta(cls) -> Color: ...
    @classmethod
    @property
    def DarkOliveGreen(cls) -> Color: ...
    @classmethod
    @property
    def DarkOrange(cls) -> Color: ...
    @classmethod
    @property
    def DarkOrchid(cls) -> Color: ...
    @classmethod
    @property
    def DarkRed(cls) -> Color: ...
    @classmethod
    @property
    def DarkSalmon(cls) -> Color: ...
    @classmethod
    @property
    def DarkSeaGreen(cls) -> Color: ...
    @classmethod
    @property
    def DarkSlateBlue(cls) -> Color: ...
    @classmethod
    @property
    def DarkSlateGray(cls) -> Color: ...
    @classmethod
    @property
    def DarkTurquoise(cls) -> Color: ...
    @classmethod
    @property
    def DarkViolet(cls) -> Color: ...
    @classmethod
    @property
    def DeepPink(cls) -> Color: ...
    @classmethod
    @property
    def DeepSkyBlue(cls) -> Color: ...
    @classmethod
    @property
    def DimGray(cls) -> Color: ...
    @classmethod
    @property
    def DodgerBlue(cls) -> Color: ...
    @classmethod
    @property
    def Firebrick(cls) -> Color: ...
    @classmethod
    @property
    def FloralWhite(cls) -> Color: ...
    @classmethod
    @property
    def ForestGreen(cls) -> Color: ...
    @classmethod
    @property
    def Fuchsia(cls) -> Color: ...
    @property
    def G(self) -> int: ...
    @classmethod
    @property
    def Gainsboro(cls) -> Color: ...
    @classmethod
    @property
    def GhostWhite(cls) -> Color: ...
    @classmethod
    @property
    def Gold(cls) -> Color: ...
    @classmethod
    @property
    def Goldenrod(cls) -> Color: ...
    @classmethod
    @property
    def Gray(cls) -> Color: ...
    @classmethod
    @property
    def Green(cls) -> Color: ...
    @classmethod
    @property
    def GreenYellow(cls) -> Color: ...
    @classmethod
    @property
    def Honeydew(cls) -> Color: ...
    @classmethod
    @property
    def HotPink(cls) -> Color: ...
    @classmethod
    @property
    def IndianRed(cls) -> Color: ...
    @classmethod
    @property
    def Indigo(cls) -> Color: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def IsKnownColor(self) -> bool: ...
    @property
    def IsNamedColor(self) -> bool: ...
    @property
    def IsSystemColor(self) -> bool: ...
    @classmethod
    @property
    def Ivory(cls) -> Color: ...
    @classmethod
    @property
    def Khaki(cls) -> Color: ...
    @classmethod
    @property
    def Lavender(cls) -> Color: ...
    @classmethod
    @property
    def LavenderBlush(cls) -> Color: ...
    @classmethod
    @property
    def LawnGreen(cls) -> Color: ...
    @classmethod
    @property
    def LemonChiffon(cls) -> Color: ...
    @classmethod
    @property
    def LightBlue(cls) -> Color: ...
    @classmethod
    @property
    def LightCoral(cls) -> Color: ...
    @classmethod
    @property
    def LightCyan(cls) -> Color: ...
    @classmethod
    @property
    def LightGoldenrodYellow(cls) -> Color: ...
    @classmethod
    @property
    def LightGray(cls) -> Color: ...
    @classmethod
    @property
    def LightGreen(cls) -> Color: ...
    @classmethod
    @property
    def LightPink(cls) -> Color: ...
    @classmethod
    @property
    def LightSalmon(cls) -> Color: ...
    @classmethod
    @property
    def LightSeaGreen(cls) -> Color: ...
    @classmethod
    @property
    def LightSkyBlue(cls) -> Color: ...
    @classmethod
    @property
    def LightSlateGray(cls) -> Color: ...
    @classmethod
    @property
    def LightSteelBlue(cls) -> Color: ...
    @classmethod
    @property
    def LightYellow(cls) -> Color: ...
    @classmethod
    @property
    def Lime(cls) -> Color: ...
    @classmethod
    @property
    def LimeGreen(cls) -> Color: ...
    @classmethod
    @property
    def Linen(cls) -> Color: ...
    @classmethod
    @property
    def Magenta(cls) -> Color: ...
    @classmethod
    @property
    def Maroon(cls) -> Color: ...
    @classmethod
    @property
    def MediumAquamarine(cls) -> Color: ...
    @classmethod
    @property
    def MediumBlue(cls) -> Color: ...
    @classmethod
    @property
    def MediumOrchid(cls) -> Color: ...
    @classmethod
    @property
    def MediumPurple(cls) -> Color: ...
    @classmethod
    @property
    def MediumSeaGreen(cls) -> Color: ...
    @classmethod
    @property
    def MediumSlateBlue(cls) -> Color: ...
    @classmethod
    @property
    def MediumSpringGreen(cls) -> Color: ...
    @classmethod
    @property
    def MediumTurquoise(cls) -> Color: ...
    @classmethod
    @property
    def MediumVioletRed(cls) -> Color: ...
    @classmethod
    @property
    def MidnightBlue(cls) -> Color: ...
    @classmethod
    @property
    def MintCream(cls) -> Color: ...
    @classmethod
    @property
    def MistyRose(cls) -> Color: ...
    @classmethod
    @property
    def Moccasin(cls) -> Color: ...
    @property
    def Name(self) -> str: ...
    @classmethod
    @property
    def NavajoWhite(cls) -> Color: ...
    @classmethod
    @property
    def Navy(cls) -> Color: ...
    @classmethod
    @property
    def OldLace(cls) -> Color: ...
    @classmethod
    @property
    def Olive(cls) -> Color: ...
    @classmethod
    @property
    def OliveDrab(cls) -> Color: ...
    @classmethod
    @property
    def Orange(cls) -> Color: ...
    @classmethod
    @property
    def OrangeRed(cls) -> Color: ...
    @classmethod
    @property
    def Orchid(cls) -> Color: ...
    @classmethod
    @property
    def PaleGoldenrod(cls) -> Color: ...
    @classmethod
    @property
    def PaleGreen(cls) -> Color: ...
    @classmethod
    @property
    def PaleTurquoise(cls) -> Color: ...
    @classmethod
    @property
    def PaleVioletRed(cls) -> Color: ...
    @classmethod
    @property
    def PapayaWhip(cls) -> Color: ...
    @classmethod
    @property
    def PeachPuff(cls) -> Color: ...
    @classmethod
    @property
    def Peru(cls) -> Color: ...
    @classmethod
    @property
    def Pink(cls) -> Color: ...
    @classmethod
    @property
    def Plum(cls) -> Color: ...
    @classmethod
    @property
    def PowderBlue(cls) -> Color: ...
    @classmethod
    @property
    def Purple(cls) -> Color: ...
    @property
    def R(self) -> int: ...
    @classmethod
    @property
    def RebeccaPurple(cls) -> Color: ...
    @classmethod
    @property
    def Red(cls) -> Color: ...
    @classmethod
    @property
    def RosyBrown(cls) -> Color: ...
    @classmethod
    @property
    def RoyalBlue(cls) -> Color: ...
    @classmethod
    @property
    def SaddleBrown(cls) -> Color: ...
    @classmethod
    @property
    def Salmon(cls) -> Color: ...
    @classmethod
    @property
    def SandyBrown(cls) -> Color: ...
    @classmethod
    @property
    def SeaGreen(cls) -> Color: ...
    @classmethod
    @property
    def SeaShell(cls) -> Color: ...
    @classmethod
    @property
    def Sienna(cls) -> Color: ...
    @classmethod
    @property
    def Silver(cls) -> Color: ...
    @classmethod
    @property
    def SkyBlue(cls) -> Color: ...
    @classmethod
    @property
    def SlateBlue(cls) -> Color: ...
    @classmethod
    @property
    def SlateGray(cls) -> Color: ...
    @classmethod
    @property
    def Snow(cls) -> Color: ...
    @classmethod
    @property
    def SpringGreen(cls) -> Color: ...
    @classmethod
    @property
    def SteelBlue(cls) -> Color: ...
    @classmethod
    @property
    def Tan(cls) -> Color: ...
    @classmethod
    @property
    def Teal(cls) -> Color: ...
    @classmethod
    @property
    def Thistle(cls) -> Color: ...
    @classmethod
    @property
    def Tomato(cls) -> Color: ...
    @classmethod
    @property
    def Transparent(cls) -> Color: ...
    @classmethod
    @property
    def Turquoise(cls) -> Color: ...
    @classmethod
    @property
    def Violet(cls) -> Color: ...
    @classmethod
    @property
    def Wheat(cls) -> Color: ...
    @classmethod
    @property
    def White(cls) -> Color: ...
    @classmethod
    @property
    def WhiteSmoke(cls) -> Color: ...
    @classmethod
    @property
    def Yellow(cls) -> Color: ...
    @classmethod
    @property
    def YellowGreen(cls) -> Color: ...
    @staticmethod
    def FromKnownColor(color: KnownColor) -> Color: ...
    @staticmethod
    def FromName(name: str) -> Color: ...
    def GetBrightness(self) -> float: ...
    def GetHashCode(self) -> int: ...
    def GetHue(self) -> float: ...
    def GetSaturation(self) -> float: ...
    def __eq__(self, left: Color, right: Color) -> bool: ...
    def __ne__(self, left: Color, right: Color) -> bool: ...
    def ToArgb(self) -> int: ...
    def ToKnownColor(self) -> KnownColor: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: Color) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...

    # Skipped FromArgb due to it being static, abstract and generic.

    FromArgb : FromArgb_MethodGroup
    class FromArgb_MethodGroup:
        @typing.overload
        def __call__(self, argb: int) -> Color:...
        @typing.overload
        def __call__(self, alpha: int, baseColor: Color) -> Color:...
        @typing.overload
        def __call__(self, red: int, green: int, blue: int) -> Color:...
        @typing.overload
        def __call__(self, alpha: int, red: int, green: int, blue: int) -> Color:...



class CopyPixelOperation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Blackness : CopyPixelOperation # 66
    NotSourceErase : CopyPixelOperation # 1114278
    NotSourceCopy : CopyPixelOperation # 3342344
    SourceErase : CopyPixelOperation # 4457256
    DestinationInvert : CopyPixelOperation # 5570569
    PatInvert : CopyPixelOperation # 5898313
    SourceInvert : CopyPixelOperation # 6684742
    SourceAnd : CopyPixelOperation # 8913094
    MergePaint : CopyPixelOperation # 12255782
    MergeCopy : CopyPixelOperation # 12583114
    SourceCopy : CopyPixelOperation # 13369376
    SourcePaint : CopyPixelOperation # 15597702
    PatCopy : CopyPixelOperation # 15728673
    PatPaint : CopyPixelOperation # 16452105
    Whiteness : CopyPixelOperation # 16711778
    CaptureBlt : CopyPixelOperation # 1073741824
    NoMirrorBitmap : CopyPixelOperation # -2147483648


class Font(MarshalByRefObject, ISerializable, IDisposable, ICloneable):
    @typing.overload
    def __init__(self, family: FontFamily, emSize: float) -> None: ...
    @typing.overload
    def __init__(self, family: FontFamily, emSize: float, style: FontStyle) -> None: ...
    @typing.overload
    def __init__(self, family: FontFamily, emSize: float, style: FontStyle, unit: GraphicsUnit) -> None: ...
    @typing.overload
    def __init__(self, family: FontFamily, emSize: float, style: FontStyle, unit: GraphicsUnit, gdiCharSet: int) -> None: ...
    @typing.overload
    def __init__(self, family: FontFamily, emSize: float, style: FontStyle, unit: GraphicsUnit, gdiCharSet: int, gdiVerticalFont: bool) -> None: ...
    @typing.overload
    def __init__(self, family: FontFamily, emSize: float, unit: GraphicsUnit) -> None: ...
    @typing.overload
    def __init__(self, familyName: str, emSize: float) -> None: ...
    @typing.overload
    def __init__(self, familyName: str, emSize: float, style: FontStyle) -> None: ...
    @typing.overload
    def __init__(self, familyName: str, emSize: float, style: FontStyle, unit: GraphicsUnit) -> None: ...
    @typing.overload
    def __init__(self, familyName: str, emSize: float, style: FontStyle, unit: GraphicsUnit, gdiCharSet: int) -> None: ...
    @typing.overload
    def __init__(self, familyName: str, emSize: float, style: FontStyle, unit: GraphicsUnit, gdiCharSet: int, gdiVerticalFont: bool) -> None: ...
    @typing.overload
    def __init__(self, familyName: str, emSize: float, unit: GraphicsUnit) -> None: ...
    @typing.overload
    def __init__(self, prototype: Font, newStyle: FontStyle) -> None: ...
    @property
    def Bold(self) -> bool: ...
    @property
    def FontFamily(self) -> FontFamily: ...
    @property
    def GdiCharSet(self) -> int: ...
    @property
    def GdiVerticalFont(self) -> bool: ...
    @property
    def Height(self) -> int: ...
    @property
    def IsSystemFont(self) -> bool: ...
    @property
    def Italic(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @property
    def OriginalFontName(self) -> str: ...
    @property
    def Size(self) -> float: ...
    @property
    def SizeInPoints(self) -> float: ...
    @property
    def Strikeout(self) -> bool: ...
    @property
    def Style(self) -> FontStyle: ...
    @property
    def SystemFontName(self) -> str: ...
    @property
    def Underline(self) -> bool: ...
    @property
    def Unit(self) -> GraphicsUnit: ...
    def Clone(self) -> typing.Any: ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: typing.Any) -> bool: ...
    @staticmethod
    def FromHdc(hdc: int) -> Font: ...
    @staticmethod
    def FromHfont(hfont: int) -> Font: ...
    def GetHashCode(self) -> int: ...
    def ToHfont(self) -> int: ...
    def ToString(self) -> str: ...
    # Skipped FromLogFont due to it being static, abstract and generic.

    FromLogFont : FromLogFont_MethodGroup
    class FromLogFont_MethodGroup:
        @typing.overload
        def __call__(self, lf: typing.Any) -> Font:...
        @typing.overload
        def __call__(self, lf: typing.Any, hdc: int) -> Font:...

    # Skipped GetHeight due to it being static, abstract and generic.

    GetHeight : GetHeight_MethodGroup
    class GetHeight_MethodGroup:
        @typing.overload
        def __call__(self) -> float:...
        @typing.overload
        def __call__(self, dpi: float) -> float:...
        @typing.overload
        def __call__(self, graphics: Graphics) -> float:...

    # Skipped ToLogFont due to it being static, abstract and generic.

    ToLogFont : ToLogFont_MethodGroup
    class ToLogFont_MethodGroup:
        @typing.overload
        def __call__(self, logFont: typing.Any) -> None:...
        @typing.overload
        def __call__(self, logFont: typing.Any, graphics: Graphics) -> None:...



class FontFamily(MarshalByRefObject, IDisposable):
    @typing.overload
    def __init__(self, genericFamily: GenericFontFamilies) -> None: ...
    @typing.overload
    def __init__(self, name: str) -> None: ...
    @typing.overload
    def __init__(self, name: str, fontCollection: FontCollection) -> None: ...
    @classmethod
    @property
    def Families(cls) -> Array_1[FontFamily]: ...
    @classmethod
    @property
    def GenericMonospace(cls) -> FontFamily: ...
    @classmethod
    @property
    def GenericSansSerif(cls) -> FontFamily: ...
    @classmethod
    @property
    def GenericSerif(cls) -> FontFamily: ...
    @property
    def Name(self) -> str: ...
    def Dispose(self) -> None: ...
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetCellAscent(self, style: FontStyle) -> int: ...
    def GetCellDescent(self, style: FontStyle) -> int: ...
    def GetEmHeight(self, style: FontStyle) -> int: ...
    @staticmethod
    def GetFamilies(graphics: Graphics) -> Array_1[FontFamily]: ...
    def GetHashCode(self) -> int: ...
    def GetLineSpacing(self, style: FontStyle) -> int: ...
    def GetName(self, language: int) -> str: ...
    def IsStyleAvailable(self, style: FontStyle) -> bool: ...
    def ToString(self) -> str: ...


class FontStyle(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Regular : FontStyle # 0
    Bold : FontStyle # 1
    Italic : FontStyle # 2
    Underline : FontStyle # 4
    Strikeout : FontStyle # 8


class Graphics(MarshalByRefObject, IDeviceContext):
    @property
    def Clip(self) -> Region: ...
    @Clip.setter
    def Clip(self, value: Region) -> Region: ...
    @property
    def ClipBounds(self) -> RectangleF: ...
    @property
    def CompositingMode(self) -> CompositingMode: ...
    @CompositingMode.setter
    def CompositingMode(self, value: CompositingMode) -> CompositingMode: ...
    @property
    def CompositingQuality(self) -> CompositingQuality: ...
    @CompositingQuality.setter
    def CompositingQuality(self, value: CompositingQuality) -> CompositingQuality: ...
    @property
    def DpiX(self) -> float: ...
    @property
    def DpiY(self) -> float: ...
    @property
    def InterpolationMode(self) -> InterpolationMode: ...
    @InterpolationMode.setter
    def InterpolationMode(self, value: InterpolationMode) -> InterpolationMode: ...
    @property
    def IsClipEmpty(self) -> bool: ...
    @property
    def IsVisibleClipEmpty(self) -> bool: ...
    @property
    def PageScale(self) -> float: ...
    @PageScale.setter
    def PageScale(self, value: float) -> float: ...
    @property
    def PageUnit(self) -> GraphicsUnit: ...
    @PageUnit.setter
    def PageUnit(self, value: GraphicsUnit) -> GraphicsUnit: ...
    @property
    def PixelOffsetMode(self) -> PixelOffsetMode: ...
    @PixelOffsetMode.setter
    def PixelOffsetMode(self, value: PixelOffsetMode) -> PixelOffsetMode: ...
    @property
    def RenderingOrigin(self) -> Point: ...
    @RenderingOrigin.setter
    def RenderingOrigin(self, value: Point) -> Point: ...
    @property
    def SmoothingMode(self) -> SmoothingMode: ...
    @SmoothingMode.setter
    def SmoothingMode(self, value: SmoothingMode) -> SmoothingMode: ...
    @property
    def TextContrast(self) -> int: ...
    @TextContrast.setter
    def TextContrast(self, value: int) -> int: ...
    @property
    def TextRenderingHint(self) -> TextRenderingHint: ...
    @TextRenderingHint.setter
    def TextRenderingHint(self, value: TextRenderingHint) -> TextRenderingHint: ...
    @property
    def Transform(self) -> Matrix: ...
    @Transform.setter
    def Transform(self, value: Matrix) -> Matrix: ...
    @property
    def VisibleClipBounds(self) -> RectangleF: ...
    def AddMetafileComment(self, data: Array_1[int]) -> None: ...
    def Clear(self, color: Color) -> None: ...
    def Dispose(self) -> None: ...
    def DrawIconUnstretched(self, icon: Icon, targetRect: Rectangle) -> None: ...
    def DrawImageUnscaledAndClipped(self, image: Image, rect: Rectangle) -> None: ...
    def DrawPath(self, pen: Pen, path: GraphicsPath) -> None: ...
    def EndContainer(self, container: GraphicsContainer) -> None: ...
    def FillPath(self, brush: Brush, path: GraphicsPath) -> None: ...
    def FillRegion(self, brush: Brush, region: Region) -> None: ...
    @staticmethod
    def FromHdcInternal(hdc: int) -> Graphics: ...
    @staticmethod
    def FromHwnd(hwnd: int) -> Graphics: ...
    @staticmethod
    def FromHwndInternal(hwnd: int) -> Graphics: ...
    @staticmethod
    def FromImage(image: Image) -> Graphics: ...
    def GetContextInfo(self) -> typing.Any: ...
    @staticmethod
    def GetHalftonePalette() -> int: ...
    def GetHdc(self) -> int: ...
    def GetNearestColor(self, color: Color) -> Color: ...
    def MeasureCharacterRanges(self, text: str, font: Font, layoutRect: RectangleF, stringFormat: StringFormat) -> Array_1[Region]: ...
    def ReleaseHdcInternal(self, hdc: int) -> None: ...
    def ResetClip(self) -> None: ...
    def ResetTransform(self) -> None: ...
    def Restore(self, gstate: GraphicsState) -> None: ...
    def Save(self) -> GraphicsState: ...
    # Skipped BeginContainer due to it being static, abstract and generic.

    BeginContainer : BeginContainer_MethodGroup
    class BeginContainer_MethodGroup:
        @typing.overload
        def __call__(self) -> GraphicsContainer:...
        @typing.overload
        def __call__(self, dstrect: Rectangle, srcrect: Rectangle, unit: GraphicsUnit) -> GraphicsContainer:...
        @typing.overload
        def __call__(self, dstrect: RectangleF, srcrect: RectangleF, unit: GraphicsUnit) -> GraphicsContainer:...

    # Skipped CopyFromScreen due to it being static, abstract and generic.

    CopyFromScreen : CopyFromScreen_MethodGroup
    class CopyFromScreen_MethodGroup:
        @typing.overload
        def __call__(self, upperLeftSource: Point, upperLeftDestination: Point, blockRegionSize: Size) -> None:...
        @typing.overload
        def __call__(self, upperLeftSource: Point, upperLeftDestination: Point, blockRegionSize: Size, copyPixelOperation: CopyPixelOperation) -> None:...
        @typing.overload
        def __call__(self, sourceX: int, sourceY: int, destinationX: int, destinationY: int, blockRegionSize: Size) -> None:...
        @typing.overload
        def __call__(self, sourceX: int, sourceY: int, destinationX: int, destinationY: int, blockRegionSize: Size, copyPixelOperation: CopyPixelOperation) -> None:...

    # Skipped DrawArc due to it being static, abstract and generic.

    DrawArc : DrawArc_MethodGroup
    class DrawArc_MethodGroup:
        @typing.overload
        def __call__(self, pen: Pen, rect: RectangleF, startAngle: float, sweepAngle: float) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, rect: Rectangle, startAngle: float, sweepAngle: float) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None:...
        # Method DrawArc(pen : Pen, x : Int32, y : Int32, width : Int32, height : Int32, startAngle : Int32, sweepAngle : Int32) was skipped since it collides with above method

    # Skipped DrawBezier due to it being static, abstract and generic.

    DrawBezier : DrawBezier_MethodGroup
    class DrawBezier_MethodGroup:
        @typing.overload
        def __call__(self, pen: Pen, pt1: PointF, pt2: PointF, pt3: PointF, pt4: PointF) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, pt1: Point, pt2: Point, pt3: Point, pt4: Point) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float, x4: float, y4: float) -> None:...

    # Skipped DrawBeziers due to it being static, abstract and generic.

    DrawBeziers : DrawBeziers_MethodGroup
    class DrawBeziers_MethodGroup:
        @typing.overload
        def __call__(self, pen: Pen, points: Array_1[PointF]) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, points: Array_1[Point]) -> None:...

    # Skipped DrawClosedCurve due to it being static, abstract and generic.

    DrawClosedCurve : DrawClosedCurve_MethodGroup
    class DrawClosedCurve_MethodGroup:
        @typing.overload
        def __call__(self, pen: Pen, points: Array_1[PointF]) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, points: Array_1[Point]) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, points: Array_1[PointF], tension: float, fillmode: FillMode) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, points: Array_1[Point], tension: float, fillmode: FillMode) -> None:...

    # Skipped DrawCurve due to it being static, abstract and generic.

    DrawCurve : DrawCurve_MethodGroup
    class DrawCurve_MethodGroup:
        @typing.overload
        def __call__(self, pen: Pen, points: Array_1[PointF]) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, points: Array_1[Point]) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, points: Array_1[PointF], tension: float) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, points: Array_1[Point], tension: float) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, points: Array_1[PointF], offset: int, numberOfSegments: int) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, points: Array_1[PointF], offset: int, numberOfSegments: int, tension: float) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, points: Array_1[Point], offset: int, numberOfSegments: int, tension: float) -> None:...

    # Skipped DrawEllipse due to it being static, abstract and generic.

    DrawEllipse : DrawEllipse_MethodGroup
    class DrawEllipse_MethodGroup:
        @typing.overload
        def __call__(self, pen: Pen, rect: RectangleF) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, rect: Rectangle) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, x: float, y: float, width: float, height: float) -> None:...
        # Method DrawEllipse(pen : Pen, x : Int32, y : Int32, width : Int32, height : Int32) was skipped since it collides with above method

    # Skipped DrawIcon due to it being static, abstract and generic.

    DrawIcon : DrawIcon_MethodGroup
    class DrawIcon_MethodGroup:
        @typing.overload
        def __call__(self, icon: Icon, targetRect: Rectangle) -> None:...
        @typing.overload
        def __call__(self, icon: Icon, x: int, y: int) -> None:...

    # Skipped DrawImage due to it being static, abstract and generic.

    DrawImage : DrawImage_MethodGroup
    class DrawImage_MethodGroup:
        @typing.overload
        def __call__(self, image: Image, destPoints: Array_1[PointF]) -> None:...
        @typing.overload
        def __call__(self, image: Image, destPoints: Array_1[Point]) -> None:...
        @typing.overload
        def __call__(self, image: Image, point: PointF) -> None:...
        @typing.overload
        def __call__(self, image: Image, point: Point) -> None:...
        @typing.overload
        def __call__(self, image: Image, rect: RectangleF) -> None:...
        @typing.overload
        def __call__(self, image: Image, rect: Rectangle) -> None:...
        @typing.overload
        def __call__(self, image: Image, x: float, y: float) -> None:...
        # Method DrawImage(image : Image, x : Int32, y : Int32) was skipped since it collides with above method
        @typing.overload
        def __call__(self, image: Image, destPoints: Array_1[PointF], srcRect: RectangleF, srcUnit: GraphicsUnit) -> None:...
        @typing.overload
        def __call__(self, image: Image, destPoints: Array_1[Point], srcRect: Rectangle, srcUnit: GraphicsUnit) -> None:...
        @typing.overload
        def __call__(self, image: Image, destRect: RectangleF, srcRect: RectangleF, srcUnit: GraphicsUnit) -> None:...
        @typing.overload
        def __call__(self, image: Image, destRect: Rectangle, srcRect: Rectangle, srcUnit: GraphicsUnit) -> None:...
        @typing.overload
        def __call__(self, image: Image, x: float, y: float, width: float, height: float) -> None:...
        @typing.overload
        def __call__(self, image: Image, x: float, y: float, srcRect: RectangleF, srcUnit: GraphicsUnit) -> None:...
        # Method DrawImage(image : Image, x : Int32, y : Int32, width : Int32, height : Int32) was skipped since it collides with above method
        @typing.overload
        def __call__(self, image: Image, x: int, y: int, srcRect: Rectangle, srcUnit: GraphicsUnit) -> None:...
        @typing.overload
        def __call__(self, image: Image, destPoints: Array_1[PointF], srcRect: RectangleF, srcUnit: GraphicsUnit, imageAttr: ImageAttributes) -> None:...
        @typing.overload
        def __call__(self, image: Image, destPoints: Array_1[Point], srcRect: Rectangle, srcUnit: GraphicsUnit, imageAttr: ImageAttributes) -> None:...
        @typing.overload
        def __call__(self, image: Image, destPoints: Array_1[PointF], srcRect: RectangleF, srcUnit: GraphicsUnit, imageAttr: ImageAttributes, callback: Graphics.DrawImageAbort) -> None:...
        @typing.overload
        def __call__(self, image: Image, destPoints: Array_1[Point], srcRect: Rectangle, srcUnit: GraphicsUnit, imageAttr: ImageAttributes, callback: Graphics.DrawImageAbort) -> None:...
        @typing.overload
        def __call__(self, image: Image, destPoints: Array_1[PointF], srcRect: RectangleF, srcUnit: GraphicsUnit, imageAttr: ImageAttributes, callback: Graphics.DrawImageAbort, callbackData: int) -> None:...
        @typing.overload
        def __call__(self, image: Image, destPoints: Array_1[Point], srcRect: Rectangle, srcUnit: GraphicsUnit, imageAttr: ImageAttributes, callback: Graphics.DrawImageAbort, callbackData: int) -> None:...
        @typing.overload
        def __call__(self, image: Image, destRect: Rectangle, srcX: float, srcY: float, srcWidth: float, srcHeight: float, srcUnit: GraphicsUnit) -> None:...
        # Method DrawImage(image : Image, destRect : Rectangle, srcX : Int32, srcY : Int32, srcWidth : Int32, srcHeight : Int32, srcUnit : GraphicsUnit) was skipped since it collides with above method
        @typing.overload
        def __call__(self, image: Image, destRect: Rectangle, srcX: float, srcY: float, srcWidth: float, srcHeight: float, srcUnit: GraphicsUnit, imageAttrs: ImageAttributes) -> None:...
        # Method DrawImage(image : Image, destRect : Rectangle, srcX : Int32, srcY : Int32, srcWidth : Int32, srcHeight : Int32, srcUnit : GraphicsUnit, imageAttr : ImageAttributes) was skipped since it collides with above method
        @typing.overload
        def __call__(self, image: Image, destRect: Rectangle, srcX: float, srcY: float, srcWidth: float, srcHeight: float, srcUnit: GraphicsUnit, imageAttrs: ImageAttributes, callback: Graphics.DrawImageAbort) -> None:...
        # Method DrawImage(image : Image, destRect : Rectangle, srcX : Int32, srcY : Int32, srcWidth : Int32, srcHeight : Int32, srcUnit : GraphicsUnit, imageAttr : ImageAttributes, callback : DrawImageAbort) was skipped since it collides with above method
        @typing.overload
        def __call__(self, image: Image, destRect: Rectangle, srcX: float, srcY: float, srcWidth: float, srcHeight: float, srcUnit: GraphicsUnit, imageAttrs: ImageAttributes, callback: Graphics.DrawImageAbort, callbackData: int) -> None:...
        # Method DrawImage(image : Image, destRect : Rectangle, srcX : Int32, srcY : Int32, srcWidth : Int32, srcHeight : Int32, srcUnit : GraphicsUnit, imageAttrs : ImageAttributes, callback : DrawImageAbort, callbackData : IntPtr) was skipped since it collides with above method

    # Skipped DrawImageUnscaled due to it being static, abstract and generic.

    DrawImageUnscaled : DrawImageUnscaled_MethodGroup
    class DrawImageUnscaled_MethodGroup:
        @typing.overload
        def __call__(self, image: Image, point: Point) -> None:...
        @typing.overload
        def __call__(self, image: Image, rect: Rectangle) -> None:...
        @typing.overload
        def __call__(self, image: Image, x: int, y: int) -> None:...
        @typing.overload
        def __call__(self, image: Image, x: int, y: int, width: int, height: int) -> None:...

    # Skipped DrawLine due to it being static, abstract and generic.

    DrawLine : DrawLine_MethodGroup
    class DrawLine_MethodGroup:
        @typing.overload
        def __call__(self, pen: Pen, pt1: PointF, pt2: PointF) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, pt1: Point, pt2: Point) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, x1: float, y1: float, x2: float, y2: float) -> None:...
        # Method DrawLine(pen : Pen, x1 : Int32, y1 : Int32, x2 : Int32, y2 : Int32) was skipped since it collides with above method

    # Skipped DrawLines due to it being static, abstract and generic.

    DrawLines : DrawLines_MethodGroup
    class DrawLines_MethodGroup:
        @typing.overload
        def __call__(self, pen: Pen, points: Array_1[PointF]) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, points: Array_1[Point]) -> None:...

    # Skipped DrawPie due to it being static, abstract and generic.

    DrawPie : DrawPie_MethodGroup
    class DrawPie_MethodGroup:
        @typing.overload
        def __call__(self, pen: Pen, rect: RectangleF, startAngle: float, sweepAngle: float) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, rect: Rectangle, startAngle: float, sweepAngle: float) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None:...
        # Method DrawPie(pen : Pen, x : Int32, y : Int32, width : Int32, height : Int32, startAngle : Int32, sweepAngle : Int32) was skipped since it collides with above method

    # Skipped DrawPolygon due to it being static, abstract and generic.

    DrawPolygon : DrawPolygon_MethodGroup
    class DrawPolygon_MethodGroup:
        @typing.overload
        def __call__(self, pen: Pen, points: Array_1[PointF]) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, points: Array_1[Point]) -> None:...

    # Skipped DrawRectangle due to it being static, abstract and generic.

    DrawRectangle : DrawRectangle_MethodGroup
    class DrawRectangle_MethodGroup:
        @typing.overload
        def __call__(self, pen: Pen, rect: Rectangle) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, x: float, y: float, width: float, height: float) -> None:...
        # Method DrawRectangle(pen : Pen, x : Int32, y : Int32, width : Int32, height : Int32) was skipped since it collides with above method

    # Skipped DrawRectangles due to it being static, abstract and generic.

    DrawRectangles : DrawRectangles_MethodGroup
    class DrawRectangles_MethodGroup:
        @typing.overload
        def __call__(self, pen: Pen, rects: Array_1[RectangleF]) -> None:...
        @typing.overload
        def __call__(self, pen: Pen, rects: Array_1[Rectangle]) -> None:...

    # Skipped DrawString due to it being static, abstract and generic.

    DrawString : DrawString_MethodGroup
    class DrawString_MethodGroup:
        @typing.overload
        def __call__(self, s: str, font: Font, brush: Brush, layoutRectangle: RectangleF) -> None:...
        @typing.overload
        def __call__(self, s: str, font: Font, brush: Brush, point: PointF) -> None:...
        @typing.overload
        def __call__(self, s: str, font: Font, brush: Brush, x: float, y: float) -> None:...
        @typing.overload
        def __call__(self, s: str, font: Font, brush: Brush, layoutRectangle: RectangleF, format: StringFormat) -> None:...
        @typing.overload
        def __call__(self, s: str, font: Font, brush: Brush, point: PointF, format: StringFormat) -> None:...
        @typing.overload
        def __call__(self, s: str, font: Font, brush: Brush, x: float, y: float, format: StringFormat) -> None:...

    # Skipped EnumerateMetafile due to it being static, abstract and generic.

    EnumerateMetafile : EnumerateMetafile_MethodGroup
    class EnumerateMetafile_MethodGroup:
        @typing.overload
        def __call__(self, metafile: Metafile, destPoints: Array_1[PointF], callback: Graphics.EnumerateMetafileProc) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoints: Array_1[Point], callback: Graphics.EnumerateMetafileProc) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoint: PointF, callback: Graphics.EnumerateMetafileProc) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoint: Point, callback: Graphics.EnumerateMetafileProc) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destRect: RectangleF, callback: Graphics.EnumerateMetafileProc) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destRect: Rectangle, callback: Graphics.EnumerateMetafileProc) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoints: Array_1[PointF], callback: Graphics.EnumerateMetafileProc, callbackData: int) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoints: Array_1[Point], callback: Graphics.EnumerateMetafileProc, callbackData: int) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoint: PointF, callback: Graphics.EnumerateMetafileProc, callbackData: int) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoint: Point, callback: Graphics.EnumerateMetafileProc, callbackData: int) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destRect: RectangleF, callback: Graphics.EnumerateMetafileProc, callbackData: int) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destRect: Rectangle, callback: Graphics.EnumerateMetafileProc, callbackData: int) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoints: Array_1[PointF], callback: Graphics.EnumerateMetafileProc, callbackData: int, imageAttr: ImageAttributes) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoints: Array_1[Point], callback: Graphics.EnumerateMetafileProc, callbackData: int, imageAttr: ImageAttributes) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoints: Array_1[PointF], srcRect: RectangleF, srcUnit: GraphicsUnit, callback: Graphics.EnumerateMetafileProc) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoints: Array_1[Point], srcRect: Rectangle, srcUnit: GraphicsUnit, callback: Graphics.EnumerateMetafileProc) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoint: PointF, callback: Graphics.EnumerateMetafileProc, callbackData: int, imageAttr: ImageAttributes) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoint: Point, callback: Graphics.EnumerateMetafileProc, callbackData: int, imageAttr: ImageAttributes) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destRect: RectangleF, callback: Graphics.EnumerateMetafileProc, callbackData: int, imageAttr: ImageAttributes) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destRect: Rectangle, callback: Graphics.EnumerateMetafileProc, callbackData: int, imageAttr: ImageAttributes) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoint: PointF, srcRect: RectangleF, srcUnit: GraphicsUnit, callback: Graphics.EnumerateMetafileProc) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoint: Point, srcRect: Rectangle, srcUnit: GraphicsUnit, callback: Graphics.EnumerateMetafileProc) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destRect: RectangleF, srcRect: RectangleF, srcUnit: GraphicsUnit, callback: Graphics.EnumerateMetafileProc) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destRect: Rectangle, srcRect: Rectangle, srcUnit: GraphicsUnit, callback: Graphics.EnumerateMetafileProc) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoints: Array_1[PointF], srcRect: RectangleF, srcUnit: GraphicsUnit, callback: Graphics.EnumerateMetafileProc, callbackData: int) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoints: Array_1[Point], srcRect: Rectangle, srcUnit: GraphicsUnit, callback: Graphics.EnumerateMetafileProc, callbackData: int) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoint: PointF, srcRect: RectangleF, srcUnit: GraphicsUnit, callback: Graphics.EnumerateMetafileProc, callbackData: int) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoint: Point, srcRect: Rectangle, srcUnit: GraphicsUnit, callback: Graphics.EnumerateMetafileProc, callbackData: int) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destRect: RectangleF, srcRect: RectangleF, srcUnit: GraphicsUnit, callback: Graphics.EnumerateMetafileProc, callbackData: int) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destRect: Rectangle, srcRect: Rectangle, srcUnit: GraphicsUnit, callback: Graphics.EnumerateMetafileProc, callbackData: int) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoints: Array_1[PointF], srcRect: RectangleF, unit: GraphicsUnit, callback: Graphics.EnumerateMetafileProc, callbackData: int, imageAttr: ImageAttributes) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoints: Array_1[Point], srcRect: Rectangle, unit: GraphicsUnit, callback: Graphics.EnumerateMetafileProc, callbackData: int, imageAttr: ImageAttributes) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoint: PointF, srcRect: RectangleF, unit: GraphicsUnit, callback: Graphics.EnumerateMetafileProc, callbackData: int, imageAttr: ImageAttributes) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destPoint: Point, srcRect: Rectangle, unit: GraphicsUnit, callback: Graphics.EnumerateMetafileProc, callbackData: int, imageAttr: ImageAttributes) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destRect: RectangleF, srcRect: RectangleF, unit: GraphicsUnit, callback: Graphics.EnumerateMetafileProc, callbackData: int, imageAttr: ImageAttributes) -> None:...
        @typing.overload
        def __call__(self, metafile: Metafile, destRect: Rectangle, srcRect: Rectangle, unit: GraphicsUnit, callback: Graphics.EnumerateMetafileProc, callbackData: int, imageAttr: ImageAttributes) -> None:...

    # Skipped ExcludeClip due to it being static, abstract and generic.

    ExcludeClip : ExcludeClip_MethodGroup
    class ExcludeClip_MethodGroup:
        @typing.overload
        def __call__(self, rect: Rectangle) -> None:...
        @typing.overload
        def __call__(self, region: Region) -> None:...

    # Skipped FillClosedCurve due to it being static, abstract and generic.

    FillClosedCurve : FillClosedCurve_MethodGroup
    class FillClosedCurve_MethodGroup:
        @typing.overload
        def __call__(self, brush: Brush, points: Array_1[PointF]) -> None:...
        @typing.overload
        def __call__(self, brush: Brush, points: Array_1[Point]) -> None:...
        @typing.overload
        def __call__(self, brush: Brush, points: Array_1[PointF], fillmode: FillMode) -> None:...
        @typing.overload
        def __call__(self, brush: Brush, points: Array_1[Point], fillmode: FillMode) -> None:...
        @typing.overload
        def __call__(self, brush: Brush, points: Array_1[PointF], fillmode: FillMode, tension: float) -> None:...
        @typing.overload
        def __call__(self, brush: Brush, points: Array_1[Point], fillmode: FillMode, tension: float) -> None:...

    # Skipped FillEllipse due to it being static, abstract and generic.

    FillEllipse : FillEllipse_MethodGroup
    class FillEllipse_MethodGroup:
        @typing.overload
        def __call__(self, brush: Brush, rect: RectangleF) -> None:...
        @typing.overload
        def __call__(self, brush: Brush, rect: Rectangle) -> None:...
        @typing.overload
        def __call__(self, brush: Brush, x: float, y: float, width: float, height: float) -> None:...
        # Method FillEllipse(brush : Brush, x : Int32, y : Int32, width : Int32, height : Int32) was skipped since it collides with above method

    # Skipped FillPie due to it being static, abstract and generic.

    FillPie : FillPie_MethodGroup
    class FillPie_MethodGroup:
        @typing.overload
        def __call__(self, brush: Brush, rect: Rectangle, startAngle: float, sweepAngle: float) -> None:...
        @typing.overload
        def __call__(self, brush: Brush, x: float, y: float, width: float, height: float, startAngle: float, sweepAngle: float) -> None:...
        # Method FillPie(brush : Brush, x : Int32, y : Int32, width : Int32, height : Int32, startAngle : Int32, sweepAngle : Int32) was skipped since it collides with above method

    # Skipped FillPolygon due to it being static, abstract and generic.

    FillPolygon : FillPolygon_MethodGroup
    class FillPolygon_MethodGroup:
        @typing.overload
        def __call__(self, brush: Brush, points: Array_1[PointF]) -> None:...
        @typing.overload
        def __call__(self, brush: Brush, points: Array_1[Point]) -> None:...
        @typing.overload
        def __call__(self, brush: Brush, points: Array_1[PointF], fillMode: FillMode) -> None:...
        @typing.overload
        def __call__(self, brush: Brush, points: Array_1[Point], fillMode: FillMode) -> None:...

    # Skipped FillRectangle due to it being static, abstract and generic.

    FillRectangle : FillRectangle_MethodGroup
    class FillRectangle_MethodGroup:
        @typing.overload
        def __call__(self, brush: Brush, rect: RectangleF) -> None:...
        @typing.overload
        def __call__(self, brush: Brush, rect: Rectangle) -> None:...
        @typing.overload
        def __call__(self, brush: Brush, x: float, y: float, width: float, height: float) -> None:...
        # Method FillRectangle(brush : Brush, x : Int32, y : Int32, width : Int32, height : Int32) was skipped since it collides with above method

    # Skipped FillRectangles due to it being static, abstract and generic.

    FillRectangles : FillRectangles_MethodGroup
    class FillRectangles_MethodGroup:
        @typing.overload
        def __call__(self, brush: Brush, rects: Array_1[RectangleF]) -> None:...
        @typing.overload
        def __call__(self, brush: Brush, rects: Array_1[Rectangle]) -> None:...

    # Skipped Flush due to it being static, abstract and generic.

    Flush : Flush_MethodGroup
    class Flush_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, intention: FlushIntention) -> None:...

    # Skipped FromHdc due to it being static, abstract and generic.

    FromHdc : FromHdc_MethodGroup
    class FromHdc_MethodGroup:
        @typing.overload
        def __call__(self, hdc: int) -> Graphics:...
        @typing.overload
        def __call__(self, hdc: int, hdevice: int) -> Graphics:...

    # Skipped IntersectClip due to it being static, abstract and generic.

    IntersectClip : IntersectClip_MethodGroup
    class IntersectClip_MethodGroup:
        @typing.overload
        def __call__(self, rect: Rectangle) -> None:...
        @typing.overload
        def __call__(self, rect: RectangleF) -> None:...
        @typing.overload
        def __call__(self, region: Region) -> None:...

    # Skipped IsVisible due to it being static, abstract and generic.

    IsVisible : IsVisible_MethodGroup
    class IsVisible_MethodGroup:
        @typing.overload
        def __call__(self, point: Point) -> bool:...
        @typing.overload
        def __call__(self, point: PointF) -> bool:...
        @typing.overload
        def __call__(self, rect: Rectangle) -> bool:...
        @typing.overload
        def __call__(self, rect: RectangleF) -> bool:...
        @typing.overload
        def __call__(self, x: float, y: float) -> bool:...
        # Method IsVisible(x : Int32, y : Int32) was skipped since it collides with above method
        @typing.overload
        def __call__(self, x: float, y: float, width: float, height: float) -> bool:...
        # Method IsVisible(x : Int32, y : Int32, width : Int32, height : Int32) was skipped since it collides with above method

    # Skipped MeasureString due to it being static, abstract and generic.

    MeasureString : MeasureString_MethodGroup
    class MeasureString_MethodGroup:
        @typing.overload
        def __call__(self, text: str, font: Font) -> SizeF:...
        @typing.overload
        def __call__(self, text: str, font: Font, width: int) -> SizeF:...
        @typing.overload
        def __call__(self, text: str, font: Font, layoutArea: SizeF) -> SizeF:...
        @typing.overload
        def __call__(self, text: str, font: Font, width: int, format: StringFormat) -> SizeF:...
        @typing.overload
        def __call__(self, text: str, font: Font, layoutArea: SizeF, stringFormat: StringFormat) -> SizeF:...
        @typing.overload
        def __call__(self, text: str, font: Font, origin: PointF, stringFormat: StringFormat) -> SizeF:...
        @typing.overload
        def __call__(self, text: str, font: Font, layoutArea: SizeF, stringFormat: StringFormat, charactersFitted: clr.Reference[int], linesFilled: clr.Reference[int]) -> SizeF:...

    # Skipped MultiplyTransform due to it being static, abstract and generic.

    MultiplyTransform : MultiplyTransform_MethodGroup
    class MultiplyTransform_MethodGroup:
        @typing.overload
        def __call__(self, matrix: Matrix) -> None:...
        @typing.overload
        def __call__(self, matrix: Matrix, order: MatrixOrder) -> None:...

    # Skipped ReleaseHdc due to it being static, abstract and generic.

    ReleaseHdc : ReleaseHdc_MethodGroup
    class ReleaseHdc_MethodGroup:
        @typing.overload
        def __call__(self) -> None:...
        @typing.overload
        def __call__(self, hdc: int) -> None:...

    # Skipped RotateTransform due to it being static, abstract and generic.

    RotateTransform : RotateTransform_MethodGroup
    class RotateTransform_MethodGroup:
        @typing.overload
        def __call__(self, angle: float) -> None:...
        @typing.overload
        def __call__(self, angle: float, order: MatrixOrder) -> None:...

    # Skipped ScaleTransform due to it being static, abstract and generic.

    ScaleTransform : ScaleTransform_MethodGroup
    class ScaleTransform_MethodGroup:
        @typing.overload
        def __call__(self, sx: float, sy: float) -> None:...
        @typing.overload
        def __call__(self, sx: float, sy: float, order: MatrixOrder) -> None:...

    # Skipped SetClip due to it being static, abstract and generic.

    SetClip : SetClip_MethodGroup
    class SetClip_MethodGroup:
        @typing.overload
        def __call__(self, g: Graphics) -> None:...
        @typing.overload
        def __call__(self, path: GraphicsPath) -> None:...
        @typing.overload
        def __call__(self, rect: Rectangle) -> None:...
        @typing.overload
        def __call__(self, rect: RectangleF) -> None:...
        @typing.overload
        def __call__(self, g: Graphics, combineMode: CombineMode) -> None:...
        @typing.overload
        def __call__(self, path: GraphicsPath, combineMode: CombineMode) -> None:...
        @typing.overload
        def __call__(self, rect: Rectangle, combineMode: CombineMode) -> None:...
        @typing.overload
        def __call__(self, rect: RectangleF, combineMode: CombineMode) -> None:...
        @typing.overload
        def __call__(self, region: Region, combineMode: CombineMode) -> None:...

    # Skipped TransformPoints due to it being static, abstract and generic.

    TransformPoints : TransformPoints_MethodGroup
    class TransformPoints_MethodGroup:
        @typing.overload
        def __call__(self, destSpace: CoordinateSpace, srcSpace: CoordinateSpace, pts: Array_1[PointF]) -> None:...
        @typing.overload
        def __call__(self, destSpace: CoordinateSpace, srcSpace: CoordinateSpace, pts: Array_1[Point]) -> None:...

    # Skipped TranslateClip due to it being static, abstract and generic.

    TranslateClip : TranslateClip_MethodGroup
    class TranslateClip_MethodGroup:
        def __call__(self, dx: float, dy: float) -> None:...
        # Method TranslateClip(dx : Int32, dy : Int32) was skipped since it collides with above method

    # Skipped TranslateTransform due to it being static, abstract and generic.

    TranslateTransform : TranslateTransform_MethodGroup
    class TranslateTransform_MethodGroup:
        @typing.overload
        def __call__(self, dx: float, dy: float) -> None:...
        @typing.overload
        def __call__(self, dx: float, dy: float, order: MatrixOrder) -> None:...


    class DrawImageAbort(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, callbackdata: int, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> bool: ...
        def Invoke(self, callbackdata: int) -> bool: ...


    class EnumerateMetafileProc(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, recordType: EmfPlusRecordType, flags: int, dataSize: int, data: int, callbackData: PlayRecordCallback, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> bool: ...
        def Invoke(self, recordType: EmfPlusRecordType, flags: int, dataSize: int, data: int, callbackData: PlayRecordCallback) -> bool: ...



class GraphicsUnit(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    World : GraphicsUnit # 0
    Display : GraphicsUnit # 1
    Pixel : GraphicsUnit # 2
    Point : GraphicsUnit # 3
    Inch : GraphicsUnit # 4
    Document : GraphicsUnit # 5
    Millimeter : GraphicsUnit # 6


class Icon(MarshalByRefObject, ISerializable, IDisposable, ICloneable):
    @typing.overload
    def __init__(self, fileName: str) -> None: ...
    @typing.overload
    def __init__(self, fileName: str, size: Size) -> None: ...
    @typing.overload
    def __init__(self, fileName: str, width: int, height: int) -> None: ...
    @typing.overload
    def __init__(self, original: Icon, size: Size) -> None: ...
    @typing.overload
    def __init__(self, original: Icon, width: int, height: int) -> None: ...
    @typing.overload
    def __init__(self, stream: Stream) -> None: ...
    @typing.overload
    def __init__(self, stream: Stream, size: Size) -> None: ...
    @typing.overload
    def __init__(self, stream: Stream, width: int, height: int) -> None: ...
    @typing.overload
    def __init__(self, type: typing.Type[typing.Any], resource: str) -> None: ...
    @property
    def Handle(self) -> int: ...
    @property
    def Height(self) -> int: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Width(self) -> int: ...
    def Clone(self) -> typing.Any: ...
    def Dispose(self) -> None: ...
    @staticmethod
    def ExtractAssociatedIcon(filePath: str) -> Icon: ...
    @staticmethod
    def FromHandle(handle: int) -> Icon: ...
    def Save(self, outputStream: Stream) -> None: ...
    def ToBitmap(self) -> Bitmap: ...
    def ToString(self) -> str: ...


class IDeviceContext(IDisposable, typing.Protocol):
    @abc.abstractmethod
    def GetHdc(self) -> int: ...
    @abc.abstractmethod
    def ReleaseHdc(self) -> None: ...


class Image(MarshalByRefObject, ISerializable, ICloneable, IDisposable):
    @property
    def Flags(self) -> int: ...
    @property
    def FrameDimensionsList(self) -> Array_1[Guid]: ...
    @property
    def Height(self) -> int: ...
    @property
    def HorizontalResolution(self) -> float: ...
    @property
    def Palette(self) -> ColorPalette: ...
    @Palette.setter
    def Palette(self, value: ColorPalette) -> ColorPalette: ...
    @property
    def PhysicalDimension(self) -> SizeF: ...
    @property
    def PixelFormat(self) -> PixelFormat: ...
    @property
    def PropertyIdList(self) -> Array_1[int]: ...
    @property
    def PropertyItems(self) -> Array_1[PropertyItem]: ...
    @property
    def RawFormat(self) -> ImageFormat: ...
    @property
    def Size(self) -> Size: ...
    @property
    def Tag(self) -> typing.Any: ...
    @Tag.setter
    def Tag(self, value: typing.Any) -> typing.Any: ...
    @property
    def VerticalResolution(self) -> float: ...
    @property
    def Width(self) -> int: ...
    def Clone(self) -> typing.Any: ...
    def Dispose(self) -> None: ...
    def GetBounds(self, pageUnit: clr.Reference[GraphicsUnit]) -> RectangleF: ...
    def GetEncoderParameterList(self, encoder: Guid) -> EncoderParameters: ...
    def GetFrameCount(self, dimension: FrameDimension) -> int: ...
    @staticmethod
    def GetPixelFormatSize(pixfmt: PixelFormat) -> int: ...
    def GetPropertyItem(self, propid: int) -> PropertyItem: ...
    def GetThumbnailImage(self, thumbWidth: int, thumbHeight: int, callback: Image.GetThumbnailImageAbort, callbackData: int) -> Image: ...
    @staticmethod
    def IsAlphaPixelFormat(pixfmt: PixelFormat) -> bool: ...
    @staticmethod
    def IsCanonicalPixelFormat(pixfmt: PixelFormat) -> bool: ...
    @staticmethod
    def IsExtendedPixelFormat(pixfmt: PixelFormat) -> bool: ...
    def RemovePropertyItem(self, propid: int) -> None: ...
    def RotateFlip(self, rotateFlipType: RotateFlipType) -> None: ...
    def SelectActiveFrame(self, dimension: FrameDimension, frameIndex: int) -> int: ...
    def SetPropertyItem(self, propitem: PropertyItem) -> None: ...
    # Skipped FromFile due to it being static, abstract and generic.

    FromFile : FromFile_MethodGroup
    class FromFile_MethodGroup:
        @typing.overload
        def __call__(self, filename: str) -> Image:...
        @typing.overload
        def __call__(self, filename: str, useEmbeddedColorManagement: bool) -> Image:...

    # Skipped FromHbitmap due to it being static, abstract and generic.

    FromHbitmap : FromHbitmap_MethodGroup
    class FromHbitmap_MethodGroup:
        @typing.overload
        def __call__(self, hbitmap: int) -> Bitmap:...
        @typing.overload
        def __call__(self, hbitmap: int, hpalette: int) -> Bitmap:...

    # Skipped FromStream due to it being static, abstract and generic.

    FromStream : FromStream_MethodGroup
    class FromStream_MethodGroup:
        @typing.overload
        def __call__(self, stream: Stream) -> Image:...
        @typing.overload
        def __call__(self, stream: Stream, useEmbeddedColorManagement: bool) -> Image:...
        @typing.overload
        def __call__(self, stream: Stream, useEmbeddedColorManagement: bool, validateImageData: bool) -> Image:...

    # Skipped Save due to it being static, abstract and generic.

    Save : Save_MethodGroup
    class Save_MethodGroup:
        @typing.overload
        def __call__(self, filename: str) -> None:...
        @typing.overload
        def __call__(self, filename: str, format: ImageFormat) -> None:...
        @typing.overload
        def __call__(self, stream: Stream, format: ImageFormat) -> None:...
        @typing.overload
        def __call__(self, filename: str, encoder: ImageCodecInfo, encoderParams: EncoderParameters) -> None:...
        @typing.overload
        def __call__(self, stream: Stream, encoder: ImageCodecInfo, encoderParams: EncoderParameters) -> None:...

    # Skipped SaveAdd due to it being static, abstract and generic.

    SaveAdd : SaveAdd_MethodGroup
    class SaveAdd_MethodGroup:
        @typing.overload
        def __call__(self, encoderParams: EncoderParameters) -> None:...
        @typing.overload
        def __call__(self, image: Image, encoderParams: EncoderParameters) -> None:...


    class GetThumbnailImageAbort(MulticastDelegate):
        def __init__(self, object: typing.Any, method: int) -> None: ...
        @property
        def Method(self) -> MethodInfo: ...
        @property
        def Target(self) -> typing.Any: ...
        def BeginInvoke(self, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
        def EndInvoke(self, result: IAsyncResult) -> bool: ...
        def Invoke(self) -> bool: ...



class KnownColor(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ActiveBorder : KnownColor # 1
    ActiveCaption : KnownColor # 2
    ActiveCaptionText : KnownColor # 3
    AppWorkspace : KnownColor # 4
    Control : KnownColor # 5
    ControlDark : KnownColor # 6
    ControlDarkDark : KnownColor # 7
    ControlLight : KnownColor # 8
    ControlLightLight : KnownColor # 9
    ControlText : KnownColor # 10
    Desktop : KnownColor # 11
    GrayText : KnownColor # 12
    Highlight : KnownColor # 13
    HighlightText : KnownColor # 14
    HotTrack : KnownColor # 15
    InactiveBorder : KnownColor # 16
    InactiveCaption : KnownColor # 17
    InactiveCaptionText : KnownColor # 18
    Info : KnownColor # 19
    InfoText : KnownColor # 20
    Menu : KnownColor # 21
    MenuText : KnownColor # 22
    ScrollBar : KnownColor # 23
    Window : KnownColor # 24
    WindowFrame : KnownColor # 25
    WindowText : KnownColor # 26
    Transparent : KnownColor # 27
    AliceBlue : KnownColor # 28
    AntiqueWhite : KnownColor # 29
    Aqua : KnownColor # 30
    Aquamarine : KnownColor # 31
    Azure : KnownColor # 32
    Beige : KnownColor # 33
    Bisque : KnownColor # 34
    Black : KnownColor # 35
    BlanchedAlmond : KnownColor # 36
    Blue : KnownColor # 37
    BlueViolet : KnownColor # 38
    Brown : KnownColor # 39
    BurlyWood : KnownColor # 40
    CadetBlue : KnownColor # 41
    Chartreuse : KnownColor # 42
    Chocolate : KnownColor # 43
    Coral : KnownColor # 44
    CornflowerBlue : KnownColor # 45
    Cornsilk : KnownColor # 46
    Crimson : KnownColor # 47
    Cyan : KnownColor # 48
    DarkBlue : KnownColor # 49
    DarkCyan : KnownColor # 50
    DarkGoldenrod : KnownColor # 51
    DarkGray : KnownColor # 52
    DarkGreen : KnownColor # 53
    DarkKhaki : KnownColor # 54
    DarkMagenta : KnownColor # 55
    DarkOliveGreen : KnownColor # 56
    DarkOrange : KnownColor # 57
    DarkOrchid : KnownColor # 58
    DarkRed : KnownColor # 59
    DarkSalmon : KnownColor # 60
    DarkSeaGreen : KnownColor # 61
    DarkSlateBlue : KnownColor # 62
    DarkSlateGray : KnownColor # 63
    DarkTurquoise : KnownColor # 64
    DarkViolet : KnownColor # 65
    DeepPink : KnownColor # 66
    DeepSkyBlue : KnownColor # 67
    DimGray : KnownColor # 68
    DodgerBlue : KnownColor # 69
    Firebrick : KnownColor # 70
    FloralWhite : KnownColor # 71
    ForestGreen : KnownColor # 72
    Fuchsia : KnownColor # 73
    Gainsboro : KnownColor # 74
    GhostWhite : KnownColor # 75
    Gold : KnownColor # 76
    Goldenrod : KnownColor # 77
    Gray : KnownColor # 78
    Green : KnownColor # 79
    GreenYellow : KnownColor # 80
    Honeydew : KnownColor # 81
    HotPink : KnownColor # 82
    IndianRed : KnownColor # 83
    Indigo : KnownColor # 84
    Ivory : KnownColor # 85
    Khaki : KnownColor # 86
    Lavender : KnownColor # 87
    LavenderBlush : KnownColor # 88
    LawnGreen : KnownColor # 89
    LemonChiffon : KnownColor # 90
    LightBlue : KnownColor # 91
    LightCoral : KnownColor # 92
    LightCyan : KnownColor # 93
    LightGoldenrodYellow : KnownColor # 94
    LightGray : KnownColor # 95
    LightGreen : KnownColor # 96
    LightPink : KnownColor # 97
    LightSalmon : KnownColor # 98
    LightSeaGreen : KnownColor # 99
    LightSkyBlue : KnownColor # 100
    LightSlateGray : KnownColor # 101
    LightSteelBlue : KnownColor # 102
    LightYellow : KnownColor # 103
    Lime : KnownColor # 104
    LimeGreen : KnownColor # 105
    Linen : KnownColor # 106
    Magenta : KnownColor # 107
    Maroon : KnownColor # 108
    MediumAquamarine : KnownColor # 109
    MediumBlue : KnownColor # 110
    MediumOrchid : KnownColor # 111
    MediumPurple : KnownColor # 112
    MediumSeaGreen : KnownColor # 113
    MediumSlateBlue : KnownColor # 114
    MediumSpringGreen : KnownColor # 115
    MediumTurquoise : KnownColor # 116
    MediumVioletRed : KnownColor # 117
    MidnightBlue : KnownColor # 118
    MintCream : KnownColor # 119
    MistyRose : KnownColor # 120
    Moccasin : KnownColor # 121
    NavajoWhite : KnownColor # 122
    Navy : KnownColor # 123
    OldLace : KnownColor # 124
    Olive : KnownColor # 125
    OliveDrab : KnownColor # 126
    Orange : KnownColor # 127
    OrangeRed : KnownColor # 128
    Orchid : KnownColor # 129
    PaleGoldenrod : KnownColor # 130
    PaleGreen : KnownColor # 131
    PaleTurquoise : KnownColor # 132
    PaleVioletRed : KnownColor # 133
    PapayaWhip : KnownColor # 134
    PeachPuff : KnownColor # 135
    Peru : KnownColor # 136
    Pink : KnownColor # 137
    Plum : KnownColor # 138
    PowderBlue : KnownColor # 139
    Purple : KnownColor # 140
    Red : KnownColor # 141
    RosyBrown : KnownColor # 142
    RoyalBlue : KnownColor # 143
    SaddleBrown : KnownColor # 144
    Salmon : KnownColor # 145
    SandyBrown : KnownColor # 146
    SeaGreen : KnownColor # 147
    SeaShell : KnownColor # 148
    Sienna : KnownColor # 149
    Silver : KnownColor # 150
    SkyBlue : KnownColor # 151
    SlateBlue : KnownColor # 152
    SlateGray : KnownColor # 153
    Snow : KnownColor # 154
    SpringGreen : KnownColor # 155
    SteelBlue : KnownColor # 156
    Tan : KnownColor # 157
    Teal : KnownColor # 158
    Thistle : KnownColor # 159
    Tomato : KnownColor # 160
    Turquoise : KnownColor # 161
    Violet : KnownColor # 162
    Wheat : KnownColor # 163
    White : KnownColor # 164
    WhiteSmoke : KnownColor # 165
    Yellow : KnownColor # 166
    YellowGreen : KnownColor # 167
    ButtonFace : KnownColor # 168
    ButtonHighlight : KnownColor # 169
    ButtonShadow : KnownColor # 170
    GradientActiveCaption : KnownColor # 171
    GradientInactiveCaption : KnownColor # 172
    MenuBar : KnownColor # 173
    MenuHighlight : KnownColor # 174
    RebeccaPurple : KnownColor # 175


class Pen(MarshalByRefObject, IDisposable, ICloneable):
    @typing.overload
    def __init__(self, brush: Brush) -> None: ...
    @typing.overload
    def __init__(self, brush: Brush, width: float) -> None: ...
    @typing.overload
    def __init__(self, color: Color) -> None: ...
    @typing.overload
    def __init__(self, color: Color, width: float) -> None: ...
    @property
    def Alignment(self) -> PenAlignment: ...
    @Alignment.setter
    def Alignment(self, value: PenAlignment) -> PenAlignment: ...
    @property
    def Brush(self) -> Brush: ...
    @Brush.setter
    def Brush(self, value: Brush) -> Brush: ...
    @property
    def Color(self) -> Color: ...
    @Color.setter
    def Color(self, value: Color) -> Color: ...
    @property
    def CompoundArray(self) -> Array_1[float]: ...
    @CompoundArray.setter
    def CompoundArray(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def CustomEndCap(self) -> CustomLineCap: ...
    @CustomEndCap.setter
    def CustomEndCap(self, value: CustomLineCap) -> CustomLineCap: ...
    @property
    def CustomStartCap(self) -> CustomLineCap: ...
    @CustomStartCap.setter
    def CustomStartCap(self, value: CustomLineCap) -> CustomLineCap: ...
    @property
    def DashCap(self) -> DashCap: ...
    @DashCap.setter
    def DashCap(self, value: DashCap) -> DashCap: ...
    @property
    def DashOffset(self) -> float: ...
    @DashOffset.setter
    def DashOffset(self, value: float) -> float: ...
    @property
    def DashPattern(self) -> Array_1[float]: ...
    @DashPattern.setter
    def DashPattern(self, value: Array_1[float]) -> Array_1[float]: ...
    @property
    def DashStyle(self) -> DashStyle: ...
    @DashStyle.setter
    def DashStyle(self, value: DashStyle) -> DashStyle: ...
    @property
    def EndCap(self) -> LineCap: ...
    @EndCap.setter
    def EndCap(self, value: LineCap) -> LineCap: ...
    @property
    def LineJoin(self) -> LineJoin: ...
    @LineJoin.setter
    def LineJoin(self, value: LineJoin) -> LineJoin: ...
    @property
    def MiterLimit(self) -> float: ...
    @MiterLimit.setter
    def MiterLimit(self, value: float) -> float: ...
    @property
    def PenType(self) -> PenType: ...
    @property
    def StartCap(self) -> LineCap: ...
    @StartCap.setter
    def StartCap(self, value: LineCap) -> LineCap: ...
    @property
    def Transform(self) -> Matrix: ...
    @Transform.setter
    def Transform(self, value: Matrix) -> Matrix: ...
    @property
    def Width(self) -> float: ...
    @Width.setter
    def Width(self, value: float) -> float: ...
    def Clone(self) -> typing.Any: ...
    def Dispose(self) -> None: ...
    def ResetTransform(self) -> None: ...
    def SetLineCap(self, startCap: LineCap, endCap: LineCap, dashCap: DashCap) -> None: ...
    # Skipped MultiplyTransform due to it being static, abstract and generic.

    MultiplyTransform : MultiplyTransform_MethodGroup
    class MultiplyTransform_MethodGroup:
        @typing.overload
        def __call__(self, matrix: Matrix) -> None:...
        @typing.overload
        def __call__(self, matrix: Matrix, order: MatrixOrder) -> None:...

    # Skipped RotateTransform due to it being static, abstract and generic.

    RotateTransform : RotateTransform_MethodGroup
    class RotateTransform_MethodGroup:
        @typing.overload
        def __call__(self, angle: float) -> None:...
        @typing.overload
        def __call__(self, angle: float, order: MatrixOrder) -> None:...

    # Skipped ScaleTransform due to it being static, abstract and generic.

    ScaleTransform : ScaleTransform_MethodGroup
    class ScaleTransform_MethodGroup:
        @typing.overload
        def __call__(self, sx: float, sy: float) -> None:...
        @typing.overload
        def __call__(self, sx: float, sy: float, order: MatrixOrder) -> None:...

    # Skipped TranslateTransform due to it being static, abstract and generic.

    TranslateTransform : TranslateTransform_MethodGroup
    class TranslateTransform_MethodGroup:
        @typing.overload
        def __call__(self, dx: float, dy: float) -> None:...
        @typing.overload
        def __call__(self, dx: float, dy: float, order: MatrixOrder) -> None:...



class Point(IEquatable_1[Point]):
    @typing.overload
    def __init__(self, dw: int) -> None: ...
    @typing.overload
    def __init__(self, sz: Size) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int) -> None: ...
    Empty : Point
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def X(self) -> int: ...
    @X.setter
    def X(self, value: int) -> int: ...
    @property
    def Y(self) -> int: ...
    @Y.setter
    def Y(self, value: int) -> int: ...
    @staticmethod
    def Add(pt: Point, sz: Size) -> Point: ...
    @staticmethod
    def Ceiling(value: PointF) -> Point: ...
    def GetHashCode(self) -> int: ...
    def __add__(self, pt: Point, sz: Size) -> Point: ...
    def __eq__(self, left: Point, right: Point) -> bool: ...
    # Operator not supported op_Explicit(p: Point)
    # Operator not supported op_Implicit(p: Point)
    def __ne__(self, left: Point, right: Point) -> bool: ...
    def __sub__(self, pt: Point, sz: Size) -> Point: ...
    @staticmethod
    def Round(value: PointF) -> Point: ...
    @staticmethod
    def Subtract(pt: Point, sz: Size) -> Point: ...
    def ToString(self) -> str: ...
    @staticmethod
    def Truncate(value: PointF) -> Point: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: Point) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...

    # Skipped Offset due to it being static, abstract and generic.

    Offset : Offset_MethodGroup
    class Offset_MethodGroup:
        @typing.overload
        def __call__(self, p: Point) -> None:...
        @typing.overload
        def __call__(self, dx: int, dy: int) -> None:...



class PointF(IEquatable_1[PointF]):
    @typing.overload
    def __init__(self, vector: Vector2) -> None: ...
    @typing.overload
    def __init__(self, x: float, y: float) -> None: ...
    Empty : PointF
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def X(self) -> float: ...
    @X.setter
    def X(self, value: float) -> float: ...
    @property
    def Y(self) -> float: ...
    @Y.setter
    def Y(self, value: float) -> float: ...
    def GetHashCode(self) -> int: ...
    @typing.overload
    def __add__(self, pt: PointF, sz: Size) -> PointF: ...
    @typing.overload
    def __add__(self, pt: PointF, sz: SizeF) -> PointF: ...
    def __eq__(self, left: PointF, right: PointF) -> bool: ...
    # Operator not supported op_Explicit(point: PointF)
    # Operator not supported op_Explicit(vector: Vector2)
    def __ne__(self, left: PointF, right: PointF) -> bool: ...
    @typing.overload
    def __sub__(self, pt: PointF, sz: Size) -> PointF: ...
    @typing.overload
    def __sub__(self, pt: PointF, sz: SizeF) -> PointF: ...
    def ToString(self) -> str: ...
    def ToVector2(self) -> Vector2: ...
    # Skipped Add due to it being static, abstract and generic.

    Add : Add_MethodGroup
    class Add_MethodGroup:
        @typing.overload
        def __call__(self, pt: PointF, sz: Size) -> PointF:...
        @typing.overload
        def __call__(self, pt: PointF, sz: SizeF) -> PointF:...

    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: PointF) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...

    # Skipped Subtract due to it being static, abstract and generic.

    Subtract : Subtract_MethodGroup
    class Subtract_MethodGroup:
        @typing.overload
        def __call__(self, pt: PointF, sz: Size) -> PointF:...
        @typing.overload
        def __call__(self, pt: PointF, sz: SizeF) -> PointF:...



class Rectangle(IEquatable_1[Rectangle]):
    @typing.overload
    def __init__(self, location: Point, size: Size) -> None: ...
    @typing.overload
    def __init__(self, x: int, y: int, width: int, height: int) -> None: ...
    Empty : Rectangle
    @property
    def Bottom(self) -> int: ...
    @property
    def Height(self) -> int: ...
    @Height.setter
    def Height(self, value: int) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Left(self) -> int: ...
    @property
    def Location(self) -> Point: ...
    @Location.setter
    def Location(self, value: Point) -> Point: ...
    @property
    def Right(self) -> int: ...
    @property
    def Size(self) -> Size: ...
    @Size.setter
    def Size(self, value: Size) -> Size: ...
    @property
    def Top(self) -> int: ...
    @property
    def Width(self) -> int: ...
    @Width.setter
    def Width(self, value: int) -> int: ...
    @property
    def X(self) -> int: ...
    @X.setter
    def X(self, value: int) -> int: ...
    @property
    def Y(self) -> int: ...
    @Y.setter
    def Y(self, value: int) -> int: ...
    @staticmethod
    def Ceiling(value: RectangleF) -> Rectangle: ...
    @staticmethod
    def FromLTRB(left: int, top: int, right: int, bottom: int) -> Rectangle: ...
    def GetHashCode(self) -> int: ...
    def IntersectsWith(self, rect: Rectangle) -> bool: ...
    def __eq__(self, left: Rectangle, right: Rectangle) -> bool: ...
    def __ne__(self, left: Rectangle, right: Rectangle) -> bool: ...
    @staticmethod
    def Round(value: RectangleF) -> Rectangle: ...
    def ToString(self) -> str: ...
    @staticmethod
    def Truncate(value: RectangleF) -> Rectangle: ...
    @staticmethod
    def Union(a: Rectangle, b: Rectangle) -> Rectangle: ...
    # Skipped Contains due to it being static, abstract and generic.

    Contains : Contains_MethodGroup
    class Contains_MethodGroup:
        @typing.overload
        def __call__(self, pt: Point) -> bool:...
        @typing.overload
        def __call__(self, rect: Rectangle) -> bool:...
        @typing.overload
        def __call__(self, x: int, y: int) -> bool:...

    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: Rectangle) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...

    # Skipped Inflate due to it being static, abstract and generic.

    Inflate : Inflate_MethodGroup
    class Inflate_MethodGroup:
        @typing.overload
        def __call__(self, size: Size) -> None:...
        @typing.overload
        def __call__(self, width: int, height: int) -> None:...
        @typing.overload
        def __call__(self, rect: Rectangle, x: int, y: int) -> Rectangle:...

    # Skipped Intersect due to it being static, abstract and generic.

    Intersect : Intersect_MethodGroup
    class Intersect_MethodGroup:
        @typing.overload
        def __call__(self, rect: Rectangle) -> None:...
        @typing.overload
        def __call__(self, a: Rectangle, b: Rectangle) -> Rectangle:...

    # Skipped Offset due to it being static, abstract and generic.

    Offset : Offset_MethodGroup
    class Offset_MethodGroup:
        @typing.overload
        def __call__(self, pos: Point) -> None:...
        @typing.overload
        def __call__(self, x: int, y: int) -> None:...



class RectangleF(IEquatable_1[RectangleF]):
    @typing.overload
    def __init__(self, location: PointF, size: SizeF) -> None: ...
    @typing.overload
    def __init__(self, vector: Vector4) -> None: ...
    @typing.overload
    def __init__(self, x: float, y: float, width: float, height: float) -> None: ...
    Empty : RectangleF
    @property
    def Bottom(self) -> float: ...
    @property
    def Height(self) -> float: ...
    @Height.setter
    def Height(self, value: float) -> float: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Left(self) -> float: ...
    @property
    def Location(self) -> PointF: ...
    @Location.setter
    def Location(self, value: PointF) -> PointF: ...
    @property
    def Right(self) -> float: ...
    @property
    def Size(self) -> SizeF: ...
    @Size.setter
    def Size(self, value: SizeF) -> SizeF: ...
    @property
    def Top(self) -> float: ...
    @property
    def Width(self) -> float: ...
    @Width.setter
    def Width(self, value: float) -> float: ...
    @property
    def X(self) -> float: ...
    @X.setter
    def X(self, value: float) -> float: ...
    @property
    def Y(self) -> float: ...
    @Y.setter
    def Y(self, value: float) -> float: ...
    @staticmethod
    def FromLTRB(left: float, top: float, right: float, bottom: float) -> RectangleF: ...
    def GetHashCode(self) -> int: ...
    def IntersectsWith(self, rect: RectangleF) -> bool: ...
    def __eq__(self, left: RectangleF, right: RectangleF) -> bool: ...
    # Operator not supported op_Explicit(rectangle: RectangleF)
    # Operator not supported op_Explicit(vector: Vector4)
    # Operator not supported op_Implicit(r: Rectangle)
    def __ne__(self, left: RectangleF, right: RectangleF) -> bool: ...
    def ToString(self) -> str: ...
    def ToVector4(self) -> Vector4: ...
    @staticmethod
    def Union(a: RectangleF, b: RectangleF) -> RectangleF: ...
    # Skipped Contains due to it being static, abstract and generic.

    Contains : Contains_MethodGroup
    class Contains_MethodGroup:
        @typing.overload
        def __call__(self, pt: PointF) -> bool:...
        @typing.overload
        def __call__(self, rect: RectangleF) -> bool:...
        @typing.overload
        def __call__(self, x: float, y: float) -> bool:...

    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: RectangleF) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...

    # Skipped Inflate due to it being static, abstract and generic.

    Inflate : Inflate_MethodGroup
    class Inflate_MethodGroup:
        @typing.overload
        def __call__(self, size: SizeF) -> None:...
        @typing.overload
        def __call__(self, x: float, y: float) -> None:...
        @typing.overload
        def __call__(self, rect: RectangleF, x: float, y: float) -> RectangleF:...

    # Skipped Intersect due to it being static, abstract and generic.

    Intersect : Intersect_MethodGroup
    class Intersect_MethodGroup:
        @typing.overload
        def __call__(self, rect: RectangleF) -> None:...
        @typing.overload
        def __call__(self, a: RectangleF, b: RectangleF) -> RectangleF:...

    # Skipped Offset due to it being static, abstract and generic.

    Offset : Offset_MethodGroup
    class Offset_MethodGroup:
        @typing.overload
        def __call__(self, pos: PointF) -> None:...
        @typing.overload
        def __call__(self, x: float, y: float) -> None:...



class Region(MarshalByRefObject, IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, path: GraphicsPath) -> None: ...
    @typing.overload
    def __init__(self, rect: RectangleF) -> None: ...
    @typing.overload
    def __init__(self, rect: Rectangle) -> None: ...
    @typing.overload
    def __init__(self, rgnData: RegionData) -> None: ...
    def Clone(self) -> Region: ...
    def Dispose(self) -> None: ...
    def Equals(self, region: Region, g: Graphics) -> bool: ...
    @staticmethod
    def FromHrgn(hrgn: int) -> Region: ...
    def GetBounds(self, g: Graphics) -> RectangleF: ...
    def GetHrgn(self, g: Graphics) -> int: ...
    def GetRegionData(self) -> RegionData: ...
    def GetRegionScans(self, matrix: Matrix) -> Array_1[RectangleF]: ...
    def IsEmpty(self, g: Graphics) -> bool: ...
    def IsInfinite(self, g: Graphics) -> bool: ...
    def MakeEmpty(self) -> None: ...
    def MakeInfinite(self) -> None: ...
    def ReleaseHrgn(self, regionHandle: int) -> None: ...
    def Transform(self, matrix: Matrix) -> None: ...
    # Skipped Complement due to it being static, abstract and generic.

    Complement : Complement_MethodGroup
    class Complement_MethodGroup:
        @typing.overload
        def __call__(self, path: GraphicsPath) -> None:...
        @typing.overload
        def __call__(self, rect: RectangleF) -> None:...
        @typing.overload
        def __call__(self, rect: Rectangle) -> None:...
        @typing.overload
        def __call__(self, region: Region) -> None:...

    # Skipped Exclude due to it being static, abstract and generic.

    Exclude : Exclude_MethodGroup
    class Exclude_MethodGroup:
        @typing.overload
        def __call__(self, path: GraphicsPath) -> None:...
        @typing.overload
        def __call__(self, rect: RectangleF) -> None:...
        @typing.overload
        def __call__(self, rect: Rectangle) -> None:...
        @typing.overload
        def __call__(self, region: Region) -> None:...

    # Skipped Intersect due to it being static, abstract and generic.

    Intersect : Intersect_MethodGroup
    class Intersect_MethodGroup:
        @typing.overload
        def __call__(self, path: GraphicsPath) -> None:...
        @typing.overload
        def __call__(self, rect: RectangleF) -> None:...
        @typing.overload
        def __call__(self, rect: Rectangle) -> None:...
        @typing.overload
        def __call__(self, region: Region) -> None:...

    # Skipped IsVisible due to it being static, abstract and generic.

    IsVisible : IsVisible_MethodGroup
    class IsVisible_MethodGroup:
        @typing.overload
        def __call__(self, point: PointF) -> bool:...
        @typing.overload
        def __call__(self, point: Point) -> bool:...
        @typing.overload
        def __call__(self, rect: RectangleF) -> bool:...
        @typing.overload
        def __call__(self, rect: Rectangle) -> bool:...
        @typing.overload
        def __call__(self, x: float, y: float) -> bool:...
        @typing.overload
        def __call__(self, point: PointF, g: Graphics) -> bool:...
        @typing.overload
        def __call__(self, point: Point, g: Graphics) -> bool:...
        @typing.overload
        def __call__(self, rect: RectangleF, g: Graphics) -> bool:...
        @typing.overload
        def __call__(self, rect: Rectangle, g: Graphics) -> bool:...
        @typing.overload
        def __call__(self, x: float, y: float, g: Graphics) -> bool:...
        # Method IsVisible(x : Int32, y : Int32, g : Graphics) was skipped since it collides with above method
        @typing.overload
        def __call__(self, x: float, y: float, width: float, height: float) -> bool:...
        # Method IsVisible(x : Int32, y : Int32, width : Int32, height : Int32) was skipped since it collides with above method
        @typing.overload
        def __call__(self, x: float, y: float, width: float, height: float, g: Graphics) -> bool:...
        # Method IsVisible(x : Int32, y : Int32, width : Int32, height : Int32, g : Graphics) was skipped since it collides with above method

    # Skipped Translate due to it being static, abstract and generic.

    Translate : Translate_MethodGroup
    class Translate_MethodGroup:
        def __call__(self, dx: float, dy: float) -> None:...
        # Method Translate(dx : Int32, dy : Int32) was skipped since it collides with above method

    # Skipped Union due to it being static, abstract and generic.

    Union : Union_MethodGroup
    class Union_MethodGroup:
        @typing.overload
        def __call__(self, path: GraphicsPath) -> None:...
        @typing.overload
        def __call__(self, rect: RectangleF) -> None:...
        @typing.overload
        def __call__(self, rect: Rectangle) -> None:...
        @typing.overload
        def __call__(self, region: Region) -> None:...

    # Skipped Xor due to it being static, abstract and generic.

    Xor : Xor_MethodGroup
    class Xor_MethodGroup:
        @typing.overload
        def __call__(self, path: GraphicsPath) -> None:...
        @typing.overload
        def __call__(self, rect: RectangleF) -> None:...
        @typing.overload
        def __call__(self, rect: Rectangle) -> None:...
        @typing.overload
        def __call__(self, region: Region) -> None:...



class RotateFlipType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Rotate180FlipXY : RotateFlipType # 0
    RotateNoneFlipNone : RotateFlipType # 0
    Rotate90FlipNone : RotateFlipType # 1
    Rotate270FlipXY : RotateFlipType # 1
    Rotate180FlipNone : RotateFlipType # 2
    RotateNoneFlipXY : RotateFlipType # 2
    Rotate270FlipNone : RotateFlipType # 3
    Rotate90FlipXY : RotateFlipType # 3
    RotateNoneFlipX : RotateFlipType # 4
    Rotate180FlipY : RotateFlipType # 4
    Rotate90FlipX : RotateFlipType # 5
    Rotate270FlipY : RotateFlipType # 5
    Rotate180FlipX : RotateFlipType # 6
    RotateNoneFlipY : RotateFlipType # 6
    Rotate270FlipX : RotateFlipType # 7
    Rotate90FlipY : RotateFlipType # 7


class Size(IEquatable_1[Size]):
    @typing.overload
    def __init__(self, pt: Point) -> None: ...
    @typing.overload
    def __init__(self, width: int, height: int) -> None: ...
    Empty : Size
    @property
    def Height(self) -> int: ...
    @Height.setter
    def Height(self, value: int) -> int: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Width(self) -> int: ...
    @Width.setter
    def Width(self, value: int) -> int: ...
    @staticmethod
    def Add(sz1: Size, sz2: Size) -> Size: ...
    @staticmethod
    def Ceiling(value: SizeF) -> Size: ...
    def GetHashCode(self) -> int: ...
    def __add__(self, sz1: Size, sz2: Size) -> Size: ...
    @typing.overload
    def __truediv__(self, left: Size, right: float) -> SizeF: ...
    @typing.overload
    def __truediv__(self, left: Size, right: int) -> Size: ...
    def __eq__(self, sz1: Size, sz2: Size) -> bool: ...
    # Operator not supported op_Explicit(size: Size)
    # Operator not supported op_Implicit(p: Size)
    def __ne__(self, sz1: Size, sz2: Size) -> bool: ...
    @typing.overload
    def __mul__(self, left: float, right: Size) -> SizeF: ...
    @typing.overload
    def __mul__(self, left: int, right: Size) -> Size: ...
    @typing.overload
    def __mul__(self, left: Size, right: float) -> SizeF: ...
    @typing.overload
    def __mul__(self, left: Size, right: int) -> Size: ...
    def __sub__(self, sz1: Size, sz2: Size) -> Size: ...
    @staticmethod
    def Round(value: SizeF) -> Size: ...
    @staticmethod
    def Subtract(sz1: Size, sz2: Size) -> Size: ...
    def ToString(self) -> str: ...
    @staticmethod
    def Truncate(value: SizeF) -> Size: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: Size) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class SizeF(IEquatable_1[SizeF]):
    @typing.overload
    def __init__(self, pt: PointF) -> None: ...
    @typing.overload
    def __init__(self, size: SizeF) -> None: ...
    @typing.overload
    def __init__(self, vector: Vector2) -> None: ...
    @typing.overload
    def __init__(self, width: float, height: float) -> None: ...
    Empty : SizeF
    @property
    def Height(self) -> float: ...
    @Height.setter
    def Height(self, value: float) -> float: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Width(self) -> float: ...
    @Width.setter
    def Width(self, value: float) -> float: ...
    @staticmethod
    def Add(sz1: SizeF, sz2: SizeF) -> SizeF: ...
    def GetHashCode(self) -> int: ...
    def __add__(self, sz1: SizeF, sz2: SizeF) -> SizeF: ...
    def __truediv__(self, left: SizeF, right: float) -> SizeF: ...
    def __eq__(self, sz1: SizeF, sz2: SizeF) -> bool: ...
    # Operator not supported op_Explicit(size: SizeF)
    # Operator not supported op_Explicit(size: SizeF)
    # Operator not supported op_Explicit(vector: Vector2)
    def __ne__(self, sz1: SizeF, sz2: SizeF) -> bool: ...
    @typing.overload
    def __mul__(self, left: float, right: SizeF) -> SizeF: ...
    @typing.overload
    def __mul__(self, left: SizeF, right: float) -> SizeF: ...
    def __sub__(self, sz1: SizeF, sz2: SizeF) -> SizeF: ...
    @staticmethod
    def Subtract(sz1: SizeF, sz2: SizeF) -> SizeF: ...
    def ToPointF(self) -> PointF: ...
    def ToSize(self) -> Size: ...
    def ToString(self) -> str: ...
    def ToVector2(self) -> Vector2: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: SizeF) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class StringAlignment(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Near : StringAlignment # 0
    Center : StringAlignment # 1
    Far : StringAlignment # 2


class StringDigitSubstitute(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    User : StringDigitSubstitute # 0
    None_ : StringDigitSubstitute # 1
    National : StringDigitSubstitute # 2
    Traditional : StringDigitSubstitute # 3


class StringFormat(MarshalByRefObject, IDisposable, ICloneable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, format: StringFormat) -> None: ...
    @typing.overload
    def __init__(self, options: StringFormatFlags) -> None: ...
    @typing.overload
    def __init__(self, options: StringFormatFlags, language: int) -> None: ...
    @property
    def Alignment(self) -> StringAlignment: ...
    @Alignment.setter
    def Alignment(self, value: StringAlignment) -> StringAlignment: ...
    @property
    def DigitSubstitutionLanguage(self) -> int: ...
    @property
    def DigitSubstitutionMethod(self) -> StringDigitSubstitute: ...
    @property
    def FormatFlags(self) -> StringFormatFlags: ...
    @FormatFlags.setter
    def FormatFlags(self, value: StringFormatFlags) -> StringFormatFlags: ...
    @classmethod
    @property
    def GenericDefault(cls) -> StringFormat: ...
    @classmethod
    @property
    def GenericTypographic(cls) -> StringFormat: ...
    @property
    def HotkeyPrefix(self) -> HotkeyPrefix: ...
    @HotkeyPrefix.setter
    def HotkeyPrefix(self, value: HotkeyPrefix) -> HotkeyPrefix: ...
    @property
    def LineAlignment(self) -> StringAlignment: ...
    @LineAlignment.setter
    def LineAlignment(self, value: StringAlignment) -> StringAlignment: ...
    @property
    def Trimming(self) -> StringTrimming: ...
    @Trimming.setter
    def Trimming(self, value: StringTrimming) -> StringTrimming: ...
    def Clone(self) -> typing.Any: ...
    def Dispose(self) -> None: ...
    def GetTabStops(self, firstTabOffset: clr.Reference[float]) -> Array_1[float]: ...
    def SetDigitSubstitution(self, language: int, substitute: StringDigitSubstitute) -> None: ...
    def SetMeasurableCharacterRanges(self, ranges: Array_1[CharacterRange]) -> None: ...
    def SetTabStops(self, firstTabOffset: float, tabStops: Array_1[float]) -> None: ...
    def ToString(self) -> str: ...


class StringFormatFlags(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DirectionRightToLeft : StringFormatFlags # 1
    DirectionVertical : StringFormatFlags # 2
    FitBlackBox : StringFormatFlags # 4
    DisplayFormatControl : StringFormatFlags # 32
    NoFontFallback : StringFormatFlags # 1024
    MeasureTrailingSpaces : StringFormatFlags # 2048
    NoWrap : StringFormatFlags # 4096
    LineLimit : StringFormatFlags # 8192
    NoClip : StringFormatFlags # 16384


class StringTrimming(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : StringTrimming # 0
    Character : StringTrimming # 1
    Word : StringTrimming # 2
    EllipsisCharacter : StringTrimming # 3
    EllipsisWord : StringTrimming # 4
    EllipsisPath : StringTrimming # 5

