import typing, clr, abc
from Autodesk.Revit.DB import Element, ElementId, BoundingBoxXYZ, Category, DesignOption, Document, GeometryElement, Location, Parameter, ParameterSet, ParameterMap, WorksetId, Curve, Reference, Transform, XYZ, ElementType, CurveLoop, Line, View3D, View, CurveElement, CurveElementType, SketchPlane, IndependentTag, LeaderEndCondition, LeadersPresentationMode, TagOrientation, LinkElementId, RoundingMethod, ElementSlowFilter, ConnectorManager, ParameterValue, BarTypeDiameterOptions, Face, UV, ExternalDefinition, DefinitionFile, ForgeTypeId, Subelement, FamilyInstance, CurveArray, FamilySymbol, Family
from System import Guid, IDisposable
from Autodesk.Revit.DB.Structure.StructuralSections import StructuralSectionShape
from System.Collections.Generic import IList_1, ISet_1, IDictionary_2, IEnumerable_1, IEnumerator_1, ICollection_1
from Autodesk.Revit.DB.ExternalService import IExternalServer

class AnalyticalAlignmentMethod(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AutoDetect : AnalyticalAlignmentMethod # 0
    Projection : AnalyticalAlignmentMethod # 1
    ManuallyAdjusted : AnalyticalAlignmentMethod # 2
    Varies : AnalyticalAlignmentMethod # 3


class AnalyticalCurveSelector(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    StartPoint : AnalyticalCurveSelector # 0
    EndPoint : AnalyticalCurveSelector # 1
    WholeCurve : AnalyticalCurveSelector # 2


class AnalyticalCurveType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    RawCurves : AnalyticalCurveType # 0
    RigidLinkHead : AnalyticalCurveType # 1
    RigidLinkTail : AnalyticalCurveType # 2
    ActiveCurves : AnalyticalCurveType # 3
    ApproximatedCurves : AnalyticalCurveType # 4
    BaseCurve : AnalyticalCurveType # 5
    AllRigidLinks : AnalyticalCurveType # 6


class AnalyticalDirection(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Vertical : AnalyticalDirection # 0
    VerticalTop : AnalyticalDirection # 1
    VerticalBottom : AnalyticalDirection # 2
    Horizontal : AnalyticalDirection # 3
    HorizontalStart : AnalyticalDirection # 4
    HorizontalEnd : AnalyticalDirection # 5
    Any : AnalyticalDirection # 6
    X : AnalyticalDirection # 7
    Y : AnalyticalDirection # 8
    Z : AnalyticalDirection # 9


class AnalyticalElement(Element):
    @property
    def AnalyzeAs(self) -> AnalyzeAs: ...
    @AnalyzeAs.setter
    def AnalyzeAs(self, value: AnalyzeAs) -> AnalyzeAs: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MaterialId(self) -> ElementId: ...
    @MaterialId.setter
    def MaterialId(self, value: ElementId) -> ElementId: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def StructuralRole(self) -> AnalyticalStructuralRole: ...
    @StructuralRole.setter
    def StructuralRole(self, value: AnalyticalStructuralRole) -> AnalyticalStructuralRole: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def GetCurve(self) -> Curve: ...
    def GetReference(self, selector: AnalyticalModelSelector) -> Reference: ...
    def GetTransform(self) -> Transform: ...
    def IsSingleCurve(self) -> bool: ...
    def IsValidAnalyzeAs(self, analyzeAs: AnalyzeAs) -> bool: ...
    def IsValidSelector(self, selector: AnalyticalModelSelector) -> bool: ...
    def IsValidStructuralRole(self, structuralRole: AnalyticalStructuralRole) -> bool: ...


class AnalyticalElementSelector(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    StartOrBase : AnalyticalElementSelector # 0
    EndOrTop : AnalyticalElementSelector # 1
    Whole : AnalyticalElementSelector # 2


class AnalyticalFixityState(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Fixed : AnalyticalFixityState # 0
    Released : AnalyticalFixityState # 1
    Spring : AnalyticalFixityState # 2


class AnalyticalLink(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def End(self) -> XYZ: ...
    @property
    def EndHubId(self) -> ElementId: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerId(self) -> ElementId: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def Start(self) -> XYZ: ...
    @property
    def StartHubId(self) -> ElementId: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(doc: Document, type: ElementId, startHubId: ElementId, endHubId: ElementId) -> AnalyticalLink: ...
    def IsAutoGenerated(self) -> bool: ...
    @staticmethod
    def IsValidHub(doc: Document, hubId: ElementId) -> bool: ...


class AnalyticalLinkType(ElementType):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def RotationX(self) -> AnalyticalFixityState: ...
    @RotationX.setter
    def RotationX(self, value: AnalyticalFixityState) -> AnalyticalFixityState: ...
    @property
    def RotationY(self) -> AnalyticalFixityState: ...
    @RotationY.setter
    def RotationY(self, value: AnalyticalFixityState) -> AnalyticalFixityState: ...
    @property
    def RotationZ(self) -> AnalyticalFixityState: ...
    @RotationZ.setter
    def RotationZ(self, value: AnalyticalFixityState) -> AnalyticalFixityState: ...
    @property
    def TranslationX(self) -> AnalyticalFixityState: ...
    @TranslationX.setter
    def TranslationX(self, value: AnalyticalFixityState) -> AnalyticalFixityState: ...
    @property
    def TranslationY(self) -> AnalyticalFixityState: ...
    @TranslationY.setter
    def TranslationY(self, value: AnalyticalFixityState) -> AnalyticalFixityState: ...
    @property
    def TranslationZ(self) -> AnalyticalFixityState: ...
    @TranslationZ.setter
    def TranslationZ(self, value: AnalyticalFixityState) -> AnalyticalFixityState: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def IsValidAnalyticalFixityState(fixityState: AnalyticalFixityState) -> bool: ...


class AnalyticalLoopType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    All : AnalyticalLoopType # 0
    External : AnalyticalLoopType # 1
    Internal : AnalyticalLoopType # 2
    Filled : AnalyticalLoopType # 3
    Void : AnalyticalLoopType # 4


class AnalyticalMember(AnalyticalElement):
    @property
    def AnalyzeAs(self) -> AnalyzeAs: ...
    @AnalyzeAs.setter
    def AnalyzeAs(self, value: AnalyzeAs) -> AnalyzeAs: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def CrossSectionRotation(self) -> float: ...
    @CrossSectionRotation.setter
    def CrossSectionRotation(self, value: float) -> float: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MaterialId(self) -> ElementId: ...
    @MaterialId.setter
    def MaterialId(self, value: ElementId) -> ElementId: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def SectionTypeId(self) -> ElementId: ...
    @SectionTypeId.setter
    def SectionTypeId(self, value: ElementId) -> ElementId: ...
    @property
    def StructuralRole(self) -> AnalyticalStructuralRole: ...
    @StructuralRole.setter
    def StructuralRole(self, value: AnalyticalStructuralRole) -> AnalyticalStructuralRole: ...
    @property
    def StructuralSectionShape(self) -> StructuralSectionShape: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(aDoc: Document, curve: Curve) -> AnalyticalMember: ...
    def FlipCurve(self) -> None: ...
    def GetMemberForces(self) -> IList_1[MemberForces]: ...
    def GetReleaseConditions(self) -> IList_1[ReleaseConditions]: ...
    def GetReleaseType(self, start: bool) -> ReleaseType: ...
    @staticmethod
    def IsValidCurve(curve: Curve) -> bool: ...
    def IsValidSectionTypeId(self, familySymbolId: ElementId) -> bool: ...
    def SetCurve(self, curve: Curve) -> None: ...
    def SetReleaseConditions(self, releaseConditions: ReleaseConditions) -> None: ...
    def SetReleaseType(self, start: bool, releaseType: ReleaseType) -> None: ...
    # Skipped SetMemberForces due to it being static, abstract and generic.

    SetMemberForces : SetMemberForces_MethodGroup
    class SetMemberForces_MethodGroup:
        @typing.overload
        def __call__(self, memberForces: MemberForces) -> None:...
        @typing.overload
        def __call__(self, start: bool, force: XYZ, moment: XYZ) -> None:...



class AnalyticalModelSelector(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, curve: Curve) -> None: ...
    @typing.overload
    def __init__(self, curve: Curve, inCurveSelector: AnalyticalCurveSelector) -> None: ...
    @typing.overload
    def __init__(self, inCurveSelector: AnalyticalCurveSelector) -> None: ...
    @property
    def CurveSelector(self) -> AnalyticalCurveSelector: ...
    @CurveSelector.setter
    def CurveSelector(self, value: AnalyticalCurveSelector) -> AnalyticalCurveSelector: ...
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...


class AnalyticalNodeConnectionStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unconnected : AnalyticalNodeConnectionStatus # 0
    Connected : AnalyticalNodeConnectionStatus # 1


class AnalyticalNodeData(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...
    @staticmethod
    def GetAnalyticalNodeData(element: Element) -> AnalyticalNodeData: ...
    def GetConnectionStatus(self) -> AnalyticalNodeConnectionStatus: ...


class AnalyticalOpening(AnalyticalSurfaceBase):
    @property
    def AnalyzeAs(self) -> AnalyzeAs: ...
    @AnalyzeAs.setter
    def AnalyzeAs(self, value: AnalyzeAs) -> AnalyzeAs: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MaterialId(self) -> ElementId: ...
    @MaterialId.setter
    def MaterialId(self, value: ElementId) -> ElementId: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def PanelId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def SketchId(self) -> ElementId: ...
    @property
    def StructuralRole(self) -> AnalyticalStructuralRole: ...
    @StructuralRole.setter
    def StructuralRole(self, value: AnalyticalStructuralRole) -> AnalyticalStructuralRole: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(aDoc: Document, curveLoop: CurveLoop, panelId: ElementId) -> AnalyticalOpening: ...
    @staticmethod
    def IsCurveLoopValidForAnalyticalOpening(loop: CurveLoop, aDoc: Document, panelId: ElementId) -> bool: ...


class AnalyticalPanel(AnalyticalSurfaceBase):
    @property
    def AnalyzeAs(self) -> AnalyzeAs: ...
    @AnalyzeAs.setter
    def AnalyzeAs(self, value: AnalyzeAs) -> AnalyzeAs: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MaterialId(self) -> ElementId: ...
    @MaterialId.setter
    def MaterialId(self, value: ElementId) -> ElementId: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def SketchId(self) -> ElementId: ...
    @property
    def StructuralRole(self) -> AnalyticalStructuralRole: ...
    @StructuralRole.setter
    def StructuralRole(self, value: AnalyticalStructuralRole) -> AnalyticalStructuralRole: ...
    @property
    def Thickness(self) -> float: ...
    @Thickness.setter
    def Thickness(self, value: float) -> float: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def GetAnalyticalOpeningsIds(self) -> ISet_1[ElementId]: ...
    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        @typing.overload
        def __call__(self, aDoc: Document, curveLoop: CurveLoop) -> AnalyticalPanel:...
        @typing.overload
        def __call__(self, document: Document, profile: Curve, normal: XYZ) -> AnalyticalPanel:...



class AnalyticalProjectionType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Top : AnalyticalProjectionType # 0
    Center : AnalyticalProjectionType # 1
    Bottom : AnalyticalProjectionType # 2
    SideOne : AnalyticalProjectionType # 3
    SideTwo : AnalyticalProjectionType # 4
    AutoDetect : AnalyticalProjectionType # 5
    Invalid : AnalyticalProjectionType # 6
    SketchCurve : AnalyticalProjectionType # 7
    DatumPlane : AnalyticalProjectionType # 8
    NotApplicable : AnalyticalProjectionType # 9
    Default : AnalyticalProjectionType # 10
    CenterOfCore : AnalyticalProjectionType # 11
    LocationLine : AnalyticalProjectionType # 12
    Varies : AnalyticalProjectionType # 13


class AnalyticalRigidLinksOption(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Enabled : AnalyticalRigidLinksOption # 0
    Disabled : AnalyticalRigidLinksOption # 1
    FromColumn : AnalyticalRigidLinksOption # 2


class AnalyticalStructuralRole(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    StructuralRoleBeam : AnalyticalStructuralRole # 0
    StructuralRoleColumn : AnalyticalStructuralRole # 1
    StructuralRoleMember : AnalyticalStructuralRole # 3
    StructuralRoleGirder : AnalyticalStructuralRole # 4
    StructuralRoleFloor : AnalyticalStructuralRole # 5
    StructuralRoleWall : AnalyticalStructuralRole # 6
    StructuralRolePanel : AnalyticalStructuralRole # 7
    Unset : AnalyticalStructuralRole # -1


class AnalyticalSupportPriority(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    UnknownPriority : AnalyticalSupportPriority # 0
    HighestPriority : AnalyticalSupportPriority # 1
    SecondHighestPriority : AnalyticalSupportPriority # 2
    ThirdHighestPriority : AnalyticalSupportPriority # 3
    FourthHigestPriority : AnalyticalSupportPriority # 4


class AnalyticalSupportType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    UnknownSupport : AnalyticalSupportType # 0
    PointSupport : AnalyticalSupportType # 1
    CurveSupport : AnalyticalSupportType # 2
    SurfaceSupport : AnalyticalSupportType # 3


class AnalyticalSurfaceBase(AnalyticalElement):
    @property
    def AnalyzeAs(self) -> AnalyzeAs: ...
    @AnalyzeAs.setter
    def AnalyzeAs(self, value: AnalyzeAs) -> AnalyzeAs: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MaterialId(self) -> ElementId: ...
    @MaterialId.setter
    def MaterialId(self, value: ElementId) -> ElementId: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def SketchId(self) -> ElementId: ...
    @property
    def StructuralRole(self) -> AnalyticalStructuralRole: ...
    @StructuralRole.setter
    def StructuralRole(self, value: AnalyticalStructuralRole) -> AnalyticalStructuralRole: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def GetOuterContour(self) -> CurveLoop: ...
    @staticmethod
    def IsCurveLoopValid(profile: CurveLoop) -> bool: ...
    def SetOuterContour(self, outerContour: CurveLoop) -> None: ...


class AnalyticalToPhysicalAssociationManager(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @classmethod
    @property
    def EnableAssistedAssociation(cls) -> bool: ...
    @classmethod
    @EnableAssistedAssociation.setter
    def EnableAssistedAssociation(cls, value: bool) -> bool: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def AddAssociation(self, analyticalElementId: ElementId, physicalElementId: ElementId) -> None: ...
    @staticmethod
    def GetAnalyticalToPhysicalAssociationManager(doc: Document) -> AnalyticalToPhysicalAssociationManager: ...
    def GetAssociatedElementId(self, elementId: ElementId) -> ElementId: ...
    def HasAssociation(self, id: ElementId) -> bool: ...
    @staticmethod
    def IsAnalyticalElement(doc: Document, id: ElementId) -> bool: ...
    @staticmethod
    def IsPhysicalElement(doc: Document, id: ElementId) -> bool: ...
    def RemoveAssociation(self, id: ElementId) -> None: ...


class AnalyzeAs(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Hanger : AnalyzeAs # 0
    Gravity : AnalyzeAs # 1
    Lateral : AnalyzeAs # 2
    SlabOneWay : AnalyzeAs # 3
    Mat : AnalyzeAs # 4
    SlabOnGrade : AnalyzeAs # 5
    NotForAnalysis : AnalyzeAs # 7
    NotApplicable : AnalyzeAs # 8
    SlabTwoWay : AnalyzeAs # 9
    GravityLateral : AnalyzeAs # 10


class AreaLoad(LoadBase):
    @property
    def Area(self) -> float: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def ForceVector1(self) -> XYZ: ...
    @ForceVector1.setter
    def ForceVector1(self, value: XYZ) -> XYZ: ...
    @property
    def ForceVector2(self) -> XYZ: ...
    @ForceVector2.setter
    def ForceVector2(self, value: XYZ) -> XYZ: ...
    @property
    def ForceVector3(self) -> XYZ: ...
    @ForceVector3.setter
    def ForceVector3(self, value: XYZ) -> XYZ: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def HostElementId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsHosted(self) -> bool: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsProjected(self) -> bool: ...
    @IsProjected.setter
    def IsProjected(self, value: bool) -> bool: ...
    @property
    def IsReaction(self) -> bool: ...
    @IsReaction.setter
    def IsReaction(self, value: bool) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def LoadCase(self) -> LoadCase: ...
    @property
    def LoadCaseId(self) -> ElementId: ...
    @LoadCaseId.setter
    def LoadCaseId(self, value: ElementId) -> ElementId: ...
    @property
    def LoadCaseName(self) -> str: ...
    @property
    def LoadCategoryName(self) -> str: ...
    @property
    def LoadNatureName(self) -> str: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumRefPoints(self) -> int: ...
    @property
    def OrientTo(self) -> LoadOrientTo: ...
    @OrientTo.setter
    def OrientTo(self, value: LoadOrientTo) -> LoadOrientTo: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorkPlaneId(self) -> ElementId: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def GetLoops(self) -> IList_1[CurveLoop]: ...
    def GetRefPoint(self, index: int) -> XYZ: ...
    @staticmethod
    def IsValidHostId(pDoc: Document, hostId: ElementId) -> bool: ...
    def SetLoops(self, doc: Document, newLoops: IList_1[CurveLoop]) -> bool: ...
    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        @typing.overload
        def __call__(self, aDoc: Document, loops: IList_1[CurveLoop], forceVector: XYZ, symbol: AreaLoadType) -> AreaLoad:...
        @typing.overload
        def __call__(self, aDoc: Document, hostElemId: ElementId, forceVector: XYZ, symbol: AreaLoadType) -> AreaLoad:...
        @typing.overload
        def __call__(self, aDoc: Document, loops: IList_1[CurveLoop], forceVectors: IList_1[XYZ], refPointCurveIndexes: IList_1[int], refPointCurveSelectors: IList_1[int], symbol: AreaLoadType) -> AreaLoad:...



class AreaLoadType(LoadTypeBase):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...


class AreaReinforcement(Element):
    @property
    def AdditionalBottomCoverOffset(self) -> float: ...
    @AdditionalBottomCoverOffset.setter
    def AdditionalBottomCoverOffset(self, value: float) -> float: ...
    @property
    def AdditionalTopCoverOffset(self) -> float: ...
    @AdditionalTopCoverOffset.setter
    def AdditionalTopCoverOffset(self, value: float) -> float: ...
    @property
    def AreaReinforcementType(self) -> AreaReinforcementType: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Direction(self) -> XYZ: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def ConvertRebarInSystemToRebars(doc: Document, system: AreaReinforcement) -> IList_1[ElementId]: ...
    def GetBoundaryCurveIds(self) -> IList_1[ElementId]: ...
    def GetHostId(self) -> ElementId: ...
    def GetLayerDirection(self, layer: AreaReinforcementLayerType) -> XYZ: ...
    def GetLineFromLayerAtIndex(self, layer: AreaReinforcementLayerType, linePositionIndex: int) -> Line: ...
    def GetMovedLineTransform(self, layer: AreaReinforcementLayerType, linePositionIndex: int) -> Transform: ...
    def GetNumberOfLines(self, layer: AreaReinforcementLayerType) -> int: ...
    def GetRebarInSystemIds(self) -> IList_1[ElementId]: ...
    def IsLayerActive(self, layer: AreaReinforcementLayerType) -> bool: ...
    def IsLineIncluded(self, layer: AreaReinforcementLayerType, linePositionIndex: int) -> bool: ...
    def IsSolidInView(self, view: View3D) -> bool: ...
    def IsUnobscuredInView(self, view: View) -> bool: ...
    def MoveLine(self, translation: XYZ, layer: AreaReinforcementLayerType, linePositionIndex: int) -> None: ...
    @staticmethod
    def RemoveAreaReinforcementSystem(doc: Document, system: AreaReinforcement) -> IList_1[ElementId]: ...
    def ResetMovedLineTransform(self, layer: AreaReinforcementLayerType, linePositionIndex: int) -> None: ...
    def SetLayerActive(self, active: bool, layer: AreaReinforcementLayerType) -> None: ...
    def SetLineIncluded(self, include: bool, layer: AreaReinforcementLayerType, linePositionIndex: int) -> None: ...
    def SetSolidInView(self, view: View3D, solid: bool) -> None: ...
    def SetUnobscuredInView(self, view: View, unobscured: bool) -> None: ...
    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        @typing.overload
        def __call__(self, document: Document, hostElement: Element, majorDirection: XYZ, areaReinforcementTypeId: ElementId, rebarBarTypeId: ElementId, rebarHookTypeId: ElementId) -> AreaReinforcement:...
        @typing.overload
        def __call__(self, document: Document, hostElement: Element, curveArray: IList_1[Curve], majorDirection: XYZ, areaReinforcementTypeId: ElementId, rebarBarTypeId: ElementId, rebarHookTypeId: ElementId) -> AreaReinforcement:...



class AreaReinforcementCurve(CurveElement):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CenterPointReference(self) -> Reference: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def Curve(self) -> Curve: ...
    @property
    def CurveElementType(self) -> CurveElementType: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GeometryCurve(self) -> Curve: ...
    @GeometryCurve.setter
    def GeometryCurve(self, value: Curve) -> Curve: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def LineStyle(self) -> Element: ...
    @LineStyle.setter
    def LineStyle(self, value: Element) -> Element: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def SketchPlane(self) -> SketchPlane: ...
    @SketchPlane.setter
    def SketchPlane(self, value: SketchPlane) -> SketchPlane: ...
    @property
    def SupportsTangentLocks(self) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...


class AreaReinforcementLayerType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    TopOrFrontMajor : AreaReinforcementLayerType # 0
    TopOrFrontMinor : AreaReinforcementLayerType # 1
    BottomOrBackMajor : AreaReinforcementLayerType # 2
    BottomOrBackMinor : AreaReinforcementLayerType # 3


class AreaReinforcementType(ElementType):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def CreateDefaultAreaReinforcementType(aDoc: Document) -> ElementId: ...


class BentFabricBendDirection(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Major : BentFabricBendDirection # 0
    Minor : BentFabricBendDirection # 1


class BentFabricStraightWiresLocation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Right : BentFabricStraightWiresLocation # 0
    Left : BentFabricStraightWiresLocation # 1


class BoundaryConditions(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def AssociatedLoadId(self) -> ElementId: ...
    @AssociatedLoadId.setter
    def AssociatedLoadId(self, value: ElementId) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def HostElementId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def Point(self) -> XYZ: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def GetBoundaryConditionsType(self) -> BoundaryConditionsType: ...
    def GetCurve(self) -> Curve: ...
    def GetDegreesOfFreedomCoordinateSystem(self) -> Transform: ...
    def GetLoops(self) -> IList_1[CurveLoop]: ...
    def GetOrientTo(self) -> BoundaryConditionsOrientTo: ...
    def SetOrientTo(self, orientTo: BoundaryConditionsOrientTo) -> None: ...


class BoundaryConditionsOrientTo(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Project : BoundaryConditionsOrientTo # 0
    HostLocalCoordinateSystem : BoundaryConditionsOrientTo # 1


class BoundaryConditionsType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Point : BoundaryConditionsType # 0
    Line : BoundaryConditionsType # 1
    Area : BoundaryConditionsType # 2


class BracePlanRepresentation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ParallelLine : BracePlanRepresentation # 1
    LineWithAngle : BracePlanRepresentation # 2


class CodeCheckingParameterServiceData(IDisposable):
    @property
    def Document(self) -> Document: ...
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...
    def GetCurrentElements(self) -> IList_1[ElementId]: ...


class ConnectionInputPoint(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pt: XYZ) -> None: ...
    @typing.overload
    def __init__(self, pt: XYZ, uid: Guid) -> None: ...
    @property
    def Id(self) -> Guid: ...
    @Id.setter
    def Id(self, value: Guid) -> Guid: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Point(self) -> XYZ: ...
    @Point.setter
    def Point(self, value: XYZ) -> XYZ: ...
    def Dispose(self) -> None: ...


class ConnectionInputPointInfo(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, ptSelectionText: str, inputMemberIndex: int, restrictionType: str) -> None: ...
    @property
    def InputMemberIndex(self) -> int: ...
    @InputMemberIndex.setter
    def InputMemberIndex(self, value: int) -> int: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def PointSelectionText(self) -> str: ...
    @PointSelectionText.setter
    def PointSelectionText(self, value: str) -> str: ...
    @property
    def RestrictionType(self) -> str: ...
    @RestrictionType.setter
    def RestrictionType(self, value: str) -> str: ...
    def Dispose(self) -> None: ...


class DistributionType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Uniform : DistributionType # 0
    VaryingLength : DistributionType # 1


class EndTreatmentType(ElementType):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def EndTreatment(self) -> str: ...
    @EndTreatment.setter
    def EndTreatment(self, value: str) -> str: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def CreateDefaultEndTreatmentType(ADoc: Document) -> ElementId: ...
    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        @typing.overload
        def __call__(self, doc: Document) -> EndTreatmentType:...
        @typing.overload
        def __call__(self, doc: Document, strTreatment: str) -> EndTreatmentType:...



class ExtElemChangeBeamSectionRegistry(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...
    @staticmethod
    def RegisterInterface(provider: IExtElemChangeBeamSection) -> None: ...
    @staticmethod
    def Unregister() -> None: ...


class FabricArea(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CoverOffset(self) -> float: ...
    @CoverOffset.setter
    def CoverOffset(self, value: float) -> float: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Direction(self) -> XYZ: ...
    @property
    def DirectionOrigin(self) -> XYZ: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FabricAreaType(self) -> FabricAreaType: ...
    @property
    def FabricLocation(self) -> FabricLocation: ...
    @FabricLocation.setter
    def FabricLocation(self, value: FabricLocation) -> FabricLocation: ...
    @property
    def FabricSheetTypeId(self) -> ElementId: ...
    @FabricSheetTypeId.setter
    def FabricSheetTypeId(self, value: ElementId) -> ElementId: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def HostId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LapSplicePosition(self) -> FabricLapSplicePosition: ...
    @LapSplicePosition.setter
    def LapSplicePosition(self, value: FabricLapSplicePosition) -> FabricLapSplicePosition: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MajorLapSpliceLength(self) -> float: ...
    @MajorLapSpliceLength.setter
    def MajorLapSpliceLength(self, value: float) -> float: ...
    @property
    def MajorSheetAlignment(self) -> FabricSheetAlignment: ...
    @MajorSheetAlignment.setter
    def MajorSheetAlignment(self, value: FabricSheetAlignment) -> FabricSheetAlignment: ...
    @property
    def MinorLapSpliceLength(self) -> float: ...
    @MinorLapSpliceLength.setter
    def MinorLapSpliceLength(self, value: float) -> float: ...
    @property
    def MinorSheetAlignment(self) -> FabricSheetAlignment: ...
    @MinorSheetAlignment.setter
    def MinorSheetAlignment(self, value: FabricSheetAlignment) -> FabricSheetAlignment: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def SketchId(self) -> ElementId: ...
    @property
    def TagViewId(self) -> ElementId: ...
    @TagViewId.setter
    def TagViewId(self, value: ElementId) -> ElementId: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def CopyCurveLoopsInSketch(self) -> IList_1[CurveLoop]: ...
    def GetBoundaryCurveIds(self) -> IList_1[ElementId]: ...
    def GetFabricSheetElementIds(self) -> IList_1[ElementId]: ...
    def GetReinforcementRoundingManager(self) -> FabricRoundingManager: ...
    def GetTotalSheetMass(self) -> float: ...
    def GetValidViewsForTags(self) -> IList_1[ElementId]: ...
    def IsCoverOffsetValid(self, coverOffset: float) -> bool: ...
    def IsValidMajorLapSplice(self, majorLapSplice: float) -> bool: ...
    def IsValidMinorLapSplice(self, minorLapSplice: float) -> bool: ...
    @staticmethod
    def RemoveFabricReinforcementSystem(doc: Document, system: FabricArea) -> IList_1[ElementId]: ...
    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        @typing.overload
        def __call__(self, aDoc: Document, hostElement: Element, majorDirection: XYZ, fabricAreaTypeId: ElementId, fabricSheetTypeId: ElementId) -> FabricArea:...
        @typing.overload
        def __call__(self, aDoc: Document, hostElement: Element, curveLoops: IList_1[CurveLoop], majorDirection: XYZ, majorDirectionOrigin: XYZ, fabricAreaTypeId: ElementId, fabricSheetTypeId: ElementId) -> FabricArea:...



class FabricAreaType(ElementType):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def CreateDefaultFabricAreaType(aDoc: Document) -> ElementId: ...


class FabricHostReference(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotCutByCover : FabricHostReference # 0
    CutByCover : FabricHostReference # 1


class FabricLapSplicePosition(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Aligned : FabricLapSplicePosition # 0
    MajorHalfwayStagger : FabricLapSplicePosition # 1
    MajorPassingStagger : FabricLapSplicePosition # 2
    MinorHalfwayStagger : FabricLapSplicePosition # 3
    MinorPassingStagger : FabricLapSplicePosition # 4


class FabricLocation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    TopOrExternal : FabricLocation # 0
    BottomOrInternal : FabricLocation # 1


class FabricReinSpanSymbol(IndependentTag):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def HasLeader(self) -> bool: ...
    @HasLeader.setter
    def HasLeader(self, value: bool) -> bool: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsMaterialTag(self) -> bool: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsMulticategoryTag(self) -> bool: ...
    @property
    def IsOrphaned(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LeaderEndCondition(self) -> LeaderEndCondition: ...
    @LeaderEndCondition.setter
    def LeaderEndCondition(self, value: LeaderEndCondition) -> LeaderEndCondition: ...
    @property
    def LeadersPresentationMode(self) -> LeadersPresentationMode: ...
    @LeadersPresentationMode.setter
    def LeadersPresentationMode(self, value: LeadersPresentationMode) -> LeadersPresentationMode: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MergeElbows(self) -> bool: ...
    @MergeElbows.setter
    def MergeElbows(self, value: bool) -> bool: ...
    @property
    def MultiLeader(self) -> bool: ...
    @property
    def MultiReferenceAnnotationId(self) -> ElementId: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def RotationAngle(self) -> float: ...
    @RotationAngle.setter
    def RotationAngle(self, value: float) -> float: ...
    @property
    def TagHeadPosition(self) -> XYZ: ...
    @TagHeadPosition.setter
    def TagHeadPosition(self, value: XYZ) -> XYZ: ...
    @property
    def TagOrientation(self) -> TagOrientation: ...
    @TagOrientation.setter
    def TagOrientation(self, value: TagOrientation) -> TagOrientation: ...
    @property
    def TagText(self) -> str: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(document: Document, viewId: ElementId, hostId: LinkElementId, point: XYZ, symbolId: ElementId) -> FabricReinSpanSymbol: ...


class FabricRoundingManager(ReinforcementRoundingManager):
    @property
    def ApplicableReinforcementRoundingSource(self) -> ReinforcementRoundingSource: ...
    @property
    def ApplicableSegmentLengthRounding(self) -> float: ...
    @property
    def ApplicableSegmentLengthRoundingMethod(self) -> RoundingMethod: ...
    @property
    def ApplicableTotalLengthRounding(self) -> float: ...
    @property
    def ApplicableTotalLengthRoundingMethod(self) -> RoundingMethod: ...
    @property
    def Element(self) -> Element: ...
    @property
    def IsActiveOnElement(self) -> bool: ...
    @IsActiveOnElement.setter
    def IsActiveOnElement(self, value: bool) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def SegmentLengthRounding(self) -> float: ...
    @SegmentLengthRounding.setter
    def SegmentLengthRounding(self, value: float) -> float: ...
    @property
    def SegmentLengthRoundingMethod(self) -> RoundingMethod: ...
    @SegmentLengthRoundingMethod.setter
    def SegmentLengthRoundingMethod(self, value: RoundingMethod) -> RoundingMethod: ...
    @property
    def TotalLengthRounding(self) -> float: ...
    @TotalLengthRounding.setter
    def TotalLengthRounding(self, value: float) -> float: ...
    @property
    def TotalLengthRoundingMethod(self) -> RoundingMethod: ...
    @TotalLengthRoundingMethod.setter
    def TotalLengthRoundingMethod(self, value: RoundingMethod) -> RoundingMethod: ...


class FabricSheet(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BendFinalLoopOrientationVector(self) -> XYZ: ...
    @property
    def BentFabricBendDirection(self) -> BentFabricBendDirection: ...
    @BentFabricBendDirection.setter
    def BentFabricBendDirection(self, value: BentFabricBendDirection) -> BentFabricBendDirection: ...
    @property
    def BentFabricLongitudinalCutLength(self) -> float: ...
    @BentFabricLongitudinalCutLength.setter
    def BentFabricLongitudinalCutLength(self, value: float) -> float: ...
    @property
    def BentFabricStraightWiresLocation(self) -> BentFabricStraightWiresLocation: ...
    @BentFabricStraightWiresLocation.setter
    def BentFabricStraightWiresLocation(self, value: BentFabricStraightWiresLocation) -> BentFabricStraightWiresLocation: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CoverOffset(self) -> float: ...
    @CoverOffset.setter
    def CoverOffset(self, value: float) -> float: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def CutOverallLength(self) -> float: ...
    @property
    def CutOverallWidth(self) -> float: ...
    @property
    def CutSheetMass(self) -> float: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FabricAreaOwnerId(self) -> ElementId: ...
    @property
    def FabricHostReference(self) -> FabricHostReference: ...
    @FabricHostReference.setter
    def FabricHostReference(self, value: FabricHostReference) -> FabricHostReference: ...
    @property
    def FabricLocation(self) -> FabricLocation: ...
    @FabricLocation.setter
    def FabricLocation(self, value: FabricLocation) -> FabricLocation: ...
    @property
    def FabricNumber(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def HostId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsBent(self) -> bool: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def SketchId(self) -> ElementId: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def GetBendProfile(self) -> CurveLoop: ...
    def GetBendProfileWithFillets(self) -> CurveLoop: ...
    def GetReinforcementRoundingManager(self) -> FabricRoundingManager: ...
    def GetSegmentParameterIdsAndLengths(self, rounded: bool) -> IDictionary_2[ElementId, float]: ...
    def GetSheetLocation(self) -> Transform: ...
    def IsCoverOffsetValid(self, coverOffset: float) -> bool: ...
    def IsSingleFabricSheetWithinHost(self, hostElement: Element, transform: Transform) -> bool: ...
    def IsSolidInView(self, view: View3D) -> bool: ...
    def IsUnobscuredInView(self, view: View) -> bool: ...
    def PlaceInHost(self, hostElement: Element, transform: Transform) -> None: ...
    def SetBendProfile(self, bendProfile: CurveLoop) -> None: ...
    def SetSegmentLength(self, segmentParameterId: ElementId, value: float) -> None: ...
    def SetSolidInView(self, view: View3D, solid: bool) -> None: ...
    def SetUnobscuredInView(self, view: View, unobscured: bool) -> None: ...
    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        @typing.overload
        def __call__(self, document: Document, hostElement: Element, fabricSheetTypeId: ElementId) -> FabricSheet:...
        @typing.overload
        def __call__(self, document: Document, concreteHostElementId: ElementId, fabricSheetTypeId: ElementId, bendProfile: CurveLoop) -> FabricSheet:...

    # Skipped GetWireCenterlines due to it being static, abstract and generic.

    GetWireCenterlines : GetWireCenterlines_MethodGroup
    class GetWireCenterlines_MethodGroup:
        @typing.overload
        def __call__(self) -> IList_1[Curve]:...
        @typing.overload
        def __call__(self, wireDirection: WireDistributionDirection) -> IList_1[Curve]:...

    # Skipped IsValidHost due to it being static, abstract and generic.

    IsValidHost : IsValidHost_MethodGroup
    class IsValidHost_MethodGroup:
        @typing.overload
        def __call__(self, host: Element) -> bool:...
        @typing.overload
        def __call__(self, document: Document, concreteHostElementId: ElementId) -> bool:...



class FabricSheetAlignment(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Null : FabricSheetAlignment # 0
    StartingEdge : FabricSheetAlignment # 1
    EndingEdge : FabricSheetAlignment # 2
    BothEdges : FabricSheetAlignment # 3


class FabricSheetLayoutPattern(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ActualSpacing : FabricSheetLayoutPattern # 0
    FixedNumber : FabricSheetLayoutPattern # 1
    MaximumSpacing : FabricSheetLayoutPattern # 2
    NumberWithSpacing : FabricSheetLayoutPattern # 3
    QuantitativeSpacing : FabricSheetLayoutPattern # 4


class FabricSheetType(ElementType):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MajorDirectionWireType(self) -> ElementId: ...
    @MajorDirectionWireType.setter
    def MajorDirectionWireType(self, value: ElementId) -> ElementId: ...
    @property
    def MajorEndOverhang(self) -> float: ...
    @property
    def MajorLapSpliceLength(self) -> float: ...
    @MajorLapSpliceLength.setter
    def MajorLapSpliceLength(self, value: float) -> float: ...
    @property
    def MajorLayoutPattern(self) -> FabricSheetLayoutPattern: ...
    @property
    def MajorNumberOfWires(self) -> int: ...
    @property
    def MajorReinforcementArea(self) -> float: ...
    @property
    def MajorSpacing(self) -> float: ...
    @property
    def MajorStartOverhang(self) -> float: ...
    @property
    def Material(self) -> ElementId: ...
    @Material.setter
    def Material(self, value: ElementId) -> ElementId: ...
    @property
    def MinorDirectionWireType(self) -> ElementId: ...
    @MinorDirectionWireType.setter
    def MinorDirectionWireType(self, value: ElementId) -> ElementId: ...
    @property
    def MinorEndOverhang(self) -> float: ...
    @property
    def MinorLapSpliceLength(self) -> float: ...
    @MinorLapSpliceLength.setter
    def MinorLapSpliceLength(self, value: float) -> float: ...
    @property
    def MinorLayoutPattern(self) -> FabricSheetLayoutPattern: ...
    @property
    def MinorNumberOfWires(self) -> int: ...
    @property
    def MinorReinforcementArea(self) -> float: ...
    @property
    def MinorSpacing(self) -> float: ...
    @property
    def MinorStartOverhang(self) -> float: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OverallLength(self) -> float: ...
    @property
    def OverallWidth(self) -> float: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def SheetMass(self) -> float: ...
    @SheetMass.setter
    def SheetMass(self, value: float) -> float: ...
    @property
    def SheetMassUnit(self) -> float: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def CreateDefaultFabricSheetType(ADoc: Document) -> ElementId: ...
    def GetReinforcementRoundingManager(self) -> FabricRoundingManager: ...
    def GetWireItem(self, wireIndex: int, direction: WireDistributionDirection) -> FabricWireItem: ...
    def IsCustom(self) -> bool: ...
    def IsValidMajorLapSplice(self, majorLapSplice: float) -> bool: ...
    def IsValidMinorLapSplice(self, minorLapSplice: float) -> bool: ...
    def SetLayoutAsCustomPattern(self, minorStartOverhang: float, majorStartOverhang: float, minorFabricWireItems: IList_1[FabricWireItem], majorFabricWireItems: IList_1[FabricWireItem]) -> None: ...
    def SetMajorLayoutAsActualSpacing(self, overallWidth: float, minorStartOverhang: float, spacing: float) -> None: ...
    def SetMajorLayoutAsFixedNumber(self, overallWidth: float, minorStartOverhang: float, minorEndOverhang: float, numberOfWires: int) -> None: ...
    def SetMajorLayoutAsMaximumSpacing(self, overallWidth: float, minorStartOverhang: float, minorEndOverhang: float, spacing: float) -> None: ...
    def SetMajorLayoutAsNumberWithSpacing(self, overallWidth: float, minorStartOverhang: float, numberOfWires: int, spacing: float) -> None: ...
    def SetMinorLayoutAsActualSpacing(self, overallLength: float, majorStartOverhang: float, spacing: float) -> None: ...
    def SetMinorLayoutAsFixedNumber(self, overallLength: float, majorStartOverhang: float, majorEndOverhang: float, numberOfWires: int) -> None: ...
    def SetMinorLayoutAsMaximumSpacing(self, overallLength: float, majorStartOverhang: float, majorEndOverhang: float, spacing: float) -> None: ...
    def SetMinorLayoutAsNumberWithSpacing(self, overallLength: float, majorStartOverhang: float, numberOfWires: int, spacing: float) -> None: ...


class FabricTagComponentReference(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    MajorAxis : FabricTagComponentReference # 0
    MinorAxis : FabricTagComponentReference # 1
    Diagonal : FabricTagComponentReference # 2
    Intersection : FabricTagComponentReference # 3


class FabricWireItem(IDisposable):
    @property
    def Distance(self) -> float: ...
    @Distance.setter
    def Distance(self, value: float) -> float: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def OffsetAlongWire(self) -> float: ...
    @OffsetAlongWire.setter
    def OffsetAlongWire(self, value: float) -> float: ...
    @property
    def WireLength(self) -> float: ...
    @WireLength.setter
    def WireLength(self, value: float) -> float: ...
    @property
    def WireType(self) -> ElementId: ...
    @WireType.setter
    def WireType(self, value: ElementId) -> ElementId: ...
    @staticmethod
    def Create(distance: float, wireLength: float, wireType: ElementId, wireOffset: float) -> FabricWireItem: ...
    def Dispose(self) -> None: ...


class FabricWireType(ElementType):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BendDiameter(self) -> float: ...
    @BendDiameter.setter
    def BendDiameter(self, value: float) -> float: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WireDiameter(self) -> float: ...
    @WireDiameter.setter
    def WireDiameter(self, value: float) -> float: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def CreateDefaultFabricWireType(ADoc: Document) -> ElementId: ...


class FamilyStructuralMaterialTypeFilter(ElementSlowFilter):
    @typing.overload
    def __init__(self, structuralMaterialType: StructuralMaterialType) -> None: ...
    @typing.overload
    def __init__(self, structuralMaterialType: StructuralMaterialType, inverted: bool) -> None: ...
    @property
    def Inverted(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def StructuralMaterialType(self) -> StructuralMaterialType: ...


class Hub(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def GetHubConnectorManager(self) -> ConnectorManager: ...
    def GetOrigin(self) -> XYZ: ...
    def HasOrigin(self) -> bool: ...


class ICodeCheckingParameterServer(IExternalServer, typing.Protocol):
    @abc.abstractmethod
    def PerformCodeChecking(self, data: CodeCheckingParameterServiceData) -> bool: ...


class IExtElemChangeBeamSection(typing.Protocol):
    @abc.abstractmethod
    def ChangeSection(self, doc: Document, idElem: ElementId) -> bool: ...


class IMemberForcesServer(IExternalServer, typing.Protocol):
    @abc.abstractmethod
    def MemberForcesUpdate(self, data: MemberForcesServiceData) -> bool: ...


class IRebarUpdateServer(IExternalServer, typing.Protocol):
    @abc.abstractmethod
    def GenerateCurves(self, curvesData: RebarCurvesData) -> bool: ...
    @abc.abstractmethod
    def GetCustomHandleName(self, handleNameData: RebarHandleNameData) -> bool: ...
    @abc.abstractmethod
    def GetCustomHandles(self, handlesInfoData: RebarHandlesData) -> bool: ...
    @abc.abstractmethod
    def GetHandlesPosition(self, handlePositionData: RebarHandlePositionData) -> bool: ...
    @abc.abstractmethod
    def TrimExtendCurves(self, trimExtendData: RebarTrimExtendData) -> bool: ...


class IStructuralSectionsServer(IExternalServer, typing.Protocol):
    @abc.abstractmethod
    def StructuralSectionsUpdate(self, data: StructuralSectionsServiceData) -> bool: ...


class LineLoad(LoadBase):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def EndPoint(self) -> XYZ: ...
    @property
    def ForceVector1(self) -> XYZ: ...
    @ForceVector1.setter
    def ForceVector1(self, value: XYZ) -> XYZ: ...
    @property
    def ForceVector2(self) -> XYZ: ...
    @ForceVector2.setter
    def ForceVector2(self, value: XYZ) -> XYZ: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def HostElementId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsHosted(self) -> bool: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsProjected(self) -> bool: ...
    @IsProjected.setter
    def IsProjected(self, value: bool) -> bool: ...
    @property
    def IsReaction(self) -> bool: ...
    @IsReaction.setter
    def IsReaction(self, value: bool) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsUniform(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def LoadCase(self) -> LoadCase: ...
    @property
    def LoadCaseId(self) -> ElementId: ...
    @LoadCaseId.setter
    def LoadCaseId(self, value: ElementId) -> ElementId: ...
    @property
    def LoadCaseName(self) -> str: ...
    @property
    def LoadCategoryName(self) -> str: ...
    @property
    def LoadNatureName(self) -> str: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MomentVector1(self) -> XYZ: ...
    @MomentVector1.setter
    def MomentVector1(self, value: XYZ) -> XYZ: ...
    @property
    def MomentVector2(self) -> XYZ: ...
    @MomentVector2.setter
    def MomentVector2(self, value: XYZ) -> XYZ: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OrientTo(self) -> LoadOrientTo: ...
    @OrientTo.setter
    def OrientTo(self, value: LoadOrientTo) -> LoadOrientTo: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def StartPoint(self) -> XYZ: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorkPlaneId(self) -> ElementId: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def GetCurve(self) -> Curve: ...
    @staticmethod
    def IsValidHostId(pDoc: Document, hostId: ElementId) -> bool: ...
    def SetPoints(self, startPoint: XYZ, endPoint: XYZ) -> bool: ...
    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        @typing.overload
        def __call__(self, aDoc: Document, hostElemId: ElementId, forceVector1: XYZ, momentVector1: XYZ, symbol: LineLoadType) -> LineLoad:...
        @typing.overload
        def __call__(self, aDoc: Document, hostElemId: ElementId, curveIndex: int, forceVector1: XYZ, momentVector1: XYZ, symbol: LineLoadType) -> LineLoad:...
        @typing.overload
        def __call__(self, aDoc: Document, startPoint: XYZ, endPoint: XYZ, forceVector: XYZ, momentVector: XYZ, symbol: LineLoadType, plane: SketchPlane) -> LineLoad:...



class LineLoadType(LoadTypeBase):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...


class LoadBase(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def HostElementId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsHosted(self) -> bool: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsReaction(self) -> bool: ...
    @IsReaction.setter
    def IsReaction(self, value: bool) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def LoadCase(self) -> LoadCase: ...
    @property
    def LoadCaseId(self) -> ElementId: ...
    @LoadCaseId.setter
    def LoadCaseId(self, value: ElementId) -> ElementId: ...
    @property
    def LoadCaseName(self) -> str: ...
    @property
    def LoadCategoryName(self) -> str: ...
    @property
    def LoadNatureName(self) -> str: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OrientTo(self) -> LoadOrientTo: ...
    @OrientTo.setter
    def OrientTo(self, value: LoadOrientTo) -> LoadOrientTo: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorkPlaneId(self) -> ElementId: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def IsOrientToPermitted(self, orientTo: LoadOrientTo) -> bool: ...


class LoadCase(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NatureId(self) -> ElementId: ...
    @NatureId.setter
    def NatureId(self, value: ElementId) -> ElementId: ...
    @property
    def Number(self) -> int: ...
    @Number.setter
    def Number(self, value: int) -> int: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def SubcategoryId(self) -> ElementId: ...
    @SubcategoryId.setter
    def SubcategoryId(self, value: ElementId) -> ElementId: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def IsLoadCaseSubcategoryId(self, loadCaseSubcategoryId: ElementId) -> bool: ...
    def IsLoadNatureId(self, natureId: ElementId) -> bool: ...
    @staticmethod
    def IsNumberUnique(document: Document, number: int) -> bool: ...
    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        @typing.overload
        def __call__(self, document: Document, name: str, natureId: ElementId, loadCaseCategory: LoadCaseCategory) -> LoadCase:...
        @typing.overload
        def __call__(self, document: Document, name: str, natureId: ElementId, subcategoryId: ElementId) -> LoadCase:...



class LoadCaseCategory(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Dead : LoadCaseCategory # 0
    Live : LoadCaseCategory # 1
    Wind : LoadCaseCategory # 2
    Snow : LoadCaseCategory # 3
    RoofLive : LoadCaseCategory # 4
    Accidental : LoadCaseCategory # 5
    Temperature : LoadCaseCategory # 6
    Seismic : LoadCaseCategory # 7


class LoadCombination(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsThirdPartyGenerated(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def State(self) -> LoadCombinationState: ...
    @State.setter
    def State(self, value: LoadCombinationState) -> LoadCombinationState: ...
    @property
    def Type(self) -> LoadCombinationType: ...
    @Type.setter
    def Type(self, value: LoadCombinationType) -> LoadCombinationType: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def GetCaseAndCombinationIds(self) -> IList_1[ElementId]: ...
    def GetComponents(self) -> IList_1[LoadComponent]: ...
    def GetUsageIds(self) -> IList_1[ElementId]: ...
    def SetComponents(self, components: IList_1[LoadComponent]) -> None: ...
    def SetUsageIds(self, usageIds: IList_1[ElementId]) -> None: ...
    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        @typing.overload
        def __call__(self, document: Document, name: str) -> LoadCombination:...
        @typing.overload
        def __call__(self, document: Document, name: str, type: LoadCombinationType, state: LoadCombinationState) -> LoadCombination:...



class LoadCombinationState(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Serviceability : LoadCombinationState # 0
    Ultimate : LoadCombinationState # 1


class LoadCombinationType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Combination : LoadCombinationType # 0
    Envelope : LoadCombinationType # 1


class LoadComponent(IDisposable):
    def __init__(self, loadCaseOrCombinationId: ElementId, factor: float) -> None: ...
    @property
    def Factor(self) -> float: ...
    @Factor.setter
    def Factor(self, value: float) -> float: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LoadCaseOrCombinationId(self) -> ElementId: ...
    @LoadCaseOrCombinationId.setter
    def LoadCaseOrCombinationId(self, value: ElementId) -> ElementId: ...
    def Dispose(self) -> None: ...


class LoadNature(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(document: Document, name: str) -> LoadNature: ...


class LoadOrientTo(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Project : LoadOrientTo # 0
    WorkPlane : LoadOrientTo # 1
    HostLocalCoordinateSystem : LoadOrientTo # 2


class LoadType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Point : LoadType # 0
    Line : LoadType # 1
    Area : LoadType # 2


class LoadTypeBase(ElementType):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...


class LoadUsage(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(document: Document, name: str) -> LoadUsage: ...


class MemberForces(IDisposable):
    def __init__(self, start: bool, force: XYZ, moment: XYZ) -> None: ...
    @property
    def Force(self) -> XYZ: ...
    @Force.setter
    def Force(self, value: XYZ) -> XYZ: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Moment(self) -> XYZ: ...
    @Moment.setter
    def Moment(self, value: XYZ) -> XYZ: ...
    @property
    def Start(self) -> bool: ...
    @Start.setter
    def Start(self, value: bool) -> bool: ...
    def Dispose(self) -> None: ...


class MemberForcesServiceData(IDisposable):
    @property
    def Document(self) -> Document: ...
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...
    def GetCurrentElements(self) -> IList_1[ElementId]: ...


class MultiplanarOption(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    IncludeAllMultiplanarCurves : MultiplanarOption # 0
    IncludeOnlyPlanarCurves : MultiplanarOption # 1


class PathReinforcement(Element):
    @property
    def AdditionalOffset(self) -> float: ...
    @AdditionalOffset.setter
    def AdditionalOffset(self, value: float) -> float: ...
    @property
    def AlternatingBarOrientation(self) -> ReinforcementBarOrientation: ...
    @AlternatingBarOrientation.setter
    def AlternatingBarOrientation(self, value: ReinforcementBarOrientation) -> ReinforcementBarOrientation: ...
    @property
    def AlternatingBarShapeId(self) -> ElementId: ...
    @AlternatingBarShapeId.setter
    def AlternatingBarShapeId(self, value: ElementId) -> ElementId: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def PathReinforcementType(self) -> PathReinforcementType: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def PrimaryBarOrientation(self) -> ReinforcementBarOrientation: ...
    @PrimaryBarOrientation.setter
    def PrimaryBarOrientation(self, value: ReinforcementBarOrientation) -> ReinforcementBarOrientation: ...
    @property
    def PrimaryBarShapeId(self) -> ElementId: ...
    @PrimaryBarShapeId.setter
    def PrimaryBarShapeId(self, value: ElementId) -> ElementId: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def ConvertRebarInSystemToRebars(doc: Document, system: PathReinforcement) -> IList_1[ElementId]: ...
    def GetCurveElementIds(self) -> IList_1[ElementId]: ...
    def GetHostId(self) -> ElementId: ...
    @staticmethod
    def GetOrCreateDefaultRebarShape(document: Document, rebarBarTypeId: ElementId, startRebarHookTypeId: ElementId, endRebarHookTypeId: ElementId) -> ElementId: ...
    def GetRebarInSystemIds(self) -> IList_1[ElementId]: ...
    def IsAlternatingLayerEnabled(self) -> bool: ...
    def IsSolidInView(self, view: View3D) -> bool: ...
    def IsUnobscuredInView(self, view: View) -> bool: ...
    def IsValidAlternatingBarOrientation(self, orientation: ReinforcementBarOrientation) -> bool: ...
    def IsValidPrimaryBarOrientation(self, orientation: ReinforcementBarOrientation) -> bool: ...
    @staticmethod
    def IsValidRebarShapeId(aDoc: Document, elementId: ElementId) -> bool: ...
    @staticmethod
    def RemovePathReinforcementSystem(doc: Document, system: PathReinforcement) -> IList_1[ElementId]: ...
    def SetSolidInView(self, view: View3D, solid: bool) -> None: ...
    def SetUnobscuredInView(self, view: View, unobscured: bool) -> None: ...
    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        @typing.overload
        def __call__(self, document: Document, hostElement: Element, curveArray: IList_1[Curve], flip: bool, pathReinforcementTypeId: ElementId, rebarBarTypeId: ElementId, startRebarHookTypeId: ElementId, endRebarHookTypeId: ElementId) -> PathReinforcement:...
        @typing.overload
        def __call__(self, document: Document, hostElement: Element, curveArray: IList_1[Curve], flip: bool, pathReinforcementTypeId: ElementId, rebarBarTypeId: ElementId, startRebarHookTypeId: ElementId, endRebarHookTypeId: ElementId, rebarShapeId: ElementId) -> PathReinforcement:...



class PathReinforcementType(ElementType):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def CreateDefaultPathReinforcementType(ADoc: Document) -> ElementId: ...


class PathReinSpanSymbol(IndependentTag):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def HasLeader(self) -> bool: ...
    @HasLeader.setter
    def HasLeader(self, value: bool) -> bool: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsMaterialTag(self) -> bool: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsMulticategoryTag(self) -> bool: ...
    @property
    def IsOrphaned(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LeaderEndCondition(self) -> LeaderEndCondition: ...
    @LeaderEndCondition.setter
    def LeaderEndCondition(self, value: LeaderEndCondition) -> LeaderEndCondition: ...
    @property
    def LeadersPresentationMode(self) -> LeadersPresentationMode: ...
    @LeadersPresentationMode.setter
    def LeadersPresentationMode(self, value: LeadersPresentationMode) -> LeadersPresentationMode: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MergeElbows(self) -> bool: ...
    @MergeElbows.setter
    def MergeElbows(self, value: bool) -> bool: ...
    @property
    def MultiLeader(self) -> bool: ...
    @property
    def MultiReferenceAnnotationId(self) -> ElementId: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def RotationAngle(self) -> float: ...
    @RotationAngle.setter
    def RotationAngle(self, value: float) -> float: ...
    @property
    def TagHeadPosition(self) -> XYZ: ...
    @TagHeadPosition.setter
    def TagHeadPosition(self, value: XYZ) -> XYZ: ...
    @property
    def TagOrientation(self) -> TagOrientation: ...
    @TagOrientation.setter
    def TagOrientation(self, value: TagOrientation) -> TagOrientation: ...
    @property
    def TagText(self) -> str: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(document: Document, viewId: ElementId, hostId: LinkElementId, point: XYZ, symbolId: ElementId) -> PathReinSpanSymbol: ...


class PointLoad(LoadBase):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def ForceVector(self) -> XYZ: ...
    @ForceVector.setter
    def ForceVector(self, value: XYZ) -> XYZ: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def HostElementId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsHosted(self) -> bool: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsReaction(self) -> bool: ...
    @IsReaction.setter
    def IsReaction(self, value: bool) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def LoadCase(self) -> LoadCase: ...
    @property
    def LoadCaseId(self) -> ElementId: ...
    @LoadCaseId.setter
    def LoadCaseId(self, value: ElementId) -> ElementId: ...
    @property
    def LoadCaseName(self) -> str: ...
    @property
    def LoadCategoryName(self) -> str: ...
    @property
    def LoadNatureName(self) -> str: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MomentVector(self) -> XYZ: ...
    @MomentVector.setter
    def MomentVector(self, value: XYZ) -> XYZ: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OrientTo(self) -> LoadOrientTo: ...
    @OrientTo.setter
    def OrientTo(self, value: LoadOrientTo) -> LoadOrientTo: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def Point(self) -> XYZ: ...
    @Point.setter
    def Point(self, value: XYZ) -> XYZ: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorkPlaneId(self) -> ElementId: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def IsValidHostId(pDoc: Document, hostId: ElementId) -> bool: ...
    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        @typing.overload
        def __call__(self, aDoc: Document, hostElemId: ElementId, selector: AnalyticalElementSelector, forceVector: XYZ, momentVector: XYZ, symbol: PointLoadType) -> PointLoad:...
        @typing.overload
        def __call__(self, aDoc: Document, point: XYZ, forceVector: XYZ, momentVector: XYZ, symbol: PointLoadType, plane: SketchPlane) -> PointLoad:...



class PointLoadType(LoadTypeBase):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...


class Rebar(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def DistributionType(self) -> DistributionType: ...
    @DistributionType.setter
    def DistributionType(self, value: DistributionType) -> DistributionType: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IncludeFirstBar(self) -> bool: ...
    @IncludeFirstBar.setter
    def IncludeFirstBar(self, value: bool) -> bool: ...
    @property
    def IncludeLastBar(self) -> bool: ...
    @IncludeLastBar.setter
    def IncludeLastBar(self, value: bool) -> bool: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LayoutRule(self) -> RebarLayoutRule: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MaxSpacing(self) -> float: ...
    @MaxSpacing.setter
    def MaxSpacing(self, value: float) -> float: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfBarPositions(self) -> int: ...
    @NumberOfBarPositions.setter
    def NumberOfBarPositions(self, value: int) -> int: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def Quantity(self) -> int: ...
    @property
    def ReadOnlyParameters(self) -> bool: ...
    @ReadOnlyParameters.setter
    def ReadOnlyParameters(self, value: bool) -> bool: ...
    @property
    def ScheduleMark(self) -> str: ...
    @ScheduleMark.setter
    def ScheduleMark(self, value: str) -> str: ...
    @property
    def TotalLength(self) -> float: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def Volume(self) -> float: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def CanApplyPresentationMode(self, dBView: View) -> bool: ...
    def CanBeMatchedWithMultipleShapes(self) -> bool: ...
    def CanSuppressFirstOrLastBar(self, dBView: View, end: int) -> bool: ...
    def CanUseHookType(self, proposedHookId: ElementId) -> bool: ...
    def ClearPresentationMode(self, dBView: View) -> None: ...
    def ConstraintsCanBeEdited(self) -> bool: ...
    @staticmethod
    def ContainsValidArcRadiiForStyleAndBarType(curves: IList_1[Curve], style: RebarStyle, barType: RebarBarType) -> bool: ...
    @staticmethod
    def CreateFromRebarShape(doc: Document, rebarShape: RebarShape, barType: RebarBarType, host: Element, origin: XYZ, xVec: XYZ, yVec: XYZ) -> Rebar: ...
    def DoesBarExistAtPosition(self, barPosition: int) -> bool: ...
    def EnableHookLengthOverride(self, enable: bool) -> None: ...
    def FindMatchingPredefinedPresentationMode(self, dBView: View) -> RebarPresentationMode: ...
    def GetAllRebarShapeIds(self) -> IList_1[ElementId]: ...
    def GetBarIndexFromReference(self, barReference: Reference) -> int: ...
    def GetBendData(self) -> RebarBendData: ...
    def GetCenterlineCurves(self, adjustForSelfIntersection: bool, suppressHooks: bool, suppressBendRadius: bool, multiplanarOption: MultiplanarOption, barPositionIndex: int) -> IList_1[Curve]: ...
    def GetCouplerId(self, end: int) -> ElementId: ...
    def GetEndTreatmentTypeId(self, end: int) -> ElementId: ...
    def GetFreeFormAccessor(self) -> RebarFreeFormAccessor: ...
    def GetFullGeometryForView(self, view: View) -> GeometryElement: ...
    def GetHookOrientation(self, iEnd: int) -> RebarHookOrientation: ...
    def GetHookRotationAngle(self, iEnd: int) -> float: ...
    def GetHookTypeId(self, end: int) -> ElementId: ...
    def GetHostId(self) -> ElementId: ...
    def GetMovedBarTransform(self, barPositionIndex: int) -> Transform: ...
    def GetOverridableHookParameters(self, startHookLengthPrameters: clr.Reference[ISet_1[ElementId]], startHookTangentLengthParameters: clr.Reference[ISet_1[ElementId]], endHookLengthParameters: clr.Reference[ISet_1[ElementId]], endHookTangentLengthParameters: clr.Reference[ISet_1[ElementId]]) -> None: ...
    def GetParameterValueAtIndex(self, paramId: ElementId, barPositionIndex: int) -> ParameterValue: ...
    def GetPresentationMode(self, dBView: View) -> RebarPresentationMode: ...
    def GetRebarConstraintsManager(self) -> RebarConstraintsManager: ...
    def GetReinforcementRoundingManager(self) -> RebarRoundingManager: ...
    def GetShapeDrivenAccessor(self) -> RebarShapeDrivenAccessor: ...
    def GetShapeId(self) -> ElementId: ...
    def GetTransformedCenterlineCurves(self, adjustForSelfIntersection: bool, suppressHooks: bool, suppressBendRadius: bool, multiplanarOption: MultiplanarOption, barPositionIndex: int) -> IList_1[Curve]: ...
    def HasPresentationOverrides(self, dBView: View) -> bool: ...
    def HookAngleMatchesRebarShapeDefinition(self, iEnd: int, proposedHookId: ElementId) -> bool: ...
    def IsBarHidden(self, view: View, barIndex: int) -> bool: ...
    def IsHookLengthOverrideEnabled(self) -> bool: ...
    def IsRebarFreeForm(self) -> bool: ...
    def IsRebarInSection(self, dBView: View) -> bool: ...
    def IsRebarShapeDriven(self) -> bool: ...
    def IsSolidInView(self, view: View3D) -> bool: ...
    def IsUnobscuredInView(self, view: View) -> bool: ...
    def MoveBarInSet(self, barPositionIndex: int, moveTransform: Transform) -> None: ...
    @staticmethod
    def RebarShapeMatchesCurvesAndHooks(rebarShape: RebarShape, barType: RebarBarType, norm: XYZ, curves: IList_1[Curve], startHook: RebarHookType, endHook: RebarHookType, startHookOrient: RebarHookOrientation, endHookOrient: RebarHookOrientation) -> bool: ...
    @staticmethod
    def RebarShapeMatchesCurvesHooksAndEndTreatment(rebarShape: RebarShape, barType: RebarBarType, norm: XYZ, curves: IList_1[Curve], startHook: RebarHookType, endHook: RebarHookType, startHookOrient: RebarHookOrientation, endHookOrient: RebarHookOrientation, hookRotationAngleAtStart: float, hookRotationAngleAtEnd: float, endTreatmentTypeIdAtStart: ElementId, endTreatmentTypeIdAtEnd: ElementId) -> bool: ...
    def ResetMovedBarTransform(self, barPositionIndex: int) -> None: ...
    def SetBarHiddenStatus(self, view: View, barIndex: int, hide: bool) -> None: ...
    def SetBarIncluded(self, include: bool, barPositionIndex: int) -> None: ...
    def SetEndTreatmentTypeId(self, end: int, endTreatmentTypeId: ElementId) -> None: ...
    def SetHookOrientation(self, iEnd: int, hookOrientation: RebarHookOrientation) -> None: ...
    def SetHookRotationAngle(self, hookRotationAngle: float, iEnd: int) -> None: ...
    def SetHookTypeId(self, end: int, hookTypeId: ElementId) -> None: ...
    def SetHostId(self, doc: Document, hostId: ElementId) -> None: ...
    def SetPresentationMode(self, dBView: View, presentationMode: RebarPresentationMode) -> None: ...
    def SetSolidInView(self, view: View3D, solid: bool) -> None: ...
    def SetUnobscuredInView(self, view: View, unobscured: bool) -> None: ...
    # Skipped CreateFreeForm due to it being static, abstract and generic.

    CreateFreeForm : CreateFreeForm_MethodGroup
    class CreateFreeForm_MethodGroup:
        @typing.overload
        def __call__(self, doc: Document, serverGUID: Guid, barType: RebarBarType, host: Element) -> Rebar:...
        @typing.overload
        def __call__(self, doc: Document, barType: RebarBarType, host: Element, curves: IList_1[IList_1[Curve]], error: clr.Reference[RebarFreeFormValidationResult]) -> Rebar:...
        @typing.overload
        def __call__(self, doc: Document, barType: RebarBarType, host: Element, curves: IList_1[CurveLoop], error: clr.Reference[RebarFreeFormValidationResult]) -> Rebar:...

    # Skipped CreateFromCurves due to it being static, abstract and generic.

    CreateFromCurves : CreateFromCurves_MethodGroup
    class CreateFromCurves_MethodGroup:
        @typing.overload
        def __call__(self, doc: Document, style: RebarStyle, barType: RebarBarType, startHook: RebarHookType, endHook: RebarHookType, host: Element, norm: XYZ, curves: IList_1[Curve], startHookOrient: RebarHookOrientation, endHookOrient: RebarHookOrientation, useExistingShapeIfPossible: bool, createNewShape: bool) -> Rebar:...
        @typing.overload
        def __call__(self, doc: Document, style: RebarStyle, barType: RebarBarType, startHook: RebarHookType, endHook: RebarHookType, host: Element, norm: XYZ, curves: IList_1[Curve], startHookOrient: RebarHookOrientation, endHookOrient: RebarHookOrientation, hookRotationAngleAtStart: float, hookRotationAngleAtEnd: float, endTreatmentTypeIdAtStart: ElementId, endTreatmentTypeIdAtEnd: ElementId, useExistingShapeIfPossible: bool, createNewShape: bool) -> Rebar:...

    # Skipped CreateFromCurvesAndShape due to it being static, abstract and generic.

    CreateFromCurvesAndShape : CreateFromCurvesAndShape_MethodGroup
    class CreateFromCurvesAndShape_MethodGroup:
        @typing.overload
        def __call__(self, doc: Document, rebarShape: RebarShape, barType: RebarBarType, startHook: RebarHookType, endHook: RebarHookType, host: Element, norm: XYZ, curves: IList_1[Curve], startHookOrient: RebarHookOrientation, endHookOrient: RebarHookOrientation) -> Rebar:...
        @typing.overload
        def __call__(self, doc: Document, rebarShape: RebarShape, barType: RebarBarType, startHook: RebarHookType, endHook: RebarHookType, host: Element, norm: XYZ, curves: IList_1[Curve], startHookOrient: RebarHookOrientation, endHookOrient: RebarHookOrientation, hookRotationAngleAtStart: float, hookRotationAngleAtEnd: float, endTreatmentTypeIdAtStart: ElementId, endTreatmentTypeIdAtEnd: ElementId) -> Rebar:...



class RebarBarType(ElementType):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BarModelDiameter(self) -> float: ...
    @BarModelDiameter.setter
    def BarModelDiameter(self, value: float) -> float: ...
    @property
    def BarNominalDiameter(self) -> float: ...
    @BarNominalDiameter.setter
    def BarNominalDiameter(self, value: float) -> float: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DeformationType(self) -> RebarDeformationType: ...
    @DeformationType.setter
    def DeformationType(self, value: RebarDeformationType) -> RebarDeformationType: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MaximumBendRadius(self) -> float: ...
    @MaximumBendRadius.setter
    def MaximumBendRadius(self, value: float) -> float: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def StandardBendDiameter(self) -> float: ...
    @StandardBendDiameter.setter
    def StandardBendDiameter(self, value: float) -> float: ...
    @property
    def StandardHookBendDiameter(self) -> float: ...
    @StandardHookBendDiameter.setter
    def StandardHookBendDiameter(self, value: float) -> float: ...
    @property
    def StirrupTieBendDiameter(self) -> float: ...
    @StirrupTieBendDiameter.setter
    def StirrupTieBendDiameter(self, value: float) -> float: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(ADoc: Document) -> RebarBarType: ...
    @staticmethod
    def CreateDefaultRebarBarType(ADoc: Document) -> ElementId: ...
    def GetAutoCalcHookLengths(self, hookId: ElementId) -> bool: ...
    def GetHookLength(self, hookId: ElementId) -> float: ...
    def GetHookOffsetLength(self, hookId: ElementId) -> float: ...
    def GetHookPermission(self, hookId: ElementId) -> bool: ...
    def GetHookTangentLength(self, hookId: ElementId) -> float: ...
    def GetReinforcementRoundingManager(self) -> RebarRoundingManager: ...
    def SetAutoCalcHookLengths(self, hookId: ElementId, autoCalculated: bool) -> None: ...
    def SetBarTypeDiameters(self, diametersOptions: BarTypeDiameterOptions) -> None: ...
    def SetHookLength(self, hookId: ElementId, hookLength: float) -> None: ...
    def SetHookOffsetLength(self, hookId: ElementId, newLength: float) -> None: ...
    def SetHookPermission(self, hookId: ElementId, permission: bool) -> None: ...
    def SetHookTangentLength(self, hookId: ElementId, newLength: float) -> None: ...


class RebarBendData(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, barType: RebarBarType, hookType0: RebarHookType, hookType1: RebarHookType, style: RebarStyle, hookOrient0: RebarHookOrientation, hookOrient1: RebarHookOrientation) -> None: ...
    @property
    def BarModelDiameter(self) -> float: ...
    @BarModelDiameter.setter
    def BarModelDiameter(self, value: float) -> float: ...
    @property
    def BarNominalDiameter(self) -> float: ...
    @BarNominalDiameter.setter
    def BarNominalDiameter(self, value: float) -> float: ...
    @property
    def BendRadius(self) -> float: ...
    @BendRadius.setter
    def BendRadius(self, value: float) -> float: ...
    @property
    def HookAngle0(self) -> int: ...
    @HookAngle0.setter
    def HookAngle0(self, value: int) -> int: ...
    @property
    def HookAngle1(self) -> int: ...
    @HookAngle1.setter
    def HookAngle1(self, value: int) -> int: ...
    @property
    def HookBendRadius(self) -> float: ...
    @HookBendRadius.setter
    def HookBendRadius(self, value: float) -> float: ...
    @property
    def HookLength0(self) -> float: ...
    @HookLength0.setter
    def HookLength0(self, value: float) -> float: ...
    @property
    def HookLength1(self) -> float: ...
    @HookLength1.setter
    def HookLength1(self, value: float) -> float: ...
    @property
    def HookOrient0(self) -> RebarHookOrientation: ...
    @HookOrient0.setter
    def HookOrient0(self, value: RebarHookOrientation) -> RebarHookOrientation: ...
    @property
    def HookOrient1(self) -> RebarHookOrientation: ...
    @HookOrient1.setter
    def HookOrient1(self, value: RebarHookOrientation) -> RebarHookOrientation: ...
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...


class RebarConstrainedHandle(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...
    def GetCustomHandleTag(self) -> int: ...
    def GetEdgeNumber(self) -> int: ...
    def GetHandleName(self) -> str: ...
    def GetHandleType(self) -> RebarHandleType: ...
    def IsCustomHandle(self) -> bool: ...
    def IsEdgeHandle(self) -> bool: ...
    def IsValid(self) -> bool: ...


class RebarConstraint(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def NumberOfTargets(self) -> int: ...
    def AreGeometryTargetsTheSame(self, otherConstraint: RebarConstraint) -> bool: ...
    def ConstrainsRebarEnds(self) -> bool: ...
    @staticmethod
    def Create(handle: RebarConstrainedHandle, targetReferences: IList_1[Reference], isConstraintToCover: bool, offsetValue: float) -> RebarConstraint: ...
    def Dispose(self) -> None: ...
    def FlipHandleOverTarget(self) -> None: ...
    def GetConstraintType(self) -> RebarConstraintType: ...
    def GetCustomHandleTag(self) -> int: ...
    def GetDistanceToTargetCover(self) -> float: ...
    def GetDistanceToTargetHostFace(self) -> float: ...
    def GetDistanceToTargetRebar(self) -> float: ...
    def GetTargetCoverType(self, targetIndex: int) -> RebarCoverType: ...
    def GetTargetHostFaceAndTransform(self, targetIndex: int, faceTransform: Transform) -> Face: ...
    def GetTargetRebarAngleOnBarOrHookBend(self) -> int: ...
    def GetTargetRebarBendNumber(self) -> int: ...
    def GetTargetRebarConstraintType(self) -> TargetRebarConstraintType: ...
    def GetTargetRebarEdgeNumber(self) -> int: ...
    def GetTargetRebarHookBarEnd(self) -> int: ...
    def HasAnEdgeNumber(self) -> bool: ...
    def IsBindingHandleWithTarget(self) -> bool: ...
    def IsEqual(self, other: RebarConstraint) -> bool: ...
    def IsFixedDistanceToHostFace(self) -> bool: ...
    def IsReferenceValidForConstraint(self, targetReference: Reference) -> bool: ...
    def IsToCover(self) -> bool: ...
    def IsToHostFaceOrCover(self) -> bool: ...
    def IsToOtherRebar(self) -> bool: ...
    def IsUsingClearBarSpacing(self) -> bool: ...
    def IsValid(self) -> bool: ...
    def ReplaceReferenceTargets(self, handle: RebarConstrainedHandle, targetReferences: IList_1[Reference], isConstraintToCover: bool, offsetValue: float) -> None: ...
    def SetDistanceToTargetCover(self, distanceToTargetCover: float) -> None: ...
    def SetDistanceToTargetHostFace(self, offset: float) -> None: ...
    def SetDistanceToTargetRebar(self, distanceToTargetRebar: float) -> None: ...
    def SetToBindHandleWithTarget(self, bindsHandleWithTarget: bool) -> None: ...
    def SetToUseClearBarSpacing(self, useClearBarSpacing: bool) -> None: ...
    def TargetIsBarBend(self) -> bool: ...
    def TargetIsHookBend(self) -> bool: ...
    def TargetRebarConstraintTypeIsEdge(self) -> bool: ...
    # Skipped GetRebarConstraintTargetHostFaceType due to it being static, abstract and generic.

    GetRebarConstraintTargetHostFaceType : GetRebarConstraintTargetHostFaceType_MethodGroup
    class GetRebarConstraintTargetHostFaceType_MethodGroup:
        @typing.overload
        def __call__(self) -> RebarConstraintTargetHostFaceType:...
        @typing.overload
        def __call__(self, targetIndex: int) -> RebarConstraintTargetHostFaceType:...

    # Skipped GetTargetElement due to it being static, abstract and generic.

    GetTargetElement : GetTargetElement_MethodGroup
    class GetTargetElement_MethodGroup:
        @typing.overload
        def __call__(self) -> Element:...
        @typing.overload
        def __call__(self, targetIndex: int) -> Element:...

    # Skipped GetTargetHostFaceReference due to it being static, abstract and generic.

    GetTargetHostFaceReference : GetTargetHostFaceReference_MethodGroup
    class GetTargetHostFaceReference_MethodGroup:
        @typing.overload
        def __call__(self) -> Reference:...
        @typing.overload
        def __call__(self, targetIndex: int) -> Reference:...



class RebarConstraintsManager(IDisposable):
    @classmethod
    @property
    def IsRebarConstrainedPlacementEnabled(cls) -> bool: ...
    @classmethod
    @IsRebarConstrainedPlacementEnabled.setter
    def IsRebarConstrainedPlacementEnabled(cls, value: bool) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    def AllowConstraintTargets(self, handle: RebarConstrainedHandle, targetsToConstrain: IList_1[Reference]) -> bool: ...
    def ApplyRebarConstraints(self, constraintsToApply: IList_1[RebarConstraint], oldTargets: IList_1[Reference], newTargets: IList_1[Reference]) -> bool: ...
    def ClearHandleConstraintPairHighlighting(self, aDoc: Document) -> None: ...
    def Dispose(self) -> None: ...
    def GetAllConstrainedHandles(self) -> IList_1[RebarConstrainedHandle]: ...
    def GetAllHandles(self) -> IList_1[RebarConstrainedHandle]: ...
    def GetCurrentConstraintOnHandle(self, handle: RebarConstrainedHandle) -> RebarConstraint: ...
    def GetPreferredConstraintOnHandle(self, handle: RebarConstrainedHandle) -> RebarConstraint: ...
    def HasValidRebar(self) -> bool: ...
    def HighlightHandleConstraintPairInAllViews(self, aDoc: Document, handle: RebarConstrainedHandle, constraint: RebarConstraint) -> None: ...
    def RemovePreferredConstraintFromHandle(self, handle: RebarConstrainedHandle) -> None: ...
    def SetPreferredConstraintForHandle(self, handle: RebarConstrainedHandle, constraint: RebarConstraint) -> None: ...
    # Skipped GetConstraintCandidatesForHandle due to it being static, abstract and generic.

    GetConstraintCandidatesForHandle : GetConstraintCandidatesForHandle_MethodGroup
    class GetConstraintCandidatesForHandle_MethodGroup:
        @typing.overload
        def __call__(self, handle: RebarConstrainedHandle) -> IList_1[RebarConstraint]:...
        @typing.overload
        def __call__(self, handle: RebarConstrainedHandle, reference: Reference) -> IList_1[RebarConstraint]:...
        @typing.overload
        def __call__(self, handle: RebarConstrainedHandle, elementId: ElementId) -> IList_1[RebarConstraint]:...



class RebarConstraintTargetHostFaceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    FaceWithTagId : RebarConstraintTargetHostFaceType # 0
    Top : RebarConstraintTargetHostFaceType # 1
    Bottom : RebarConstraintTargetHostFaceType # 2
    End0 : RebarConstraintTargetHostFaceType # 3
    End1 : RebarConstraintTargetHostFaceType # 4
    Side0 : RebarConstraintTargetHostFaceType # 5
    Side1 : RebarConstraintTargetHostFaceType # 6


class RebarConstraintType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    FixedDistanceToHostFace : RebarConstraintType # 0
    ToCover : RebarConstraintType # 1
    ToOtherRebar : RebarConstraintType # 2


class RebarContainer(Element, IEnumerable_1[RebarContainerItem]):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def ItemsCount(self) -> int: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def PresentItemsAsSubelements(self) -> bool: ...
    @PresentItemsAsSubelements.setter
    def PresentItemsAsSubelements(self, value: bool) -> bool: ...
    @property
    def ScheduleMark(self) -> str: ...
    @ScheduleMark.setter
    def ScheduleMark(self, value: str) -> str: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def AppendItemFromCurves(self, style: RebarStyle, barType: RebarBarType, startHook: RebarHookType, endHook: RebarHookType, normal: XYZ, curves: IList_1[Curve], startHookOrient: RebarHookOrientation, endHookOrient: RebarHookOrientation, useExistingShapeIfPossible: bool, createNewShape: bool) -> RebarContainerItem: ...
    def AppendItemFromCurvesAndShape(self, rebarShape: RebarShape, barType: RebarBarType, startHook: RebarHookType, endHook: RebarHookType, normal: XYZ, curves: IList_1[Curve], startHookOrient: RebarHookOrientation, endHookOrient: RebarHookOrientation) -> RebarContainerItem: ...
    def AppendItemFromRebar(self, rebar: Rebar) -> RebarContainerItem: ...
    def AppendItemFromRebarShape(self, rebarShape: RebarShape, barType: RebarBarType, origin: XYZ, xVector: XYZ, yVector: XYZ) -> RebarContainerItem: ...
    def CanApplyPresentationMode(self, dBView: View) -> bool: ...
    def ClearItems(self) -> None: ...
    def Contains(self, pItem: RebarContainerItem) -> bool: ...
    @staticmethod
    def Create(aDoc: Document, hostElement: Element, rebarContainerTypeId: ElementId) -> RebarContainer: ...
    def GetEnumerator(self) -> IEnumerator_1[RebarContainerItem]: ...
    def GetHostId(self) -> ElementId: ...
    def GetItem(self, itemIndex: int) -> RebarContainerItem: ...
    def GetParametersManager(self) -> RebarContainerParameterManager: ...
    def GetRebarContainerIterator(self) -> RebarContainerIterator: ...
    def GetReinforcementRoundingManager(self) -> RebarRoundingManager: ...
    def HasPresentationOverrides(self, dBView: View) -> bool: ...
    def IsItemHidden(self, view: View, itemIndex: int) -> bool: ...
    def IsSolidInView(self, view: View3D) -> bool: ...
    def IsUnobscuredInView(self, view: View) -> bool: ...
    def RemoveItem(self, pItem: RebarContainerItem) -> None: ...
    def SetHostId(self, doc: Document, hostId: ElementId) -> None: ...
    def SetItemHiddenStatus(self, view: View, itemIndex: int, hide: bool) -> None: ...
    def SetSolidInView(self, view: View3D, solid: bool) -> None: ...
    def SetUnobscuredInView(self, view: View, unobscured: bool) -> None: ...


class RebarContainerItem(IDisposable):
    @property
    def ArrayLength(self) -> float: ...
    @ArrayLength.setter
    def ArrayLength(self, value: float) -> float: ...
    @property
    def BarsOnNormalSide(self) -> bool: ...
    @BarsOnNormalSide.setter
    def BarsOnNormalSide(self, value: bool) -> bool: ...
    @property
    def BarTypeId(self) -> ElementId: ...
    @property
    def BaseFinishingTurns(self) -> int: ...
    @BaseFinishingTurns.setter
    def BaseFinishingTurns(self, value: int) -> int: ...
    @property
    def Height(self) -> float: ...
    @Height.setter
    def Height(self, value: float) -> float: ...
    @property
    def IncludeFirstBar(self) -> bool: ...
    @IncludeFirstBar.setter
    def IncludeFirstBar(self, value: bool) -> bool: ...
    @property
    def IncludeLastBar(self) -> bool: ...
    @IncludeLastBar.setter
    def IncludeLastBar(self, value: bool) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def ItemIndex(self) -> int: ...
    @property
    def LayoutRule(self) -> RebarLayoutRule: ...
    @property
    def MaxSpacing(self) -> float: ...
    @MaxSpacing.setter
    def MaxSpacing(self, value: float) -> float: ...
    @property
    def MultiplanarDepth(self) -> float: ...
    @MultiplanarDepth.setter
    def MultiplanarDepth(self, value: float) -> float: ...
    @property
    def Normal(self) -> XYZ: ...
    @property
    def NumberOfBarPositions(self) -> int: ...
    @NumberOfBarPositions.setter
    def NumberOfBarPositions(self, value: int) -> int: ...
    @property
    def Pitch(self) -> float: ...
    @Pitch.setter
    def Pitch(self, value: float) -> float: ...
    @property
    def Quantity(self) -> int: ...
    @property
    def RebarShapeId(self) -> ElementId: ...
    @RebarShapeId.setter
    def RebarShapeId(self, value: ElementId) -> ElementId: ...
    @property
    def TopFinishingTurns(self) -> int: ...
    @TopFinishingTurns.setter
    def TopFinishingTurns(self, value: int) -> int: ...
    @property
    def TotalLength(self) -> float: ...
    @property
    def Volume(self) -> float: ...
    def CanApplyPresentationMode(self, dBView: View) -> bool: ...
    def CanUseHookType(self, proposedHookId: ElementId) -> bool: ...
    def ClearPresentationMode(self, dBView: View) -> None: ...
    def ComputeDrivingCurves(self) -> IList_1[Curve]: ...
    def Dispose(self) -> None: ...
    def DoesBarExistAtPosition(self, barPosition: int) -> bool: ...
    def FindMatchingPredefinedPresentationMode(self, dBView: View) -> RebarPresentationMode: ...
    def GetBarPositionTransform(self, barPositionIndex: int) -> Transform: ...
    def GetBendData(self) -> RebarBendData: ...
    def GetDistributionPath(self) -> Line: ...
    def GetHookOrientation(self, iEnd: int) -> RebarHookOrientation: ...
    def GetHookTypeId(self, end: int) -> ElementId: ...
    def GetPresentationMode(self, dBView: View) -> RebarPresentationMode: ...
    def HasPresentationOverrides(self, dBView: View) -> bool: ...
    def IsBarHidden(self, view: View, barIndex: int) -> bool: ...
    def IsRebarInSection(self, dBView: View) -> bool: ...
    def SetBarHiddenStatus(self, view: View, barIndex: int, hide: bool) -> None: ...
    def SetFromCurves(self, style: RebarStyle, barType: RebarBarType, startHook: RebarHookType, endHook: RebarHookType, norm: XYZ, curves: IList_1[Curve], startHookOrient: RebarHookOrientation, endHookOrient: RebarHookOrientation, useExistingShapeIfPossible: bool, createNewShape: bool) -> None: ...
    def SetFromCurvesAndShape(self, rebarShape: RebarShape, barType: RebarBarType, startHook: RebarHookType, endHook: RebarHookType, norm: XYZ, curves: IList_1[Curve], startHookOrient: RebarHookOrientation, endHookOrient: RebarHookOrientation) -> None: ...
    def SetFromRebar(self, rebar: Rebar) -> None: ...
    def SetFromRebarShape(self, rebarShape: RebarShape, barType: RebarBarType, origin: XYZ, xVec: XYZ, yVec: XYZ) -> None: ...
    def SetHookOrientation(self, iEnd: int, hookOrientation: RebarHookOrientation) -> None: ...
    def SetHookTypeId(self, end: int, hookTypeId: ElementId) -> None: ...
    def SetLayoutAsFixedNumber(self, numberOfBarPositions: int, arrayLength: float, barsOnNormalSide: bool, includeFirstBar: bool, includeLastBar: bool) -> None: ...
    def SetLayoutAsMaximumSpacing(self, spacing: float, arrayLength: float, barsOnNormalSide: bool, includeFirstBar: bool, includeLastBar: bool) -> None: ...
    def SetLayoutAsMinimumClearSpacing(self, spacing: float, arrayLength: float, barsOnNormalSide: bool, includeFirstBar: bool, includeLastBar: bool) -> None: ...
    def SetLayoutAsNumberWithSpacing(self, numberOfBarPositions: int, spacing: float, barsOnNormalSide: bool, includeFirstBar: bool, includeLastBar: bool) -> None: ...
    def SetLayoutAsSingle(self) -> None: ...
    def SetPresentationMode(self, dBView: View, presentationMode: RebarPresentationMode) -> None: ...
    # Skipped GetCenterlineCurves due to it being static, abstract and generic.

    GetCenterlineCurves : GetCenterlineCurves_MethodGroup
    class GetCenterlineCurves_MethodGroup:
        @typing.overload
        def __call__(self, adjustForSelfIntersection: bool, suppressHooks: bool, suppressBendRadius: bool) -> IList_1[Curve]:...
        @typing.overload
        def __call__(self, adjustForSelfIntersection: bool, suppressHooks: bool, suppressBendRadius: bool, multiplanarOption: MultiplanarOption) -> IList_1[Curve]:...



class RebarContainerIterator(IEnumerator_1[RebarContainerItem]):
    @property
    def Current(self) -> RebarContainerItem: ...
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class RebarContainerParameterManager(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    def AddSharedParameterAsOverride(self, paramId: ElementId) -> None: ...
    def ClearOverrides(self) -> None: ...
    def Dispose(self) -> None: ...
    def GetDoubleOverrideValue(self, paramId: ElementId) -> float: ...
    def GetElementIdOverrideValue(self, paramId: ElementId) -> ElementId: ...
    def GetIntOverrideValue(self, paramId: ElementId) -> int: ...
    def GetStringOverrideValue(self, paramId: ElementId) -> str: ...
    def IsOverriddenParameterModifiable(self, paramId: ElementId) -> bool: ...
    def IsParameterOverridden(self, paramId: ElementId) -> bool: ...
    def IsRebarContainerParameter(self, paramId: ElementId) -> bool: ...
    def RemoveOverride(self, paramId: ElementId) -> None: ...
    def SetOverriddenParameterModifiable(self, paramId: ElementId) -> None: ...
    def SetOverriddenParameterReadonly(self, paramId: ElementId) -> None: ...
    # Skipped AddOverride due to it being static, abstract and generic.

    AddOverride : AddOverride_MethodGroup
    class AddOverride_MethodGroup:
        @typing.overload
        def __call__(self, paramId: ElementId, value: float) -> None:...
        # Method AddOverride(paramId : ElementId, value : Int32) was skipped since it collides with above method
        @typing.overload
        def __call__(self, paramId: ElementId, value: str) -> None:...
        @typing.overload
        def __call__(self, paramId: ElementId, value: ElementId) -> None:...



class RebarContainerType(ElementType):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def CreateDefaultRebarContainerType(aDoc: Document) -> ElementId: ...
    @staticmethod
    def GetOrCreateRebarContainerType(aDoc: Document, name: str) -> ElementId: ...


class RebarCoupler(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CouplerMark(self) -> str: ...
    @CouplerMark.setter
    def CouplerMark(self, value: str) -> str: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def RotationAngle(self) -> float: ...
    @RotationAngle.setter
    def RotationAngle(self, value: float) -> float: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def CouplerLinkTwoBars(self) -> bool: ...
    @staticmethod
    def Create(doc: Document, typeId: ElementId, pFirstData: ReinforcementData, pSecondData: ReinforcementData, error: clr.Reference[RebarCouplerError]) -> RebarCoupler: ...
    def GetCoupledReinforcementData(self) -> IList_1[ReinforcementData]: ...
    def GetCouplerPositionTransform(self, couplerPositionIndex: int) -> Transform: ...
    def GetCouplerQuantity(self) -> int: ...
    def GetPointsForPlacement(self) -> IList_1[XYZ]: ...
    def IsUnobscuredInView(self, view: View) -> bool: ...
    def SetUnobscuredInView(self, view: View, unobscured: bool) -> None: ...


class RebarCouplerError(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ValidationSuccessfuly : RebarCouplerError # 0
    IncorrectInputData : RebarCouplerError # 1
    DifferentLayout : RebarCouplerError # 2
    BarsNotTouching : RebarCouplerError # 3
    IncorrectEndTreatmentHook : RebarCouplerError # 4
    IncorrectEndTreatmentCoupler : RebarCouplerError # 5
    BarSegementsAreNotParallel : RebarCouplerError # 6
    BarSegmentsAreNotOnSameLine : RebarCouplerError # 7
    InconsistentShape : RebarCouplerError # 8
    InvalidDiameter : RebarCouplerError # 9
    CurvesOtherThanLine : RebarCouplerError # 12
    BarSegmentSmallerThanEngagement : RebarCouplerError # 13
    VaryingDistanceBetweenDistributionsBars : RebarCouplerError # 14
    ArcsHaveDifferentRadii : RebarCouplerError # 15
    ArcsHaveDifferentCenters : RebarCouplerError # 16
    ArcToStraightSegment : RebarCouplerError # 17


class RebarCoverType(ElementType):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CoverDistance(self) -> float: ...
    @CoverDistance.setter
    def CoverDistance(self, value: float) -> float: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(doc: Document, name: str, coverDistance: float) -> RebarCoverType: ...


class RebarCurvesData(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    def CanAddBarGeometry(self) -> bool: ...
    def ClearAllAddedBarGeometry(self) -> None: ...
    def Dispose(self) -> None: ...
    def GetAddedBarGeometry(self, barIndex: int) -> IList_1[Curve]: ...
    def GetDistributionPath(self) -> IList_1[Curve]: ...
    def GetNumberOfBarGeometry(self) -> int: ...
    def GetRebarUpdateCurvesData(self) -> RebarUpdateCurvesData: ...
    def SetDistributionPath(self, path: IList_1[Curve]) -> None: ...
    # Skipped AddBarGeometry due to it being static, abstract and generic.

    AddBarGeometry : AddBarGeometry_MethodGroup
    class AddBarGeometry_MethodGroup:
        @typing.overload
        def __call__(self, curves: IList_1[Curve]) -> RebarFreeFormValidationResult:...
        @typing.overload
        def __call__(self, curves: CurveLoop) -> RebarFreeFormValidationResult:...



class RebarDeformationType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Deformed : RebarDeformationType # 0
    Plain : RebarDeformationType # 1


class RebarFreeFormAccessor(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def RebarStyle(self) -> RebarStyle: ...
    @RebarStyle.setter
    def RebarStyle(self, value: RebarStyle) -> RebarStyle: ...
    @property
    def StirrupTieAttachmentType(self) -> StirrupTieAttachmentType: ...
    @StirrupTieAttachmentType.setter
    def StirrupTieAttachmentType(self, value: StirrupTieAttachmentType) -> StirrupTieAttachmentType: ...
    @property
    def WorkshopInstructions(self) -> RebarWorkInstructions: ...
    @WorkshopInstructions.setter
    def WorkshopInstructions(self, value: RebarWorkInstructions) -> RebarWorkInstructions: ...
    def AddUpdatingSharedParameter(self, parameterId: ElementId) -> None: ...
    def CanBeHookNormal(self, barIndex: int, end: int, normal: XYZ) -> bool: ...
    def DisconnectFromServer(self) -> None: ...
    def Dispose(self) -> None: ...
    def GetCouplerIdAtIndex(self, barPositionIndex: int, end: int) -> ElementId: ...
    def GetCustomDistributionPath(self) -> IList_1[Curve]: ...
    def GetEndTreatmentTypeIdAtIndex(self, barPositionIndex: int, end: int) -> ElementId: ...
    def GetHookOrientationAngle(self, end: int) -> float: ...
    def GetHookOrientationAngleAtIndex(self, barPositionIndex: int, end: int) -> float: ...
    def GetHookOrientationAtIndex(self, barPositionIndex: int, end: int) -> RebarHookOrientation: ...
    def GetHookPlaneNormalForBarIdx(self, end: int, barPositionIndex: int) -> XYZ: ...
    def GetHookTypeIdAtIndex(self, barPositionIndex: int, end: int) -> ElementId: ...
    def GetServerGUID(self) -> Guid: ...
    def GetShapeIdAtIndex(self, barPositionIndex: int) -> ElementId: ...
    def GetUpdatingSharedParameters(self) -> IList_1[ElementId]: ...
    def HasValidServer(self) -> bool: ...
    def IsBarMatchedWithShapeInReverseOrder(self, barPositionIndex: int) -> bool: ...
    def IsUnconstrained(self) -> bool: ...
    def RemoveUpdatingSharedParameter(self, parameterId: ElementId) -> None: ...
    def SetHookOrientationAngle(self, end: int, angle: float) -> None: ...
    def SetHookPlaneNormalForBarIdx(self, end: int, barPositionIndex: int, hookNormal: XYZ) -> None: ...
    def SetLayoutAsFixedNumber(self, numberOfBars: int) -> None: ...
    def SetLayoutAsMaximumSpacing(self, spacing: float) -> None: ...
    def SetLayoutAsMinimumClearSpacing(self, spacing: float) -> None: ...
    def SetLayoutAsNumberWithSpacing(self, numberOfBars: int, spacing: float) -> None: ...
    def SetLayoutAsSingle(self) -> None: ...
    def SetReportedShape(self, rebarShapeId: ElementId) -> None: ...
    # Skipped SetCurves due to it being static, abstract and generic.

    SetCurves : SetCurves_MethodGroup
    class SetCurves_MethodGroup:
        @typing.overload
        def __call__(self, curves: IList_1[IList_1[Curve]]) -> RebarFreeFormValidationResult:...
        @typing.overload
        def __call__(self, curves: IList_1[CurveLoop]) -> RebarFreeFormValidationResult:...



class RebarFreeFormValidationResult(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Success : RebarFreeFormValidationResult # 0
    Undefined : RebarFreeFormValidationResult # 1
    NullCurve : RebarFreeFormValidationResult # 2
    UnboundCurve : RebarFreeFormValidationResult # 3
    InvalidLoop : RebarFreeFormValidationResult # 4
    RebarCantBeBent : RebarFreeFormValidationResult # 5


class RebarGeometryType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ShapeBased : RebarGeometryType # 0
    FreeForm : RebarGeometryType # 1


class RebarHandleNameData(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...
    def GetCustomHandleTag(self) -> int: ...
    def SetCustomHandleName(self, customHandleName: str) -> None: ...


class RebarHandlePositionData(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...
    def GetBarGeometry(self, barIndex: int) -> IList_1[Curve]: ...
    def GetDistributionPath(self) -> IList_1[Curve]: ...
    def GetNumberOfBars(self) -> int: ...
    def SetPosition(self, handleTag: int, position: XYZ) -> None: ...


class RebarHandlesData(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    def AddCustomHandle(self, customHandleTag: int) -> None: ...
    def Dispose(self) -> None: ...
    def GetCustomHandles(self) -> IList_1[int]: ...
    def GetEndHandle(self) -> int: ...
    def GetStartHandle(self) -> int: ...
    def SetEndHandle(self, endHandleTag: int) -> None: ...
    def SetStartHandle(self, startHandleTag: int) -> None: ...


class RebarHandleType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    RebarPlane : RebarHandleType # 0
    StartOfBar : RebarHandleType # 1
    EndOfBar : RebarHandleType # 2
    Edge : RebarHandleType # 3
    OutOfPlaneExtent : RebarHandleType # 4
    CustomHandle : RebarHandleType # 5
    Undefined : RebarHandleType # -1


class RebarHookOrientation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Left : RebarHookOrientation # 1
    Right : RebarHookOrientation # -1


class RebarHookType(ElementType):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def HookAngle(self) -> float: ...
    @HookAngle.setter
    def HookAngle(self, value: float) -> float: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def StraightLineMultiplier(self) -> float: ...
    @StraightLineMultiplier.setter
    def StraightLineMultiplier(self, value: float) -> float: ...
    @property
    def Style(self) -> RebarStyle: ...
    @Style.setter
    def Style(self, value: RebarStyle) -> RebarStyle: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(doc: Document, angle: float, multiplier: float) -> RebarHookType: ...
    @staticmethod
    def CreateDefaultRebarHookType(ADoc: Document) -> ElementId: ...
    def GetDefaultHookExtension(self, barDiameter: float) -> float: ...
    def GetHookExtensionLength(self, barType: RebarBarType) -> float: ...
    def IsOffsetLengthRequired(self) -> bool: ...


class RebarHostCategory(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Other : RebarHostCategory # 0
    Part : RebarHostCategory # 1
    StructuralColumn : RebarHostCategory # 2
    StructuralFraming : RebarHostCategory # 3
    Wall : RebarHostCategory # 4
    Floor : RebarHostCategory # 5
    StructuralFoundation : RebarHostCategory # 6
    Stairs : RebarHostCategory # 7
    SlabEdge : RebarHostCategory # 8


class RebarHostData(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...
    def GetAreaReinforcementsInHost(self) -> IList_1[AreaReinforcement]: ...
    def GetCommonCoverType(self) -> RebarCoverType: ...
    def GetCoverType(self, face: Reference) -> RebarCoverType: ...
    def GetExposedFaces(self) -> IList_1[Reference]: ...
    def GetFabricAreasInHost(self) -> IList_1[FabricArea]: ...
    def GetFabricSheetsInHost(self) -> IList_1[FabricSheet]: ...
    def GetPathReinforcementsInHost(self) -> IList_1[PathReinforcement]: ...
    def GetRebarContainersInHost(self) -> IList_1[RebarContainer]: ...
    @staticmethod
    def GetRebarHostData(host: Element) -> RebarHostData: ...
    def GetRebarsInHost(self) -> IList_1[Rebar]: ...
    def IsFaceExposed(self, face: Reference) -> bool: ...
    @staticmethod
    def IsReferenceContainedByAValidHost(doc: Document, reference: Reference) -> bool: ...
    def SetCommonCoverType(self, coverType: RebarCoverType) -> None: ...
    def SetCoverType(self, face: Reference, coverType: RebarCoverType) -> None: ...
    # Skipped IsValidHost due to it being static, abstract and generic.

    IsValidHost : IsValidHost_MethodGroup
    class IsValidHost_MethodGroup:
        @typing.overload
        def __call__(self) -> bool:...
        @typing.overload
        def __call__(self, element: Element) -> bool:...



class RebarInSystem(Element):
    @property
    def ArrayLength(self) -> float: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BarsOnNormalSide(self) -> bool: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LayoutRule(self) -> RebarLayoutRule: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MaxSpacing(self) -> float: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Normal(self) -> XYZ: ...
    @property
    def NumberOfBarPositions(self) -> int: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def Quantity(self) -> int: ...
    @property
    def RebarShapeId(self) -> ElementId: ...
    @property
    def ScheduleMark(self) -> str: ...
    @ScheduleMark.setter
    def ScheduleMark(self, value: str) -> str: ...
    @property
    def SystemId(self) -> ElementId: ...
    @property
    def TotalLength(self) -> float: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def Volume(self) -> float: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def CanApplyPresentationMode(self, dBView: View) -> bool: ...
    def CanEditIndividualBars(self) -> bool: ...
    def ClearPresentationMode(self, dBView: View) -> None: ...
    def DoesBarExistAtPosition(self, barPosition: int) -> bool: ...
    def FindMatchingPredefinedPresentationMode(self, dBView: View) -> RebarPresentationMode: ...
    def GetBarIndexFromReference(self, barReference: Reference) -> int: ...
    def GetBarPositionTransform(self, barPositionIndex: int) -> Transform: ...
    def GetBendData(self) -> RebarBendData: ...
    def GetCenterlineCurves(self, adjustForSelfIntersection: bool, suppressHooks: bool, suppressBendRadius: bool) -> IList_1[Curve]: ...
    def GetDistributionPath(self) -> Line: ...
    def GetHookTypeId(self, end: int) -> ElementId: ...
    def GetHostId(self) -> ElementId: ...
    def GetMovedBarTransform(self, barPositionIndex: int) -> Transform: ...
    def GetPresentationMode(self, dBView: View) -> RebarPresentationMode: ...
    def GetReinforcementRoundingManager(self) -> RebarRoundingManager: ...
    def GetTransformedCenterlineCurves(self, adjustForSelfIntersection: bool, suppressHooks: bool, suppressBendRadius: bool, barPositionIndex: int) -> IList_1[Curve]: ...
    def HasPresentationOverrides(self, dBView: View) -> bool: ...
    def IsBarHidden(self, view: View, barIndex: int) -> bool: ...
    def IsRebarInSection(self, dBView: View) -> bool: ...
    def IsSolidInView(self, view: View3D) -> bool: ...
    def IsUnobscuredInView(self, view: View) -> bool: ...
    def MoveBarInSet(self, barPositionIndex: int, moveTransform: Transform) -> None: ...
    def ResetMovedBarTransform(self, barPositionIndex: int) -> None: ...
    def SetBarHiddenStatus(self, view: View, barIndex: int, hide: bool) -> None: ...
    def SetBarIncluded(self, include: bool, barPositionIndex: int) -> None: ...
    def SetPresentationMode(self, dBView: View, presentationMode: RebarPresentationMode) -> None: ...
    def SetSolidInView(self, view: View3D, solid: bool) -> None: ...
    def SetUnobscuredInView(self, view: View, unobscured: bool) -> None: ...


class RebarLayoutRule(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Single : RebarLayoutRule # 0
    FixedNumber : RebarLayoutRule # 1
    MaximumSpacing : RebarLayoutRule # 2
    NumberWithSpacing : RebarLayoutRule # 3
    MinimumClearSpacing : RebarLayoutRule # 4


class RebarPresentationMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    All : RebarPresentationMode # 0
    FirstLast : RebarPresentationMode # 1
    Middle : RebarPresentationMode # 2
    Select : RebarPresentationMode # 3


class RebarPropagation(abc.ABC):
    @staticmethod
    def AlignByFace(doc: Document, sourceRebars: IList_1[Rebar], sourceFaceReference: Reference, destinationFaceReference: Reference) -> ISet_1[ElementId]: ...
    @staticmethod
    def AlignByHost(doc: Document, sourceRebars: IList_1[Rebar], destinationHost: Element) -> ISet_1[ElementId]: ...


class RebarReinforcementData(ReinforcementData):
    @property
    def End(self) -> int: ...
    @End.setter
    def End(self, value: int) -> int: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def RebarId(self) -> ElementId: ...
    @RebarId.setter
    def RebarId(self, value: ElementId) -> ElementId: ...
    @staticmethod
    def Create(rebarId: ElementId, iEnd: int) -> RebarReinforcementData: ...


class RebarRoundingManager(ReinforcementRoundingManager):
    @property
    def ApplicableReinforcementRoundingSource(self) -> ReinforcementRoundingSource: ...
    @property
    def ApplicableSegmentLengthRounding(self) -> float: ...
    @property
    def ApplicableSegmentLengthRoundingMethod(self) -> RoundingMethod: ...
    @property
    def ApplicableTotalLengthRounding(self) -> float: ...
    @property
    def ApplicableTotalLengthRoundingMethod(self) -> RoundingMethod: ...
    @property
    def Element(self) -> Element: ...
    @property
    def IsActiveOnElement(self) -> bool: ...
    @IsActiveOnElement.setter
    def IsActiveOnElement(self, value: bool) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def SegmentLengthRounding(self) -> float: ...
    @SegmentLengthRounding.setter
    def SegmentLengthRounding(self, value: float) -> float: ...
    @property
    def SegmentLengthRoundingMethod(self) -> RoundingMethod: ...
    @SegmentLengthRoundingMethod.setter
    def SegmentLengthRoundingMethod(self, value: RoundingMethod) -> RoundingMethod: ...
    @property
    def TotalLengthRounding(self) -> float: ...
    @TotalLengthRounding.setter
    def TotalLengthRounding(self, value: float) -> float: ...
    @property
    def TotalLengthRoundingMethod(self) -> RoundingMethod: ...
    @TotalLengthRoundingMethod.setter
    def TotalLengthRoundingMethod(self, value: RoundingMethod) -> RoundingMethod: ...


class RebarShape(ElementType):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def HigherEnd(self) -> int: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def RebarStyle(self) -> RebarStyle: ...
    @property
    def ShapeFamilyId(self) -> ElementId: ...
    @property
    def SimpleArc(self) -> bool: ...
    @property
    def SimpleLine(self) -> bool: ...
    @property
    def StirrupTieAttachment(self) -> StirrupTieAttachmentType: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def GetAllowed(self, barType: RebarBarType) -> bool: ...
    def GetCurvesForBrowser(self) -> IList_1[Curve]: ...
    def GetDefaultHookAngle(self, index: int) -> int: ...
    def GetDefaultHookOrientation(self, index: int) -> RebarHookOrientation: ...
    def GetEndTreatmentTypeId(self, iEnd: int) -> ElementId: ...
    def GetHookRotationAngle(self, iEnd: int) -> float: ...
    def GetMultiplanarDefinition(self) -> RebarShapeMultiplanarDefinition: ...
    def GetRebarShapeDefinition(self) -> RebarShapeDefinition: ...
    def HasEndTreatment(self) -> bool: ...
    def IsSameShapeIgnoringHooks(self, otherShape: RebarShape) -> bool: ...
    def SetAllowed(self, barType: RebarBarType, allowed: bool) -> None: ...
    def SetEndTreatmentTypeId(self, endTreatmentId: ElementId, iEnd: int) -> None: ...
    def SetHookRotationAngle(self, hookRotationAngle: float, iEnd: int) -> None: ...
    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        @typing.overload
        def __call__(self, doc: Document, definition: RebarShapeDefinition, multiplanarDefinition: RebarShapeMultiplanarDefinition, style: RebarStyle, attachmentType: StirrupTieAttachmentType, startHookAngle: int, startHookOrientation: RebarHookOrientation, endHookAngle: int, endHookOrientation: RebarHookOrientation, higherEnd: int) -> RebarShape:...
        @typing.overload
        def __call__(self, doc: Document, definition: RebarShapeDefinition, multiplanarDefinition: RebarShapeMultiplanarDefinition, style: RebarStyle, attachmentType: StirrupTieAttachmentType, startHookAngle: int, startHookOrientation: RebarHookOrientation, endHookAngle: int, endHookOrientation: RebarHookOrientation, higherEnd: int, hookRotationAngleAtStart: float, hookRotationAngleAtEnd: float, endTreatmentTypeIdAtStart: ElementId, endTreatmentTypeIdAtEnd: ElementId) -> RebarShape:...



class RebarShapeArcReferenceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Centerline : RebarShapeArcReferenceType # 0
    External : RebarShapeArcReferenceType # 1
    Internal : RebarShapeArcReferenceType # -1


class RebarShapeBendAngle(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Acute : RebarShapeBendAngle # 1
    Right : RebarShapeBendAngle # 2
    Obtuse : RebarShapeBendAngle # 3


class RebarShapeConstraint(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...
    def GetParamId(self) -> ElementId: ...


class RebarShapeConstraint180DegreeBendArcLength(RebarShapeConstraint):
    def __init__(self, paramId: ElementId) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...


class RebarShapeConstraint180DegreeBendRadius(RebarShapeConstraint):
    def __init__(self, paramId: ElementId, refType: RebarShapeArcReferenceType) -> None: ...
    @property
    def ArcReferenceType(self) -> RebarShapeArcReferenceType: ...
    @property
    def IsValidObject(self) -> bool: ...


class RebarShapeConstraint180DegreeDefaultBend(RebarShapeConstraint):
    def __init__(self) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...


class RebarShapeConstraintAngleFromFixedDir(RebarShapeConstraint):
    def __init__(self, paramId: ElementId, sign: int, direction: UV) -> None: ...
    @property
    def Direction(self) -> UV: ...
    @Direction.setter
    def Direction(self, value: UV) -> UV: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Sign(self) -> int: ...
    @Sign.setter
    def Sign(self, value: int) -> int: ...


class RebarShapeConstraintArcLength(RebarShapeConstraint):
    def __init__(self, paramId: ElementId) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...


class RebarShapeConstraintChordLength(RebarShapeConstraint):
    def __init__(self, paramId: ElementId) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...


class RebarShapeConstraintCircumference(RebarShapeConstraint):
    def __init__(self, paramId: ElementId, refType: RebarShapeArcReferenceType) -> None: ...
    @property
    def ArcReferenceType(self) -> RebarShapeArcReferenceType: ...
    @property
    def IsValidObject(self) -> bool: ...


class RebarShapeConstraintDiameter(RebarShapeConstraint):
    def __init__(self, paramId: ElementId, refType: RebarShapeArcReferenceType) -> None: ...
    @property
    def ArcReferenceType(self) -> RebarShapeArcReferenceType: ...
    @property
    def IsValidObject(self) -> bool: ...


class RebarShapeConstraintFixedSegmentDir(RebarShapeConstraint):
    def __init__(self, dir: UV) -> None: ...
    @property
    def Direction(self) -> UV: ...
    @Direction.setter
    def Direction(self, value: UV) -> UV: ...
    @property
    def IsValidObject(self) -> bool: ...


class RebarShapeConstraintProjectedSegmentLength(RebarShapeConstraint):
    def __init__(self, paramId: ElementId, direction: UV, tripleProductSign: int, refType0: RebarShapeSegmentEndReferenceType, refType1: RebarShapeSegmentEndReferenceType) -> None: ...
    @property
    def Direction(self) -> UV: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def TripleProductSign(self) -> int: ...
    def GetSegmentEndReferenceType(self, index: int) -> RebarShapeSegmentEndReferenceType: ...


class RebarShapeConstraintRadius(RebarShapeConstraint):
    def __init__(self, paramId: ElementId, refType: RebarShapeArcReferenceType) -> None: ...
    @property
    def ArcReferenceType(self) -> RebarShapeArcReferenceType: ...
    @property
    def IsValidObject(self) -> bool: ...


class RebarShapeConstraintSagittaLength(RebarShapeConstraint):
    def __init__(self, paramId: ElementId) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...


class RebarShapeConstraintSegmentLength(RebarShapeConstraint):
    def __init__(self, paramId: ElementId, refType0: RebarShapeSegmentEndReferenceType, refType1: RebarShapeSegmentEndReferenceType) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...
    def GetSegmentEndReferenceType(self, index: int) -> RebarShapeSegmentEndReferenceType: ...


class RebarShapeDefinition(IDisposable):
    @property
    def Complete(self) -> bool: ...
    @property
    def IsPlanar(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    def AddFormulaParameter(self, paramId: ElementId, formula: str) -> None: ...
    def AddParameter(self, paramId: ElementId, defaultValue: float) -> None: ...
    def CheckDefaultParameterValues(self, bendRadius: float, barDiameter: float) -> bool: ...
    def Dispose(self) -> None: ...
    def GetParameterDefaultValue(self, paramId: ElementId) -> float: ...
    def GetParameterFormula(self, paramId: ElementId) -> str: ...
    def GetParameters(self) -> IList_1[ElementId]: ...
    def HasParameter(self, paramId: ElementId) -> bool: ...
    def RemoveParameter(self, paramId: ElementId) -> None: ...
    def SetParameterDefaultValue(self, paramId: ElementId, value: float) -> None: ...
    def SetParameterFormula(self, paramId: ElementId, formula: str) -> None: ...


class RebarShapeDefinitionByArc(RebarShapeDefinition):
    @typing.overload
    def __init__(self, doc: Document, height: float, pitch: float, baseFinishingTurns: int, topFinishingTurns: int) -> None: ...
    @typing.overload
    def __init__(self, doc: Document, type: RebarShapeDefinitionByArcType) -> None: ...
    @property
    def Complete(self) -> bool: ...
    @property
    def IsPlanar(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Type(self) -> RebarShapeDefinitionByArcType: ...
    @Type.setter
    def Type(self, value: RebarShapeDefinitionByArcType) -> RebarShapeDefinitionByArcType: ...
    def AddConstraintArcLength(self, paramId: ElementId) -> None: ...
    def AddConstraintChordLength(self, paramId: ElementId) -> None: ...
    def AddConstraintCircumference(self, paramId: ElementId, arcRefType: RebarShapeArcReferenceType) -> None: ...
    def AddConstraintDiameter(self, paramId: ElementId, arcRefType: RebarShapeArcReferenceType) -> None: ...
    def AddConstraintRadius(self, paramId: ElementId, arcRefType: RebarShapeArcReferenceType) -> None: ...
    def AddConstraintSagittaLength(self, paramId: ElementId) -> None: ...
    def GetConstraints(self) -> IList_1[RebarShapeConstraint]: ...
    def SetArcTypeSpiral(self, height: float, pitch: float, baseFinishingTurns: int, topFinishingTurns: int) -> None: ...
    def SetConstraints(self, constraints: IList_1[RebarShapeConstraint]) -> None: ...


class RebarShapeDefinitionByArcType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Arc : RebarShapeDefinitionByArcType # 0
    LappedCircle : RebarShapeDefinitionByArcType # 1
    Spiral : RebarShapeDefinitionByArcType # 2


class RebarShapeDefinitionBySegments(RebarShapeDefinition):
    def __init__(self, doc: Document, numberOfSegments: int) -> None: ...
    @property
    def Complete(self) -> bool: ...
    @property
    def IsPlanar(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def MajorSegmentIndex(self) -> int: ...
    @MajorSegmentIndex.setter
    def MajorSegmentIndex(self, value: int) -> int: ...
    @property
    def NumberOfSegments(self) -> int: ...
    @property
    def NumberOfVertices(self) -> int: ...
    def AddBendDefaultRadius(self, vertexIndex: int, turn: RebarShapeVertexTurn, angle: RebarShapeBendAngle) -> None: ...
    def AddBendVariableRadius(self, vertexIndex: int, turn: RebarShapeVertexTurn, angle: RebarShapeBendAngle, paramId: ElementId, measureIncludingBarThickness: bool) -> None: ...
    def AddConstraintParallelToSegment(self, iSegment: int, paramId: ElementId, measureToOutsideOfBend0: bool, measureToOutsideOfBend1: bool) -> None: ...
    def AddConstraintToSegment(self, iSegment: int, paramId: ElementId, constraintDirCoordX: float, constraintDirCoordY: float, signOfZCoordOfCrossProductOfConstraintDirBySegmentDir: int, measureToOutsideOfBend0: bool, measureToOutsideOfBend1: bool) -> None: ...
    def AddListeningDimensionBendToBend(self, paramId: ElementId, constraintDirCoordX: float, constraintDirCoordY: float, iSegment0: int, iEnd0: int, iSegment1: int, iEnd1: int) -> None: ...
    def AddListeningDimensionSegmentToBend(self, paramId: ElementId, constraintDirCoordX: float, constraintDirCoordY: float, iSegment0: int, iSegment1: int, iEnd1: int) -> None: ...
    def AddListeningDimensionSegmentToSegment(self, paramId: ElementId, constraintDirCoordX: float, constraintDirCoordY: float, iSegment0: int, iSegment1: int) -> None: ...
    def GetSegment(self, segmentIndex: int) -> RebarShapeSegment: ...
    def GetVertex(self, vertexIndex: int) -> RebarShapeVertex: ...
    def RemoveParameterFromSegment(self, iSegment: int, paramId: ElementId) -> None: ...
    def SetSegmentFixedDirection(self, iSegment: int, vecCoordX: float, vecCoordY: float) -> None: ...
    def SetSegmentVariableDirection(self, iSegment: int) -> None: ...
    # Skipped SetSegmentAs180DegreeBend due to it being static, abstract and generic.

    SetSegmentAs180DegreeBend : SetSegmentAs180DegreeBend_MethodGroup
    class SetSegmentAs180DegreeBend_MethodGroup:
        @typing.overload
        def __call__(self, iSegment: int) -> None:...
        @typing.overload
        def __call__(self, iSegment: int, paramId: ElementId, measureToOutsideOfBend: bool) -> None:...



class RebarShapeDrivenAccessor(IDisposable):
    @property
    def ArrayLength(self) -> float: ...
    @ArrayLength.setter
    def ArrayLength(self, value: float) -> float: ...
    @property
    def BarsOnNormalSide(self) -> bool: ...
    @BarsOnNormalSide.setter
    def BarsOnNormalSide(self, value: bool) -> bool: ...
    @property
    def BaseFinishingTurns(self) -> int: ...
    @BaseFinishingTurns.setter
    def BaseFinishingTurns(self, value: int) -> int: ...
    @property
    def Height(self) -> float: ...
    @Height.setter
    def Height(self, value: float) -> float: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def MultiplanarDepth(self) -> float: ...
    @MultiplanarDepth.setter
    def MultiplanarDepth(self, value: float) -> float: ...
    @property
    def Normal(self) -> XYZ: ...
    @property
    def Pitch(self) -> float: ...
    @Pitch.setter
    def Pitch(self, value: float) -> float: ...
    @property
    def TopFinishingTurns(self) -> int: ...
    @TopFinishingTurns.setter
    def TopFinishingTurns(self, value: int) -> int: ...
    def ComputeDrivingCurves(self) -> IList_1[Curve]: ...
    def Dispose(self) -> None: ...
    def FlipRebarSet(self) -> None: ...
    def GetBarPositionTransform(self, barPositionIndex: int) -> Transform: ...
    def GetDistributionPath(self) -> Line: ...
    def ScaleToBox(self, origin: XYZ, xVec: XYZ, yVec: XYZ) -> None: ...
    def ScaleToBoxFor3D(self, origin: XYZ, xVec: XYZ, yVec: XYZ, height: float) -> None: ...
    def SetLayoutAsFixedNumber(self, numberOfBarPositions: int, arrayLength: float, barsOnNormalSide: bool, includeFirstBar: bool, includeLastBar: bool) -> None: ...
    def SetLayoutAsMaximumSpacing(self, spacing: float, arrayLength: float, barsOnNormalSide: bool, includeFirstBar: bool, includeLastBar: bool) -> None: ...
    def SetLayoutAsMinimumClearSpacing(self, spacing: float, arrayLength: float, barsOnNormalSide: bool, includeFirstBar: bool, includeLastBar: bool) -> None: ...
    def SetLayoutAsNumberWithSpacing(self, numberOfBarPositions: int, spacing: float, barsOnNormalSide: bool, includeFirstBar: bool, includeLastBar: bool) -> None: ...
    def SetLayoutAsSingle(self) -> None: ...
    def SetRebarShapeId(self, shapeId: ElementId) -> None: ...


class RebarShapeMultiplanarDefinition(IDisposable):
    def __init__(self, outOfPlaneBendDiameter: float) -> None: ...
    @property
    def DepthParamId(self) -> ElementId: ...
    @DepthParamId.setter
    def DepthParamId(self, value: ElementId) -> ElementId: ...
    @property
    def IsDuplicateShapePresent(self) -> bool: ...
    @property
    def IsEndConnectorPresent(self) -> bool: ...
    @property
    def IsStartConnectorPresent(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def OutOfPlaneBendDiameter(self) -> float: ...
    @OutOfPlaneBendDiameter.setter
    def OutOfPlaneBendDiameter(self, value: float) -> float: ...
    def Dispose(self) -> None: ...
    def SetPresenceOfSegments(self, isDuplicateShapePresent: bool, isStartConnectorPresent: bool, isEndConnectorPresent: bool) -> None: ...


class RebarShapeParameters(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...
    @staticmethod
    def GetAllRebarShapeParameters(doc: Document) -> IList_1[ElementId]: ...
    @staticmethod
    def GetElementIdForExternalDefinition(doc: Document, externalDefinition: ExternalDefinition) -> ElementId: ...
    @staticmethod
    def GetExternalDefinitionForElementId(doc: Document, paramId: ElementId, definitionFile: DefinitionFile) -> ExternalDefinition: ...
    @staticmethod
    def GetOrCreateElementIdForExternalDefinition(doc: Document, externalDefinition: ExternalDefinition) -> ElementId: ...
    @staticmethod
    def IsValidExternalDefinition(param: ExternalDefinition) -> bool: ...


class RebarShapeSegment(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...
    def GetConstraints(self) -> IList_1[RebarShapeConstraint]: ...
    def SetConstraints(self, constraints: IList_1[RebarShapeConstraint]) -> None: ...


class RebarShapeSegmentEndReferenceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Straight : RebarShapeSegmentEndReferenceType # 0
    Exterior : RebarShapeSegmentEndReferenceType # 1


class RebarShapeVertex(IDisposable):
    @property
    def BendAngle(self) -> RebarShapeBendAngle: ...
    @BendAngle.setter
    def BendAngle(self, value: RebarShapeBendAngle) -> RebarShapeBendAngle: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Turn(self) -> RebarShapeVertexTurn: ...
    @Turn.setter
    def Turn(self, value: RebarShapeVertexTurn) -> RebarShapeVertexTurn: ...
    def Dispose(self) -> None: ...
    def GetConstraints(self) -> IList_1[RebarShapeConstraint]: ...
    def SetConstraints(self, constraints: IList_1[RebarShapeConstraint]) -> None: ...


class RebarShapeVertexTurn(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Default : RebarShapeVertexTurn # 0
    Left : RebarShapeVertexTurn # 1
    Right : RebarShapeVertexTurn # -1


class RebarStyle(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Standard : RebarStyle # 0
    StirrupTie : RebarStyle # 1


class RebarSystemSpanSymbol(IndependentTag):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def HasLeader(self) -> bool: ...
    @HasLeader.setter
    def HasLeader(self, value: bool) -> bool: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsMaterialTag(self) -> bool: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsMulticategoryTag(self) -> bool: ...
    @property
    def IsOrphaned(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LeaderEndCondition(self) -> LeaderEndCondition: ...
    @LeaderEndCondition.setter
    def LeaderEndCondition(self, value: LeaderEndCondition) -> LeaderEndCondition: ...
    @property
    def LeadersPresentationMode(self) -> LeadersPresentationMode: ...
    @LeadersPresentationMode.setter
    def LeadersPresentationMode(self, value: LeadersPresentationMode) -> LeadersPresentationMode: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MergeElbows(self) -> bool: ...
    @MergeElbows.setter
    def MergeElbows(self, value: bool) -> bool: ...
    @property
    def MultiLeader(self) -> bool: ...
    @property
    def MultiReferenceAnnotationId(self) -> ElementId: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def RotationAngle(self) -> float: ...
    @RotationAngle.setter
    def RotationAngle(self, value: float) -> float: ...
    @property
    def TagHeadPosition(self) -> XYZ: ...
    @TagHeadPosition.setter
    def TagHeadPosition(self, value: XYZ) -> XYZ: ...
    @property
    def TagOrientation(self) -> TagOrientation: ...
    @TagOrientation.setter
    def TagOrientation(self, value: TagOrientation) -> TagOrientation: ...
    @property
    def TagText(self) -> str: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(document: Document, viewId: ElementId, hostId: LinkElementId, point: XYZ, symbolId: ElementId) -> RebarSystemSpanSymbol: ...


class RebarTrimExtendData(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    def CanAddBarGeometry(self) -> bool: ...
    def ClearAllAddedBarGeometry(self) -> None: ...
    def CreateEndConstraint(self, targetReferences: IList_1[Reference], isConstraintToCover: bool, offsetValue: float) -> bool: ...
    def CreateStartConstraint(self, targetReferences: IList_1[Reference], isConstraintToCover: bool, offsetValue: float) -> bool: ...
    def Dispose(self) -> None: ...
    def GetAddedBarGeometry(self, barIndex: int) -> IList_1[Curve]: ...
    def GetNumberOfBarGeometry(self) -> int: ...
    def GetRebarUpdateCurvesData(self) -> RebarUpdateCurvesData: ...
    # Skipped AddBarGeometry due to it being static, abstract and generic.

    AddBarGeometry : AddBarGeometry_MethodGroup
    class AddBarGeometry_MethodGroup:
        @typing.overload
        def __call__(self, curves: IList_1[Curve]) -> RebarFreeFormValidationResult:...
        @typing.overload
        def __call__(self, curves: CurveLoop) -> RebarFreeFormValidationResult:...



class RebarUpdateCurvesData(IDisposable):
    @property
    def AreWorkshopInstructionsChanged(self) -> bool: ...
    @property
    def ErrorMessage(self) -> str: ...
    @ErrorMessage.setter
    def ErrorMessage(self, value: str) -> str: ...
    @property
    def HostMirrored(self) -> bool: ...
    @HostMirrored.setter
    def HostMirrored(self, value: bool) -> bool: ...
    @property
    def IsAttachmentTypeChanged(self) -> bool: ...
    @property
    def IsBarsNumberChanged(self) -> bool: ...
    @property
    def IsBendingRadiusChanged(self) -> bool: ...
    @property
    def IsEndConstraintChanged(self) -> bool: ...
    @property
    def IsLayoutChanged(self) -> bool: ...
    @property
    def IsReversed(self) -> bool: ...
    @IsReversed.setter
    def IsReversed(self, value: bool) -> bool: ...
    @property
    def IsSpacingChanged(self) -> bool: ...
    @property
    def IsStartConstraintChanged(self) -> bool: ...
    @property
    def IsStyleChanged(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Spacing(self) -> float: ...
    @property
    def WorkshopInstructions(self) -> RebarWorkInstructions: ...
    def Dispose(self) -> None: ...
    def GetAttachmentType(self) -> StirrupTieAttachmentType: ...
    def GetBarGeometry(self, barIndex: int) -> IList_1[Curve]: ...
    def GetBarModelDiameter(self) -> float: ...
    def GetBarNominalDiameter(self) -> float: ...
    def GetBarsNumber(self) -> int: ...
    def GetBendingRadius(self) -> float: ...
    def GetChangedCustomHandles(self) -> IList_1[int]: ...
    def GetChangedSharedParameterGUIDs(self) -> IList_1[Guid]: ...
    def GetCustomConstraints(self) -> IList_1[RebarConstraint]: ...
    def GetDocument(self) -> Document: ...
    def GetEndConstraint(self) -> RebarConstraint: ...
    def GetHookOrientationAngle(self, end: int) -> float: ...
    def GetHookPlaneNormalForBarIdx(self, end: int, barPositionIndex: int) -> XYZ: ...
    def GetHostId(self) -> ElementId: ...
    def GetLayoutRule(self) -> RebarLayoutRule: ...
    def GetNumberOfBars(self) -> int: ...
    def GetRebarId(self) -> ElementId: ...
    def GetRebarStyle(self) -> RebarStyle: ...
    def GetStartConstraint(self) -> RebarConstraint: ...
    def SetHookOrientationAngle(self, end: int, angle: float) -> None: ...
    def SetHookPlaneNormalForBarIdx(self, end: int, barPositionIndex: int, hookNormal: XYZ) -> None: ...


class RebarWorkInstructions(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Bent : RebarWorkInstructions # 0
    Straight : RebarWorkInstructions # 1


class ReinforcementAbbreviationObjectType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Area : ReinforcementAbbreviationObjectType # 0
    Path : ReinforcementAbbreviationObjectType # 1


class ReinforcementAbbreviationTag(IDisposable):
    def __init__(self, typeTag: ReinforcementAbbreviationTagType, abbreviationTag: str) -> None: ...
    @property
    def AbbreviationTag(self) -> str: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def TypeTag(self) -> ReinforcementAbbreviationTagType: ...
    def Dispose(self) -> None: ...


class ReinforcementAbbreviationTagType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AreaReinforcementTopMajor : ReinforcementAbbreviationTagType # 0
    AreaReinforcementTopMinor : ReinforcementAbbreviationTagType # 1
    AreaReinforcementBottomMajor : ReinforcementAbbreviationTagType # 2
    AreaReinforcementBottomMinor : ReinforcementAbbreviationTagType # 3
    AreaReinforcementInteriorMajor : ReinforcementAbbreviationTagType # 4
    AreaReinforcementInteriorMinor : ReinforcementAbbreviationTagType # 5
    AreaReinforcementExteriorMajor : ReinforcementAbbreviationTagType # 6
    AreaReinforcementExteriorMinor : ReinforcementAbbreviationTagType # 7
    AreaReinforcementLayerEachWay : ReinforcementAbbreviationTagType # 8
    AreaReinforcementLayerEachFace : ReinforcementAbbreviationTagType # 9
    PathReinforcementTop : ReinforcementAbbreviationTagType # 10
    PathReinforcementBottom : ReinforcementAbbreviationTagType # 11
    PathReinforcementInterior : ReinforcementAbbreviationTagType # 12
    PathReinforcementExterior : ReinforcementAbbreviationTagType # 13
    PathReinforcementAlternating : ReinforcementAbbreviationTagType # 14
    PathReinforcementAlternatingBarOffset : ReinforcementAbbreviationTagType # 15


class ReinforcementBarOrientation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    TopOrExterior : ReinforcementBarOrientation # 0
    NearSide : ReinforcementBarOrientation # 1
    BottomOrInterior : ReinforcementBarOrientation # 2
    FarSide : ReinforcementBarOrientation # 3


class ReinforcementData(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...


class ReinforcementRoundingManager(IDisposable):
    @property
    def Element(self) -> Element: ...
    @property
    def IsActiveOnElement(self) -> bool: ...
    @IsActiveOnElement.setter
    def IsActiveOnElement(self, value: bool) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...
    def GetLengthUnitTypeId(self) -> ForgeTypeId: ...


class ReinforcementRoundingSource(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : ReinforcementRoundingSource # 0
    ReinforcementSettings : ReinforcementRoundingSource # 1
    Type : ReinforcementRoundingSource # 2
    Element : ReinforcementRoundingSource # 3


class ReinforcementSettings(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def HostStructuralRebar(self) -> bool: ...
    @HostStructuralRebar.setter
    def HostStructuralRebar(self, value: bool) -> bool: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberVaryingLengthRebarsIndividually(self) -> bool: ...
    @NumberVaryingLengthRebarsIndividually.setter
    def NumberVaryingLengthRebarsIndividually(self, value: bool) -> bool: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def RebarPresentationInSection(self) -> RebarPresentationMode: ...
    @RebarPresentationInSection.setter
    def RebarPresentationInSection(self, value: RebarPresentationMode) -> RebarPresentationMode: ...
    @property
    def RebarPresentationInView(self) -> RebarPresentationMode: ...
    @RebarPresentationInView.setter
    def RebarPresentationInView(self, value: RebarPresentationMode) -> RebarPresentationMode: ...
    @property
    def RebarShapeDefinesEndTreatments(self) -> bool: ...
    @RebarShapeDefinesEndTreatments.setter
    def RebarShapeDefinesEndTreatments(self, value: bool) -> bool: ...
    @property
    def RebarShapeDefinesHooks(self) -> bool: ...
    @RebarShapeDefinesHooks.setter
    def RebarShapeDefinesHooks(self, value: bool) -> bool: ...
    @property
    def RebarVaryingLengthNumberSuffix(self) -> str: ...
    @RebarVaryingLengthNumberSuffix.setter
    def RebarVaryingLengthNumberSuffix(self, value: str) -> str: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def GetFabricRoundingManager(self) -> FabricRoundingManager: ...
    def GetRebarRoundingManager(self) -> RebarRoundingManager: ...
    def GetReinforcementAbbreviationTag(self, tagType: ReinforcementAbbreviationTagType) -> str: ...
    def GetReinforcementAbbreviationTags(self, objectType: ReinforcementAbbreviationObjectType) -> IList_1[ReinforcementAbbreviationTag]: ...
    @staticmethod
    def GetReinforcementSettings(document: Document) -> ReinforcementSettings: ...
    def IsEqual(self, other: ReinforcementSettings) -> bool: ...
    def SetReinforcementAbbreviationTag(self, tagType: ReinforcementAbbreviationTagType, abbreviationTag: str) -> None: ...


class ReleaseConditions(IDisposable):
    @typing.overload
    def __init__(self, start: bool) -> None: ...
    @typing.overload
    def __init__(self, start: bool, fx: bool, fy: bool, fz: bool, mx: bool, my: bool, mz: bool) -> None: ...
    @property
    def Fx(self) -> bool: ...
    @Fx.setter
    def Fx(self, value: bool) -> bool: ...
    @property
    def Fy(self) -> bool: ...
    @Fy.setter
    def Fy(self, value: bool) -> bool: ...
    @property
    def Fz(self) -> bool: ...
    @Fz.setter
    def Fz(self, value: bool) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Mx(self) -> bool: ...
    @Mx.setter
    def Mx(self, value: bool) -> bool: ...
    @property
    def My(self) -> bool: ...
    @My.setter
    def My(self, value: bool) -> bool: ...
    @property
    def Mz(self) -> bool: ...
    @Mz.setter
    def Mz(self, value: bool) -> bool: ...
    @property
    def Start(self) -> bool: ...
    @Start.setter
    def Start(self, value: bool) -> bool: ...
    def Dispose(self) -> None: ...


class ReleaseType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Fixed : ReleaseType # 0
    Pinned : ReleaseType # 1
    BendingMoment : ReleaseType # 2
    UserDefined : ReleaseType # 3


class StickElementExtension(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BottomOrTop : StickElementExtension # 0
    ReferenceLevel : StickElementExtension # 1
    Plane : StickElementExtension # 2
    Varies : StickElementExtension # 3


class StickElementProjectionY(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LocationLine : StickElementProjectionY # 0
    Left : StickElementProjectionY # 1
    Center : StickElementProjectionY # 2
    Right : StickElementProjectionY # 3
    Plane : StickElementProjectionY # 4
    Varies : StickElementProjectionY # 5


class StickElementProjectionZ(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LocationLine : StickElementProjectionZ # 0
    Top : StickElementProjectionZ # 1
    Center : StickElementProjectionZ # 2
    Bottom : StickElementProjectionZ # 3
    Plane : StickElementProjectionZ # 4
    Varies : StickElementProjectionZ # 5


class StirrupTieAttachmentType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    InteriorFace : StirrupTieAttachmentType # 0
    ExteriorFace : StirrupTieAttachmentType # 1


class StructuralConnectionApplyTo(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BeamsAndBraces : StructuralConnectionApplyTo # 0
    ColumnTop : StructuralConnectionApplyTo # 1
    ColumnBase : StructuralConnectionApplyTo # 2
    Connection : StructuralConnectionApplyTo # 3


class StructuralConnectionApprovalType(ElementType):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(doc: Document, name: str) -> StructuralConnectionApprovalType: ...
    @staticmethod
    def GetAllStructuralConnectionApprovalTypes(cda: Document, ids: clr.Reference[ICollection_1[ElementId]]) -> None: ...
    @staticmethod
    def IsValidApprovalTypeName(doc: Document, name: str) -> bool: ...


class StructuralConnectionCodeCheckingStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotCalculated : StructuralConnectionCodeCheckingStatus # 0
    OkChecked : StructuralConnectionCodeCheckingStatus # 1
    CheckingFailed : StructuralConnectionCodeCheckingStatus # 2


class StructuralConnectionHandler(Element):
    @property
    def ApprovalTypeId(self) -> ElementId: ...
    @ApprovalTypeId.setter
    def ApprovalTypeId(self, value: ElementId) -> ElementId: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CodeCheckingStatus(self) -> StructuralConnectionCodeCheckingStatus: ...
    @CodeCheckingStatus.setter
    def CodeCheckingStatus(self, value: StructuralConnectionCodeCheckingStatus) -> StructuralConnectionCodeCheckingStatus: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OverrideTypeParams(self) -> bool: ...
    @OverrideTypeParams.setter
    def OverrideTypeParams(self, value: bool) -> bool: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def SingleElementEndIndex(self) -> int: ...
    @SingleElementEndIndex.setter
    def SingleElementEndIndex(self, value: int) -> int: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def AddElementIds(self, elemIds: IList_1[ElementId]) -> None: ...
    def AddReferences(self, document: Document, picks: IList_1[Reference]) -> None: ...
    @staticmethod
    def CreateGenericConnection(document: Document, idsToConnect: IList_1[ElementId]) -> StructuralConnectionHandler: ...
    def GetConnectedElementIds(self) -> IList_1[ElementId]: ...
    def GetInputPoint(self, id: Guid) -> ConnectionInputPoint: ...
    def GetInputPoints(self) -> IList_1[ConnectionInputPoint]: ...
    def GetInputReferences(self) -> IList_1[Reference]: ...
    def GetOrigin(self) -> XYZ: ...
    def IsCustom(self) -> bool: ...
    def IsDetailed(self) -> bool: ...
    def RemoveElementIds(self, elemIds: IList_1[ElementId]) -> None: ...
    def RemoveReferences(self, picks: IList_1[Reference]) -> None: ...
    def SetDefaultElementOrder(self) -> None: ...
    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        @typing.overload
        def __call__(self, document: Document, elementIds: IList_1[ElementId], typeName: str) -> StructuralConnectionHandler:...
        @typing.overload
        def __call__(self, document: Document, idsToConnect: IList_1[ElementId], typeId: ElementId) -> StructuralConnectionHandler:...
        @typing.overload
        def __call__(self, document: Document, idsToConnect: IList_1[ElementId], typeId: ElementId, additionalInputPoints: IList_1[ConnectionInputPoint]) -> StructuralConnectionHandler:...



class StructuralConnectionHandlerType(ElementType):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def ConnectionGuid(self) -> Guid: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def AddElementsToCustomConnection(structuralConnectionHandler: StructuralConnectionHandler, references: IList_1[Reference]) -> None: ...
    @staticmethod
    def CreateDefaultStructuralConnectionHandlerType(pADoc: Document) -> ElementId: ...
    @staticmethod
    def FindGenericConnectionType(doc: Document) -> ElementId: ...
    @staticmethod
    def GetDefaultConnectionHandlerType(pADoc: Document) -> ElementId: ...
    def IsCustom(self) -> bool: ...
    def IsDetailed(self) -> bool: ...
    def IsGeneric(self) -> bool: ...
    @staticmethod
    def IsTypeNameValidForCustomConnection(document: Document, typeName: str) -> bool: ...
    @staticmethod
    def RemoveMainSubelementsFromCustomConnection(structuralConnectionHandler: StructuralConnectionHandler, subelements: IList_1[Subelement]) -> None: ...
    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        @typing.overload
        def __call__(self, pADoc: Document, name: str, guid: Guid, familyName: str) -> StructuralConnectionHandlerType:...
        @typing.overload
        def __call__(self, pADoc: Document, name: str, guid: Guid, familyName: str, categoryId: ElementId) -> StructuralConnectionHandlerType:...
        @typing.overload
        def __call__(self, pADoc: Document, name: str, guid: Guid, familyName: str, categoryId: ElementId, inputPointsInfo: IList_1[ConnectionInputPointInfo]) -> StructuralConnectionHandlerType:...



class StructuralConnectionSettings(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IncludeWarningControls(self) -> bool: ...
    @IncludeWarningControls.setter
    def IncludeWarningControls(self, value: bool) -> bool: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def GetStructuralConnectionSettings(document: Document) -> StructuralConnectionSettings: ...


class StructuralConnectionType(ElementType):
    @property
    def ApplyTo(self) -> StructuralConnectionApplyTo: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(doc: Document, applyTo: StructuralConnectionApplyTo, name: str, familySymbolId: ElementId) -> StructuralConnectionType: ...
    @staticmethod
    def GetAllStructuralConnectionTypeIds(cda: Document, ids: clr.Reference[ICollection_1[ElementId]]) -> None: ...
    def GetFamilySymbolId(self) -> ElementId: ...
    def SetFamilySymbolId(self, familySymbolId: ElementId) -> None: ...
    @staticmethod
    def ValidFamilySymbolId(doc: Document, applyTo: StructuralConnectionApplyTo, familySymbolId: ElementId) -> bool: ...


class StructuralFramingUtils(abc.ABC):
    @staticmethod
    def AllowJoinAtEnd(familyInstance: FamilyInstance, end: int) -> None: ...
    @staticmethod
    def CanFlipEnds(familyInstance: FamilyInstance) -> bool: ...
    @staticmethod
    def CanSetEndReference(familyInstance: FamilyInstance, end: int) -> bool: ...
    @staticmethod
    def DisallowJoinAtEnd(familyInstance: FamilyInstance, end: int) -> None: ...
    @staticmethod
    def FlipEnds(familyInstance: FamilyInstance) -> None: ...
    @staticmethod
    def GetEndReference(familyInstance: FamilyInstance, end: int) -> Reference: ...
    @staticmethod
    def IsEndReferenceValid(familyInstance: FamilyInstance, end: int, pick: Reference) -> bool: ...
    @staticmethod
    def IsJoinAllowedAtEnd(familyInstance: FamilyInstance, end: int) -> bool: ...
    @staticmethod
    def RemoveEndReference(familyInstance: FamilyInstance, end: int) -> None: ...
    @staticmethod
    def SetEndReference(familyInstance: FamilyInstance, end: int, pick: Reference) -> None: ...


class StructuralInstanceUsage(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Undefined : StructuralInstanceUsage # 0
    Wall : StructuralInstanceUsage # 1
    Column : StructuralInstanceUsage # 2
    Girder : StructuralInstanceUsage # 3
    Joist : StructuralInstanceUsage # 4
    Purlin : StructuralInstanceUsage # 5
    Other : StructuralInstanceUsage # 6
    Brace : StructuralInstanceUsage # 7
    HorizontalBracing : StructuralInstanceUsage # 8
    KickerBracing : StructuralInstanceUsage # 9
    Automatic : StructuralInstanceUsage # 10
    TrussChord : StructuralInstanceUsage # 11
    TrussWeb : StructuralInstanceUsage # 12


class StructuralInstanceUsageFilter(ElementSlowFilter):
    @typing.overload
    def __init__(self, structuralUsage: StructuralInstanceUsage) -> None: ...
    @typing.overload
    def __init__(self, structuralUsage: StructuralInstanceUsage, inverted: bool) -> None: ...
    @property
    def Inverted(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def StructuralUsage(self) -> StructuralInstanceUsage: ...


class StructuralMaterialType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Undefined : StructuralMaterialType # 0
    Steel : StructuralMaterialType # 1
    Concrete : StructuralMaterialType # 2
    Wood : StructuralMaterialType # 3
    Other : StructuralMaterialType # 4
    PrecastConcrete : StructuralMaterialType # 5
    Generic : StructuralMaterialType # 6
    Aluminum : StructuralMaterialType # 7


class StructuralMaterialTypeFilter(ElementSlowFilter):
    @typing.overload
    def __init__(self, structuralMaterialType: StructuralMaterialType) -> None: ...
    @typing.overload
    def __init__(self, structuralMaterialType: StructuralMaterialType, inverted: bool) -> None: ...
    @property
    def Inverted(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def StructuralMaterialType(self) -> StructuralMaterialType: ...


class StructuralSectionsServiceData(IDisposable):
    @property
    def Document(self) -> Document: ...
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...
    def GetCurrentElements(self) -> IList_1[ElementId]: ...


class StructuralSettings(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundaryConditionAreaAndLineSymbolSpacing(self) -> float: ...
    @BoundaryConditionAreaAndLineSymbolSpacing.setter
    def BoundaryConditionAreaAndLineSymbolSpacing(self, value: float) -> float: ...
    @property
    def BoundaryConditionFamilySymbolFixed(self) -> ElementId: ...
    @BoundaryConditionFamilySymbolFixed.setter
    def BoundaryConditionFamilySymbolFixed(self, value: ElementId) -> ElementId: ...
    @property
    def BoundaryConditionFamilySymbolPinned(self) -> ElementId: ...
    @BoundaryConditionFamilySymbolPinned.setter
    def BoundaryConditionFamilySymbolPinned(self, value: ElementId) -> ElementId: ...
    @property
    def BoundaryConditionFamilySymbolRoller(self) -> ElementId: ...
    @BoundaryConditionFamilySymbolRoller.setter
    def BoundaryConditionFamilySymbolRoller(self, value: ElementId) -> ElementId: ...
    @property
    def BoundaryConditionFamilySymbolUserDefined(self) -> ElementId: ...
    @BoundaryConditionFamilySymbolUserDefined.setter
    def BoundaryConditionFamilySymbolUserDefined(self, value: ElementId) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def BraceAboveSymbol(self) -> ElementId: ...
    @BraceAboveSymbol.setter
    def BraceAboveSymbol(self, value: ElementId) -> ElementId: ...
    @property
    def BraceBelowSymbol(self) -> ElementId: ...
    @BraceBelowSymbol.setter
    def BraceBelowSymbol(self, value: ElementId) -> ElementId: ...
    @property
    def BraceParallelLineOffset(self) -> float: ...
    @BraceParallelLineOffset.setter
    def BraceParallelLineOffset(self, value: float) -> float: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def KickerBraceSymbol(self) -> ElementId: ...
    @KickerBraceSymbol.setter
    def KickerBraceSymbol(self, value: ElementId) -> ElementId: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def ShowBraceAbove(self) -> bool: ...
    @ShowBraceAbove.setter
    def ShowBraceAbove(self, value: bool) -> bool: ...
    @property
    def ShowBraceBelow(self) -> bool: ...
    @ShowBraceBelow.setter
    def ShowBraceBelow(self, value: bool) -> bool: ...
    @property
    def SymbolicCutbackForBeamAndTruss(self) -> float: ...
    @SymbolicCutbackForBeamAndTruss.setter
    def SymbolicCutbackForBeamAndTruss(self, value: float) -> float: ...
    @property
    def SymbolicCutbackForBrace(self) -> float: ...
    @SymbolicCutbackForBrace.setter
    def SymbolicCutbackForBrace(self, value: float) -> float: ...
    @property
    def SymbolicCutbackForColumn(self) -> float: ...
    @SymbolicCutbackForColumn.setter
    def SymbolicCutbackForColumn(self, value: float) -> float: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def GetStructuralSettings(doc: Document) -> StructuralSettings: ...


class StructuralType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NonStructural : StructuralType # 0
    Beam : StructuralType # 1
    Brace : StructuralType # 2
    Column : StructuralType # 3
    Footing : StructuralType # 4
    UnknownFraming : StructuralType # 5


class StructuralWallUsage(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NonBearing : StructuralWallUsage # 0
    Bearing : StructuralWallUsage # 1
    Shear : StructuralWallUsage # 2
    Combined : StructuralWallUsage # 3


class StructuralWallUsageFilter(ElementSlowFilter):
    @typing.overload
    def __init__(self, structuralWallUsage: StructuralWallUsage) -> None: ...
    @typing.overload
    def __init__(self, structuralWallUsage: StructuralWallUsage, inverted: bool) -> None: ...
    @property
    def Inverted(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def StructuralWallUsage(self) -> StructuralWallUsage: ...


class SurfaceElementExtension(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BottomOrTop : SurfaceElementExtension # 0
    Plane : SurfaceElementExtension # 1


class SurfaceElementProjectionZ(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    TopOrInterior : SurfaceElementProjectionZ # 0
    CenterOfElement : SurfaceElementProjectionZ # 1
    BottomOrExterior : SurfaceElementProjectionZ # 2
    CenterOfCore : SurfaceElementProjectionZ # 3
    Plane : SurfaceElementProjectionZ # 4


class TargetRebarConstraintType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    RebarPlane : TargetRebarConstraintType # 0
    StartOfBar : TargetRebarConstraintType # 1
    EndOfBar : TargetRebarConstraintType # 2
    Edge : TargetRebarConstraintType # 3
    OutOfPlaneExtent : TargetRebarConstraintType # 4
    BarBend : TargetRebarConstraintType # 5
    HookBend : TargetRebarConstraintType # 6


class TranslationRotationValue(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Fixed : TranslationRotationValue # 0
    Release : TranslationRotationValue # 1
    Spring : TranslationRotationValue # 2


class Truss(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def Curves(self) -> CurveArray: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Members(self) -> ICollection_1[ElementId]: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def TrussType(self) -> TrussType: ...
    @TrussType.setter
    def TrussType(self, value: TrussType) -> TrussType: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def AttachChord(self, attachToElement: Element, location: TrussChordLocation, forceRemoveSketch: bool) -> None: ...
    @staticmethod
    def Create(document: Document, trussTypeId: ElementId, sketchPlaneId: ElementId, curve: Curve) -> Truss: ...
    def DetachChord(self, location: TrussChordLocation) -> None: ...
    @staticmethod
    def DropTruss(truss: Truss) -> None: ...
    def GetTrussMemberInfo(self, elemId: ElementId) -> TrussMemberInfo: ...
    def RemoveProfile(self) -> None: ...
    def SetProfile(self, topChords: CurveArray, bottomChords: CurveArray) -> None: ...
    def TogglePinMember(self, elemId: ElementId) -> None: ...


class TrussChordLocation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Bottom : TrussChordLocation # 0
    Top : TrussChordLocation # 1


class TrussCurveType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NonTrussCurve : TrussCurveType # 0
    TopChord : TrussCurveType # 1
    BottomChord : TrussCurveType # 2
    Web : TrussCurveType # 3


class TrussMemberInfo:
    def __init__(self) -> None: ...
    @property
    def hostTrussId(self) -> ElementId: ...
    @hostTrussId.setter
    def hostTrussId(self, value: ElementId) -> ElementId: ...
    @property
    def lockedToTruss(self) -> bool: ...
    @lockedToTruss.setter
    def lockedToTruss(self, value: bool) -> bool: ...
    @property
    def memberTypeKey(self) -> TrussMemberType: ...
    @memberTypeKey.setter
    def memberTypeKey(self, value: TrussMemberType) -> TrussMemberType: ...


class TrussMemberType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ETK_Unknown : TrussMemberType # 0
    ETK_TrussTopChord : TrussMemberType # 1
    ETK_TrussBottomChord : TrussMemberType # 2
    ETK_TrussVertWeb : TrussMemberType # 3
    ETK_TrussDiagWeb : TrussMemberType # 4


class TrussType(FamilySymbol):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Family(self) -> Family: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsActive(self) -> bool: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def StructuralMaterialType(self) -> StructuralMaterialType: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...


class WireDistributionDirection(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Major : WireDistributionDirection # 0
    Minor : WireDistributionDirection # 1


class YJustification(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Left : YJustification # 0
    Center : YJustification # 1
    Origin : YJustification # 2
    Right : YJustification # 3


class YZJustificationOption(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Uniform : YZJustificationOption # 0
    Independent : YZJustificationOption # 1


class ZJustification(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Top : ZJustification # 0
    Center : ZJustification # 1
    Origin : ZJustification # 2
    Bottom : ZJustification # 3

