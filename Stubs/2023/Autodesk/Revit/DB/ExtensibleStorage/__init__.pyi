import typing
from Autodesk.Revit.DB import Element, ElementId, BoundingBoxXYZ, Category, DesignOption, Document, GeometryElement, Location, Parameter, ParameterSet, ParameterMap, WorksetId, ForgeTypeId, ElementQuickFilter
from System import Guid, IDisposable
from System.Collections.Generic import IList_1

class AccessLevel(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Public : AccessLevel # 1
    Vendor : AccessLevel # 2
    Application : AccessLevel # 3


class ContainerType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Simple : ContainerType # 0
    Array : ContainerType # 1
    Map : ContainerType # 2


class DataStorage(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsModifiable(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(doc: Document) -> DataStorage: ...


class Entity(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: Entity) -> None: ...
    @typing.overload
    def __init__(self, schema: Schema) -> None: ...
    @typing.overload
    def __init__(self, schemaGUID: Guid) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Schema(self) -> Schema: ...
    @property
    def SchemaGUID(self) -> Guid: ...
    def Dispose(self) -> None: ...
    def IsValid(self) -> bool: ...
    def ReadAccessGranted(self) -> bool: ...
    def RecognizedField(self, field: Field) -> bool: ...
    def WriteAccessGranted(self) -> bool: ...
    # Skipped Clear due to it being static, abstract and generic.

    Clear : Clear_MethodGroup
    class Clear_MethodGroup:
        @typing.overload
        def __call__(self, fieldName: str) -> None:...
        @typing.overload
        def __call__(self, field: Field) -> None:...

    # Skipped Get due to it being static, abstract and generic.

    Get : Get_MethodGroup
    class Get_MethodGroup:
        def __getitem__(self, t:typing.Type[Get_1_T1]) -> Get_1[Get_1_T1]: ...

        Get_1_T1 = typing.TypeVar('Get_1_T1')
        class Get_1(typing.Generic[Get_1_T1]):
            Get_1_FieldType = Entity.Get_MethodGroup.Get_1_T1
            @typing.overload
            def __call__(self, fieldName: str) -> Get_1_FieldType:...
            @typing.overload
            def __call__(self, field: Field) -> Get_1_FieldType:...
            @typing.overload
            def __call__(self, fieldName: str, unitTypeId: ForgeTypeId) -> Get_1_FieldType:...
            @typing.overload
            def __call__(self, field: Field, unitTypeId: ForgeTypeId) -> Get_1_FieldType:...


    # Skipped Set due to it being static, abstract and generic.

    Set : Set_MethodGroup
    class Set_MethodGroup:
        def __getitem__(self, t:typing.Type[Set_1_T1]) -> Set_1[Set_1_T1]: ...

        Set_1_T1 = typing.TypeVar('Set_1_T1')
        class Set_1(typing.Generic[Set_1_T1]):
            Set_1_FieldType = Entity.Set_MethodGroup.Set_1_T1
            @typing.overload
            def __call__(self, fieldName: str, value: Set_1_FieldType) -> None:...
            @typing.overload
            def __call__(self, field: Field, value: Set_1_FieldType) -> None:...
            @typing.overload
            def __call__(self, fieldName: str, value: Set_1_FieldType, unitTypeId: ForgeTypeId) -> None:...
            @typing.overload
            def __call__(self, field: Field, value: Set_1_FieldType, unitTypeId: ForgeTypeId) -> None:...




class ExtensibleStorageFilter(ElementQuickFilter):
    def __init__(self, schemaGuid: Guid) -> None: ...
    @property
    def Inverted(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def SchemaGuid(self) -> Guid: ...


class Field(IDisposable):
    @property
    def ContainerType(self) -> ContainerType: ...
    @property
    def Documentation(self) -> str: ...
    @property
    def FieldName(self) -> str: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def KeyType(self) -> typing.Type[typing.Any]: ...
    @property
    def Schema(self) -> Schema: ...
    @property
    def SubSchema(self) -> Schema: ...
    @property
    def SubSchemaGUID(self) -> Guid: ...
    @property
    def ValueType(self) -> typing.Type[typing.Any]: ...
    def CompatibleUnit(self, unitTypeId: ForgeTypeId) -> bool: ...
    def Dispose(self) -> None: ...
    def GetSpecTypeId(self) -> ForgeTypeId: ...
    def SubEntityReadAccessGranted(self) -> bool: ...
    def SubEntityWriteAccessGranted(self) -> bool: ...


class FieldBuilder(IDisposable):
    @typing.overload
    def __init__(self, field: Field, builder: SchemaBuilder) -> None: ...
    @typing.overload
    def __init__(self, other: FieldBuilder) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...
    def NeedsSubSchemaGUID(self) -> bool: ...
    def NeedsUnits(self) -> bool: ...
    def Ready(self) -> bool: ...
    def SetDocumentation(self, documentation: str) -> FieldBuilder: ...
    def SetSpec(self, specTypeId: ForgeTypeId) -> FieldBuilder: ...
    def SetSubSchemaGUID(self, guid: Guid) -> FieldBuilder: ...


class Schema(IDisposable):
    @property
    def ApplicationGUID(self) -> Guid: ...
    @property
    def Documentation(self) -> str: ...
    @property
    def GUID(self) -> Guid: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def ReadAccessLevel(self) -> AccessLevel: ...
    @property
    def SchemaName(self) -> str: ...
    @property
    def VendorId(self) -> str: ...
    @property
    def WriteAccessLevel(self) -> AccessLevel: ...
    def Dispose(self) -> None: ...
    def GetField(self, name: str) -> Field: ...
    def ListFields(self) -> IList_1[Field]: ...
    @staticmethod
    def ListSchemas() -> IList_1[Schema]: ...
    @staticmethod
    def Lookup(guid: Guid) -> Schema: ...
    def ReadAccessGranted(self) -> bool: ...
    def WriteAccessGranted(self) -> bool: ...


class SchemaBuilder(IDisposable):
    def __init__(self, guid: Guid) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...
    def AcceptableName(self, name: str) -> bool: ...
    def AddArrayField(self, fieldName: str, fieldType: typing.Type[typing.Any]) -> FieldBuilder: ...
    def AddMapField(self, fieldName: str, keyType: typing.Type[typing.Any], valueType: typing.Type[typing.Any]) -> FieldBuilder: ...
    def AddSimpleField(self, fieldName: str, fieldType: typing.Type[typing.Any]) -> FieldBuilder: ...
    def Dispose(self) -> None: ...
    def Finish(self) -> Schema: ...
    @staticmethod
    def GUIDIsValid(guid: Guid) -> bool: ...
    def Ready(self) -> bool: ...
    def SetApplicationGUID(self, applicationGUID: Guid) -> SchemaBuilder: ...
    def SetDocumentation(self, documentation: str) -> SchemaBuilder: ...
    def SetReadAccessLevel(self, readAccessLevel: AccessLevel) -> SchemaBuilder: ...
    def SetSchemaName(self, schemaName: str) -> SchemaBuilder: ...
    def SetVendorId(self, vendorId: str) -> SchemaBuilder: ...
    def SetWriteAccessLevel(self, writeAccessLevel: AccessLevel) -> SchemaBuilder: ...
    @staticmethod
    def VendorIdIsValid(vendorId: str) -> bool: ...

