import typing, abc
from Autodesk.Revit.DB import Outline, XYZ, ElementId, Color, PointCloudColorMode, Plane, Document
from System import IDisposable
from System.Collections.Generic import IList_1, IEnumerable_1, IEnumerator_1

class CloudPoint:
    def __init__(self, x: float, y: float, z: float, color: int) -> None: ...
    Color : int
    X : float
    Y : float
    Z : float
    # Operator not supported op_Implicit(cp: CloudPoint)


class IPointCloudAccess(typing.Protocol):
    @abc.abstractmethod
    def Free(self) -> None: ...
    @abc.abstractmethod
    def GetColorEncoding(self) -> PointCloudColorEncoding: ...
    @abc.abstractmethod
    def GetExtent(self) -> Outline: ...
    @abc.abstractmethod
    def GetName(self) -> str: ...
    @abc.abstractmethod
    def GetOffset(self) -> XYZ: ...
    @abc.abstractmethod
    def GetUnitsToFeetConversionFactor(self) -> float: ...
    @abc.abstractmethod
    def ReadPoints(self, rFilter: PointCloudFilter, viewId: ElementId, buffer: int, nBufferSize: int) -> int: ...
    # Skipped CreatePointSetIterator due to it being static, abstract and generic.

    CreatePointSetIterator : CreatePointSetIterator_MethodGroup
    class CreatePointSetIterator_MethodGroup:
        @typing.overload
        def __call__(self, rFilter: PointCloudFilter, viewId: ElementId) -> IPointSetIterator:...
        @typing.overload
        def __call__(self, rFilter: PointCloudFilter, density: float, viewId: ElementId) -> IPointSetIterator:...



class IPointCloudEngine(typing.Protocol):
    @abc.abstractmethod
    def CreatePointCloudAccess(self, identifier: str) -> IPointCloudAccess: ...
    @abc.abstractmethod
    def Free(self) -> None: ...


class IPointSetIterator(typing.Protocol):
    @abc.abstractmethod
    def Free(self) -> None: ...
    @abc.abstractmethod
    def ReadPoints(self, buffer: int, bufferSize: int) -> int: ...


class PointCloudColorEncoding(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ARGB : PointCloudColorEncoding # 0
    ABGR : PointCloudColorEncoding # 1


class PointCloudColorSettings(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, color1: Color, color2: Color) -> None: ...
    @typing.overload
    def __init__(self, mode: PointCloudColorMode) -> None: ...
    @typing.overload
    def __init__(self, other: PointCloudColorSettings) -> None: ...
    @property
    def Color1(self) -> Color: ...
    @property
    def Color2(self) -> Color: ...
    @property
    def IsValidObject(self) -> bool: ...
    def Assign(self, other: PointCloudColorSettings) -> None: ...
    def Dispose(self) -> None: ...
    def IsEqual(self, other: PointCloudColorSettings) -> bool: ...


class PointCloudEngineRegistry(abc.ABC):
    @staticmethod
    def GetSupportedEngines() -> IList_1[str]: ...
    @staticmethod
    def IsEngineFileBased(identifier: str) -> bool: ...
    @staticmethod
    def RegisterPointCloudEngine(identifier: str, engine: IPointCloudEngine, isFileBased: bool) -> None: ...
    @staticmethod
    def UnregisterPointCloudEngine(identifier: str) -> None: ...


class PointCloudFilter(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    def Clone(self) -> PointCloudFilter: ...
    def Dispose(self) -> None: ...
    def PrepareForCell(self, min: XYZ, max: XYZ, numTests: int) -> None: ...
    def TestCell(self, min: XYZ, max: XYZ) -> int: ...
    def TestPoint(self, point: CloudPoint) -> bool: ...


class PointCloudFilterFactory(abc.ABC):
    # Skipped CreateMultiPlaneFilter due to it being static, abstract and generic.

    CreateMultiPlaneFilter : CreateMultiPlaneFilter_MethodGroup
    class CreateMultiPlaneFilter_MethodGroup:
        @typing.overload
        def __call__(self, planes: IList_1[Plane]) -> PointCloudFilter:...
        @typing.overload
        def __call__(self, planes: IList_1[Plane], exactPlaneCount: int) -> PointCloudFilter:...



class PointCloudFilterUtils(abc.ABC):
    @staticmethod
    def GetFilteredOutline(filter: PointCloudFilter, box: Outline) -> Outline: ...


class PointCloudOverrides(IDisposable):
    def __init__(self) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...
    @staticmethod
    def ArePointCloudOverrideSettingsValid(tag: str, settings: PointCloudOverrideSettings) -> bool: ...
    def Assign(self, other: PointCloudOverrides) -> None: ...
    def Dispose(self) -> None: ...
    def IsEqual(self, other: PointCloudOverrides) -> bool: ...
    # Skipped GetPointCloudRegionOverrideSettings due to it being static, abstract and generic.

    GetPointCloudRegionOverrideSettings : GetPointCloudRegionOverrideSettings_MethodGroup
    class GetPointCloudRegionOverrideSettings_MethodGroup:
        @typing.overload
        def __call__(self, elementId: ElementId) -> PointCloudOverrideSettings:...
        @typing.overload
        def __call__(self, elementId: ElementId, regionTag: str, doc: Document) -> PointCloudOverrideSettings:...

    # Skipped GetPointCloudScanOverrideSettings due to it being static, abstract and generic.

    GetPointCloudScanOverrideSettings : GetPointCloudScanOverrideSettings_MethodGroup
    class GetPointCloudScanOverrideSettings_MethodGroup:
        @typing.overload
        def __call__(self, elementId: ElementId) -> PointCloudOverrideSettings:...
        @typing.overload
        def __call__(self, elementId: ElementId, scanTag: str, doc: Document) -> PointCloudOverrideSettings:...

    # Skipped SetPointCloudRegionOverrideSettings due to it being static, abstract and generic.

    SetPointCloudRegionOverrideSettings : SetPointCloudRegionOverrideSettings_MethodGroup
    class SetPointCloudRegionOverrideSettings_MethodGroup:
        @typing.overload
        def __call__(self, elementId: ElementId, newSettings: PointCloudOverrideSettings) -> None:...
        @typing.overload
        def __call__(self, elementId: ElementId, newSettings: PointCloudOverrideSettings, regionTag: str, doc: Document) -> None:...

    # Skipped SetPointCloudScanOverrideSettings due to it being static, abstract and generic.

    SetPointCloudScanOverrideSettings : SetPointCloudScanOverrideSettings_MethodGroup
    class SetPointCloudScanOverrideSettings_MethodGroup:
        @typing.overload
        def __call__(self, elementId: ElementId, newSettings: PointCloudOverrideSettings) -> None:...
        @typing.overload
        def __call__(self, elementId: ElementId, newSettings: PointCloudOverrideSettings, scanTag: str, doc: Document) -> None:...



class PointCloudOverrideSettings(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: PointCloudOverrideSettings) -> None: ...
    @property
    def ColorMode(self) -> PointCloudColorMode: ...
    @ColorMode.setter
    def ColorMode(self, value: PointCloudColorMode) -> PointCloudColorMode: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Visible(self) -> bool: ...
    @Visible.setter
    def Visible(self, value: bool) -> bool: ...
    def Assign(self, other: PointCloudOverrideSettings) -> None: ...
    def Dispose(self) -> None: ...
    def GetModeOverride(self, mode: PointCloudColorMode) -> PointCloudColorSettings: ...
    def IsEqual(self, other: PointCloudOverrideSettings) -> bool: ...
    def SetModeOverride(self, mode: PointCloudColorMode, colorSettings: PointCloudColorSettings) -> None: ...


class PointCollection(IEnumerable_1[CloudPoint], IDisposable):
    @property
    def Count(self) -> int: ...
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...
    def GetEnumerator(self) -> IEnumerator_1[CloudPoint]: ...
    def GetPointBufferPointer(self) -> int: ...
    def GetPointIterator(self) -> PointIterator: ...


class PointIterator(IEnumerator_1[CloudPoint]):
    @property
    def Current(self) -> CloudPoint: ...
    @property
    def CurrentObject(self) -> typing.Any: ...
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...
    def Free(self) -> None: ...
    def IsDone(self) -> bool: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...

