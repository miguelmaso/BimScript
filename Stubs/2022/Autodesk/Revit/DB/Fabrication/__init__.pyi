import typing, abc
from System import IDisposable
from Autodesk.Revit.DB import Document, ElementId, Element, XYZ, Connector, ConnectorProfileType
from System.Collections.Generic import ISet_1, IDictionary_2, IList_1

class DesignToFabricationConverter(IDisposable):
    def __init__(self, document: Document) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...
    def Convert(self, selection: ISet_1[ElementId], serviceId: int) -> DesignToFabricationConverterResult: ...
    def Dispose(self) -> None: ...
    def GetConvertedFabricationParts(self) -> ISet_1[ElementId]: ...
    def GetConvertedFabricationPartsWithInvalidConnections(self) -> IDictionary_2[ElementId, ElementId]: ...
    def GetDesignElementAndFabricationPartsWithDifferentOffsets(self) -> IDictionary_2[ElementId, ISet_1[ElementId]]: ...
    def GetDesignElementAndFabricationPartsWithOpenConnectors(self) -> IDictionary_2[ElementId, ISet_1[ElementId]]: ...
    def GetElementsWithOpenConnector(self) -> ISet_1[ElementId]: ...
    def GetPartialConvertFailureResults(self) -> IList_1[PartialFailureResults]: ...
    def SetMapForFamilySymbolToFabricationPartType(self, typeMappings: IDictionary_2[ElementId, ElementId]) -> DesignToFabricationMappingResult: ...


class DesignToFabricationConverterResult(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Success : DesignToFabricationConverterResult # 0
    PartialFailure : DesignToFabricationConverterResult # 1


class DesignToFabricationMappingResult(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Success : DesignToFabricationMappingResult # 0
    Undefined : DesignToFabricationMappingResult # 1
    InvalidFamilySymbol : DesignToFabricationMappingResult # 2
    InvalidFabricationPartType : DesignToFabricationMappingResult # 3
    UnsupportedFamilySymbol : DesignToFabricationMappingResult # 4
    UnsupportedFabricationPartType : DesignToFabricationMappingResult # 5


class FabricationAncillaryType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Unknown : FabricationAncillaryType # 0
    Fixing : FabricationAncillaryType # 1
    Corner : FabricationAncillaryType # 2
    Clip : FabricationAncillaryType # 3
    TieRod : FabricationAncillaryType # 4
    Gasket : FabricationAncillaryType # 5
    Sealant : FabricationAncillaryType # 6
    SupportRod : FabricationAncillaryType # 7
    AncillaryMaterial : FabricationAncillaryType # 8
    AirturnTrack : FabricationAncillaryType # 9
    AirturnVane : FabricationAncillaryType # 10
    Isolator : FabricationAncillaryType # 11
    SeamMaterial : FabricationAncillaryType # 12


class FabricationAncillaryUsageType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Undefined : FabricationAncillaryUsageType # 0
    Loose : FabricationAncillaryUsageType # 1
    Connector : FabricationAncillaryUsageType # 2
    Seam : FabricationAncillaryUsageType # 3
    Splitter : FabricationAncillaryUsageType # 4
    Airturn : FabricationAncillaryUsageType # 5
    Hanger : FabricationAncillaryUsageType # 6
    Stiffener : FabricationAncillaryUsageType # 7


class FabricationCustomDataType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Text : FabricationCustomDataType # 1
    Integer : FabricationCustomDataType # 2
    Real : FabricationCustomDataType # 3


class FabricationNetworkChangeService(IDisposable):
    def __init__(self, document: Document) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...
    def ApplyChange(self) -> FabricationNetworkChangeServiceResult: ...
    def ChangeSize(self, selection: ISet_1[ElementId], fabricationPartSizeMaps: ISet_1[FabricationPartSizeMap]) -> FabricationNetworkChangeServiceResult: ...
    def Dispose(self) -> None: ...
    def GetElementsThatFailed(self) -> ISet_1[ElementId]: ...
    def GetInLinePartTypes(self) -> ISet_1[ElementId]: ...
    def GetMapOfAllSizesForStraights(self) -> ISet_1[FabricationPartSizeMap]: ...
    def GetStraightsThatWereNotChanged(self) -> ISet_1[ElementId]: ...
    def SetGroupId(self, groupId: int) -> None: ...
    def SetMapOfInLinePartTypes(self, fabricationPartTypes: IDictionary_2[ElementId, ElementId]) -> None: ...
    def SetMapOfSizesForStraights(self, fabricationPartSizeMaps: ISet_1[FabricationPartSizeMap]) -> None: ...
    def SetPaletteId(self, paletteId: int) -> None: ...
    def SetRestrictGroup(self, restrictGroup: bool) -> None: ...
    def SetRestrictPalette(self, restrictPalette: bool) -> None: ...
    def SetSelection(self, selection: ISet_1[ElementId]) -> FabricationNetworkChangeServiceResult: ...
    def SetServiceId(self, serviceId: int) -> None: ...
    # Skipped ChangeService due to it being static, abstract and generic.

    ChangeService : ChangeService_MethodGroup
    class ChangeService_MethodGroup:
        @typing.overload
        def __call__(self, selection: ISet_1[ElementId], serviceId: int, paletteId: int) -> FabricationNetworkChangeServiceResult:...
        @typing.overload
        def __call__(self, selection: ISet_1[ElementId], serviceId: int, paletteId: int, restrictPalette: bool) -> FabricationNetworkChangeServiceResult:...



class FabricationNetworkChangeServiceResult(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Success : FabricationNetworkChangeServiceResult # 0
    PartialFailure : FabricationNetworkChangeServiceResult # 1
    UserAborted : FabricationNetworkChangeServiceResult # 2
    InvalidSelection : FabricationNetworkChangeServiceResult # 3


class FabricationPartCompareType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    CutType : FabricationPartCompareType # 1
    Material : FabricationPartCompareType # 2
    Specification : FabricationPartCompareType # 3
    InsulationSpecification : FabricationPartCompareType # 4
    MaterialGauge : FabricationPartCompareType # 5
    DuctFacing : FabricationPartCompareType # 6
    Insulation : FabricationPartCompareType # 7
    Notes : FabricationPartCompareType # 8
    Filename : FabricationPartCompareType # 9
    Description : FabricationPartCompareType # 10
    CID : FabricationPartCompareType # 11
    SkinMaterial : FabricationPartCompareType # 12
    SkinGauge : FabricationPartCompareType # 13
    Section : FabricationPartCompareType # 14
    Status : FabricationPartCompareType # 15
    Service : FabricationPartCompareType # 16
    Pallet : FabricationPartCompareType # 17
    BoxNo : FabricationPartCompareType # 18
    OrderNo : FabricationPartCompareType # 19
    Drawing : FabricationPartCompareType # 20
    Zone : FabricationPartCompareType # 21
    ETag : FabricationPartCompareType # 22
    Alt : FabricationPartCompareType # 23
    Spool : FabricationPartCompareType # 24
    Alias : FabricationPartCompareType # 25
    PCFKey : FabricationPartCompareType # 26
    CustomData : FabricationPartCompareType # 27
    ButtonAlias : FabricationPartCompareType # 28


class FabricationPartFitResult(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Success : FabricationPartFitResult # 0
    IncompatibleGeometry : FabricationPartFitResult # 1
    MisalignedEnds : FabricationPartFitResult # 2
    DimensionLocked : FabricationPartFitResult # 3
    BadDimensions : FabricationPartFitResult # 4
    ShapeMismatch : FabricationPartFitResult # 5
    SizeMismatch : FabricationPartFitResult # 6
    IncompatibleConnection : FabricationPartFitResult # 7
    OffsetRequired : FabricationPartFitResult # 8
    Unsupported : FabricationPartFitResult # 255


class FabricationPartJustification(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Middle : FabricationPartJustification # 0
    Bottom : FabricationPartJustification # 1
    Top : FabricationPartJustification # 2


class FabricationPartPlacementUtils(abc.ABC):
    pass


class FabricationPartRouteEnd(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    @staticmethod
    def CreateFromCenterline(element: Element, ptAt: XYZ) -> FabricationPartRouteEnd: ...
    @staticmethod
    def CreateFromConnector(connnector: Connector) -> FabricationPartRouteEnd: ...
    def Dispose(self) -> None: ...


class FabricationPartSizeMap(IDisposable):
    @typing.overload
    def __init__(self, size: str, widthDiameter: float, depth: float, isProductList: bool) -> None: ...
    @typing.overload
    def __init__(self, size: str, widthDiameter: float, depth: float, isProductList: bool, profileType: ConnectorProfileType, serviceId: int, paletteId: int) -> None: ...
    @property
    def AllowMultipleServiceSizes(self) -> bool: ...
    @AllowMultipleServiceSizes.setter
    def AllowMultipleServiceSizes(self, value: bool) -> bool: ...
    @property
    def Depth(self) -> float: ...
    @Depth.setter
    def Depth(self, value: float) -> float: ...
    @property
    def GroupId(self) -> int: ...
    @GroupId.setter
    def GroupId(self, value: int) -> int: ...
    @property
    def IsMappedProductList(self) -> bool: ...
    @IsMappedProductList.setter
    def IsMappedProductList(self, value: bool) -> bool: ...
    @property
    def IsProductList(self) -> bool: ...
    @IsProductList.setter
    def IsProductList(self, value: bool) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def MappedDepth(self) -> float: ...
    @MappedDepth.setter
    def MappedDepth(self, value: float) -> float: ...
    @property
    def MappedProfileType(self) -> ConnectorProfileType: ...
    @MappedProfileType.setter
    def MappedProfileType(self, value: ConnectorProfileType) -> ConnectorProfileType: ...
    @property
    def MappedServiceId(self) -> int: ...
    @MappedServiceId.setter
    def MappedServiceId(self, value: int) -> int: ...
    @property
    def MappedWidthDiameter(self) -> float: ...
    @MappedWidthDiameter.setter
    def MappedWidthDiameter(self, value: float) -> float: ...
    @property
    def PaletteId(self) -> int: ...
    @PaletteId.setter
    def PaletteId(self, value: int) -> int: ...
    @property
    def ProfileType(self) -> ConnectorProfileType: ...
    @ProfileType.setter
    def ProfileType(self, value: ConnectorProfileType) -> ConnectorProfileType: ...
    @property
    def ServiceId(self) -> int: ...
    @ServiceId.setter
    def ServiceId(self, value: int) -> int: ...
    @property
    def SizeString(self) -> str: ...
    @SizeString.setter
    def SizeString(self, value: str) -> str: ...
    @property
    def WidthDiameter(self) -> float: ...
    @WidthDiameter.setter
    def WidthDiameter(self, value: float) -> float: ...
    def Dispose(self) -> None: ...


class FabricationSaveJobOptions(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, addHolesForTaps: bool) -> None: ...
    @property
    def AddHolesForTaps(self) -> bool: ...
    @AddHolesForTaps.setter
    def AddHolesForTaps(self, value: bool) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...


class FabricationUtils(abc.ABC):
    @staticmethod
    def ExportToPCF(document: Document, ids: IList_1[ElementId], filename: str) -> None: ...
    @staticmethod
    def ValidateConnectivity(document: Document, connector1: Connector, connector2: Connector) -> bool: ...


class PartialFailureResults(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotAllPartsConverted : PartialFailureResults # 0
    InvalidConnections : PartialFailureResults # 1
    HaveOpenConnectors : PartialFailureResults # 2
    HaveDifferentOffsets : PartialFailureResults # 3
    NoMatchingSize : PartialFailureResults # 4


class ValidationStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Valid : ValidationStatus # 0
    InvalidDimensions : ValidationStatus # 1
    NoMaterial : ValidationStatus # 2

