import typing, clr, abc
from System import IDisposable, Guid, DateTime
from Autodesk.Revit.DB import Color, ElementId, Element, BoundingBoxXYZ, Category, DesignOption, Document, GeometryElement, Location, Parameter, ParameterSet, ParameterMap, WorksetId, LinkElementId, XYZ, ElementType, UV, CurveLoop, Reference, View, Curve, Transform, Face, ValueAtPointBase, ViewDetailLevel, ViewDiscipline, DisplayStyle, Level, BoundingBoxUV, PartsVisibility, SketchPlane, SunAndShadowSettings, TemporaryViewModes, ViewType
from System.Collections.Generic import IList_1, ICollection_1

class AllowLargeGeometry(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DisAllow : AllowLargeGeometry # 0
    Allow : AllowLargeGeometry # 1
    Prompt : AllowLargeGeometry # 2


class AnalysisDisplayColoredSurfaceSettings(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: AnalysisDisplayColoredSurfaceSettings) -> None: ...
    @property
    def GridColor(self) -> Color: ...
    @GridColor.setter
    def GridColor(self, value: Color) -> Color: ...
    @property
    def GridLineWeight(self) -> int: ...
    @GridLineWeight.setter
    def GridLineWeight(self, value: int) -> int: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def ShowContourLines(self) -> bool: ...
    @ShowContourLines.setter
    def ShowContourLines(self, value: bool) -> bool: ...
    @property
    def ShowGridLines(self) -> bool: ...
    @ShowGridLines.setter
    def ShowGridLines(self, value: bool) -> bool: ...
    @property
    def Transparency(self) -> int: ...
    @Transparency.setter
    def Transparency(self, value: int) -> int: ...
    def Dispose(self) -> None: ...
    def IsEqual(self, other: AnalysisDisplayColoredSurfaceSettings) -> bool: ...


class AnalysisDisplayColorEntry(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, color: Color) -> None: ...
    @typing.overload
    def __init__(self, color: Color, value: float) -> None: ...
    @property
    def Color(self) -> Color: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Value(self) -> float: ...
    def Dispose(self) -> None: ...
    def HasValue(self) -> bool: ...
    def IsEqual(self, other: AnalysisDisplayColorEntry) -> bool: ...


class AnalysisDisplayColorSettings(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: AnalysisDisplayColorSettings) -> None: ...
    @property
    def ColorSettingsType(self) -> AnalysisDisplayStyleColorSettingsType: ...
    @ColorSettingsType.setter
    def ColorSettingsType(self, value: AnalysisDisplayStyleColorSettingsType) -> AnalysisDisplayStyleColorSettingsType: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def MaxColor(self) -> Color: ...
    @MaxColor.setter
    def MaxColor(self, value: Color) -> Color: ...
    @property
    def MinColor(self) -> Color: ...
    @MinColor.setter
    def MinColor(self, value: Color) -> Color: ...
    def AreIntermediateColorsValid(self, map: IList_1[AnalysisDisplayColorEntry]) -> bool: ...
    def Colors(self) -> int: ...
    def Dispose(self) -> None: ...
    def GetIntermediateColors(self) -> IList_1[AnalysisDisplayColorEntry]: ...
    def IsEqual(self, other: AnalysisDisplayColorSettings) -> bool: ...
    def SetIntermediateColors(self, map: IList_1[AnalysisDisplayColorEntry]) -> None: ...


class AnalysisDisplayDeformedShapeSettings(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: AnalysisDisplayDeformedShapeSettings) -> None: ...
    @property
    def GridColor(self) -> Color: ...
    @GridColor.setter
    def GridColor(self, value: Color) -> Color: ...
    @property
    def GridLineWeight(self) -> int: ...
    @GridLineWeight.setter
    def GridLineWeight(self, value: int) -> int: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Rounding(self) -> float: ...
    @Rounding.setter
    def Rounding(self, value: float) -> float: ...
    @property
    def ShowContourLines(self) -> bool: ...
    @ShowContourLines.setter
    def ShowContourLines(self, value: bool) -> bool: ...
    @property
    def ShowGridLines(self) -> bool: ...
    @ShowGridLines.setter
    def ShowGridLines(self, value: bool) -> bool: ...
    @property
    def TextLabelType(self) -> AnalysisDisplayStyleDeformedShapeTextLabelType: ...
    @TextLabelType.setter
    def TextLabelType(self, value: AnalysisDisplayStyleDeformedShapeTextLabelType) -> AnalysisDisplayStyleDeformedShapeTextLabelType: ...
    @property
    def TextTypeId(self) -> ElementId: ...
    @TextTypeId.setter
    def TextTypeId(self, value: ElementId) -> ElementId: ...
    @property
    def Transparency(self) -> int: ...
    @Transparency.setter
    def Transparency(self, value: int) -> int: ...
    def Dispose(self) -> None: ...
    def IsEqual(self, other: AnalysisDisplayDeformedShapeSettings) -> bool: ...


class AnalysisDisplayDiagramSettings(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: AnalysisDisplayDiagramSettings) -> None: ...
    @property
    def FenceType(self) -> AnalysisDisplayStyleDiagramFenceType: ...
    @FenceType.setter
    def FenceType(self, value: AnalysisDisplayStyleDiagramFenceType) -> AnalysisDisplayStyleDiagramFenceType: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def OutlineColor(self) -> Color: ...
    @OutlineColor.setter
    def OutlineColor(self, value: Color) -> Color: ...
    @property
    def OutlineLineWeight(self) -> int: ...
    @OutlineLineWeight.setter
    def OutlineLineWeight(self, value: int) -> int: ...
    @property
    def Rounding(self) -> float: ...
    @Rounding.setter
    def Rounding(self, value: float) -> float: ...
    @property
    def TextLabelType(self) -> AnalysisDisplayStyleDiagramTextLabelType: ...
    @TextLabelType.setter
    def TextLabelType(self, value: AnalysisDisplayStyleDiagramTextLabelType) -> AnalysisDisplayStyleDiagramTextLabelType: ...
    @property
    def TextTypeId(self) -> ElementId: ...
    @TextTypeId.setter
    def TextTypeId(self, value: ElementId) -> ElementId: ...
    @property
    def Transparency(self) -> int: ...
    @Transparency.setter
    def Transparency(self, value: int) -> int: ...
    def Dispose(self) -> None: ...
    def IsEqual(self, other: AnalysisDisplayDiagramSettings) -> bool: ...


class AnalysisDisplayLegend(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Height(self) -> float: ...
    @Height.setter
    def Height(self, value: float) -> float: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...


class AnalysisDisplayLegendSettings(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: AnalysisDisplayLegendSettings) -> None: ...
    @property
    def ColorRangeHeight(self) -> int: ...
    @ColorRangeHeight.setter
    def ColorRangeHeight(self, value: int) -> int: ...
    @property
    def ColorRangeWidth(self) -> int: ...
    @ColorRangeWidth.setter
    def ColorRangeWidth(self, value: int) -> int: ...
    @property
    def HeadingTextTypeId(self) -> ElementId: ...
    @HeadingTextTypeId.setter
    def HeadingTextTypeId(self, value: ElementId) -> ElementId: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def NumberForScale(self) -> float: ...
    @NumberForScale.setter
    def NumberForScale(self, value: float) -> float: ...
    @property
    def NumberOfSteps(self) -> int: ...
    @NumberOfSteps.setter
    def NumberOfSteps(self, value: int) -> int: ...
    @property
    def Rounding(self) -> float: ...
    @Rounding.setter
    def Rounding(self, value: float) -> float: ...
    @property
    def ScaleHeight(self) -> int: ...
    @ScaleHeight.setter
    def ScaleHeight(self, value: int) -> int: ...
    @property
    def ShowDataDescription(self) -> bool: ...
    @ShowDataDescription.setter
    def ShowDataDescription(self, value: bool) -> bool: ...
    @property
    def ShowDataName(self) -> bool: ...
    @ShowDataName.setter
    def ShowDataName(self, value: bool) -> bool: ...
    @property
    def ShowLegend(self) -> bool: ...
    @ShowLegend.setter
    def ShowLegend(self, value: bool) -> bool: ...
    @property
    def ShowUnits(self) -> bool: ...
    @ShowUnits.setter
    def ShowUnits(self, value: bool) -> bool: ...
    @property
    def TextTypeId(self) -> ElementId: ...
    @TextTypeId.setter
    def TextTypeId(self, value: ElementId) -> ElementId: ...
    def Dispose(self) -> None: ...
    def IsEqual(self, other: AnalysisDisplayLegendSettings) -> bool: ...


class AnalysisDisplayMarkersAndTextSettings(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: AnalysisDisplayMarkersAndTextSettings) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def MarkerSize(self) -> float: ...
    @MarkerSize.setter
    def MarkerSize(self, value: float) -> float: ...
    @property
    def MarkerType(self) -> AnalysisDisplayStyleMarkerType: ...
    @MarkerType.setter
    def MarkerType(self, value: AnalysisDisplayStyleMarkerType) -> AnalysisDisplayStyleMarkerType: ...
    @property
    def Rounding(self) -> float: ...
    @Rounding.setter
    def Rounding(self, value: float) -> float: ...
    @property
    def TextLabelType(self) -> AnalysisDisplayStyleMarkerTextLabelType: ...
    @TextLabelType.setter
    def TextLabelType(self, value: AnalysisDisplayStyleMarkerTextLabelType) -> AnalysisDisplayStyleMarkerTextLabelType: ...
    @property
    def TextTypeId(self) -> ElementId: ...
    @TextTypeId.setter
    def TextTypeId(self, value: ElementId) -> ElementId: ...
    def Dispose(self) -> None: ...
    def IsEqual(self, other: AnalysisDisplayMarkersAndTextSettings) -> bool: ...


class AnalysisDisplayStyle(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def FindByName(document: Document, name: str) -> ElementId: ...
    def GetColoredSurfaceSettings(self) -> AnalysisDisplayColoredSurfaceSettings: ...
    def GetColorSettings(self) -> AnalysisDisplayColorSettings: ...
    def GetDeformedShapeSettings(self) -> AnalysisDisplayDeformedShapeSettings: ...
    def GetDiagramSettings(self) -> AnalysisDisplayDiagramSettings: ...
    @staticmethod
    def GetElements(document: Document) -> ICollection_1[ElementId]: ...
    def GetLegendSettings(self) -> AnalysisDisplayLegendSettings: ...
    def GetMarkersAndTextSettings(self) -> AnalysisDisplayMarkersAndTextSettings: ...
    def GetVectorSettings(self) -> AnalysisDisplayVectorSettings: ...
    def HasColoredSurfaceSettings(self) -> bool: ...
    def HasDeformedShapeSettings(self) -> bool: ...
    def HasDiagramSettings(self) -> bool: ...
    def HasMarkersAndTextSettings(self) -> bool: ...
    def HasVectorSettings(self) -> bool: ...
    @staticmethod
    def IsNameUnique(document: Document, name: str, excludedElement: AnalysisDisplayStyle) -> bool: ...
    @staticmethod
    def IsTextTypeIdValid(textTypeId: ElementId, doc: Document) -> bool: ...
    def SetColoredSurfaceSettings(self, coloredSurfaceSettings: AnalysisDisplayColoredSurfaceSettings) -> None: ...
    def SetColorSettings(self, colorSettings: AnalysisDisplayColorSettings) -> None: ...
    def SetDeformedShapeSettings(self, deformedShapeSettings: AnalysisDisplayDeformedShapeSettings) -> None: ...
    def SetDiagramSettings(self, diagramSettings: AnalysisDisplayDiagramSettings) -> None: ...
    def SetLegendSettings(self, legendSettings: AnalysisDisplayLegendSettings) -> None: ...
    def SetMarkersAndTextSettings(self, markersAndTextSettings: AnalysisDisplayMarkersAndTextSettings) -> None: ...
    def SetName(self, name: str) -> None: ...
    def SetVectorSettings(self, vectorSettings: AnalysisDisplayVectorSettings) -> None: ...
    # Skipped CreateAnalysisDisplayStyle due to it being static, abstract and generic.

    CreateAnalysisDisplayStyle : CreateAnalysisDisplayStyle_MethodGroup
    class CreateAnalysisDisplayStyle_MethodGroup:
        @typing.overload
        def __call__(self, document: Document, name: str, coloredSurfaceSettings: AnalysisDisplayColoredSurfaceSettings, colorSettings: AnalysisDisplayColorSettings, legendSettings: AnalysisDisplayLegendSettings) -> AnalysisDisplayStyle:...
        @typing.overload
        def __call__(self, document: Document, name: str, deformedShapeSettings: AnalysisDisplayDeformedShapeSettings, colorSettings: AnalysisDisplayColorSettings, legendSettings: AnalysisDisplayLegendSettings) -> AnalysisDisplayStyle:...
        @typing.overload
        def __call__(self, document: Document, name: str, diagramSettings: AnalysisDisplayDiagramSettings, colorSettings: AnalysisDisplayColorSettings, legendSettings: AnalysisDisplayLegendSettings) -> AnalysisDisplayStyle:...
        @typing.overload
        def __call__(self, document: Document, name: str, markersAndTextSettings: AnalysisDisplayMarkersAndTextSettings, colorSettings: AnalysisDisplayColorSettings, legendSettings: AnalysisDisplayLegendSettings) -> AnalysisDisplayStyle:...
        @typing.overload
        def __call__(self, document: Document, name: str, vectorSettings: AnalysisDisplayVectorSettings, colorSettings: AnalysisDisplayColorSettings, legendSettings: AnalysisDisplayLegendSettings) -> AnalysisDisplayStyle:...



class AnalysisDisplayStyleColorSettingsType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    GradientColor : AnalysisDisplayStyleColorSettingsType # 0
    SolidColorRanges : AnalysisDisplayStyleColorSettingsType # 1


class AnalysisDisplayStyleDeformedShapeTextLabelType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ShowAll : AnalysisDisplayStyleDeformedShapeTextLabelType # 0
    ShowNone : AnalysisDisplayStyleDeformedShapeTextLabelType # 1
    ShowPredefined : AnalysisDisplayStyleDeformedShapeTextLabelType # 2


class AnalysisDisplayStyleDiagramFenceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ShowAll : AnalysisDisplayStyleDiagramFenceType # 0
    ShowNone : AnalysisDisplayStyleDiagramFenceType # 1
    ShowPredefined : AnalysisDisplayStyleDiagramFenceType # 2


class AnalysisDisplayStyleDiagramTextLabelType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ShowAll : AnalysisDisplayStyleDiagramTextLabelType # 0
    ShowNone : AnalysisDisplayStyleDiagramTextLabelType # 1
    ShowPredefined : AnalysisDisplayStyleDiagramTextLabelType # 2


class AnalysisDisplayStyleMarkerTextLabelType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ShowAll : AnalysisDisplayStyleMarkerTextLabelType # 0
    ShowNone : AnalysisDisplayStyleMarkerTextLabelType # 1
    ShowPredefined : AnalysisDisplayStyleMarkerTextLabelType # 2


class AnalysisDisplayStyleMarkerType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Circle : AnalysisDisplayStyleMarkerType # 0
    Square : AnalysisDisplayStyleMarkerType # 1
    Triangle : AnalysisDisplayStyleMarkerType # 2


class AnalysisDisplayStyleVectorArrowheadScale(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NoScaling : AnalysisDisplayStyleVectorArrowheadScale # 0
    Length5Percent : AnalysisDisplayStyleVectorArrowheadScale # 1
    Length10Percent : AnalysisDisplayStyleVectorArrowheadScale # 2
    Length15Percent : AnalysisDisplayStyleVectorArrowheadScale # 3
    Length20Percent : AnalysisDisplayStyleVectorArrowheadScale # 4
    NoArrow : AnalysisDisplayStyleVectorArrowheadScale # 5


class AnalysisDisplayStyleVectorOrientation(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Linear : AnalysisDisplayStyleVectorOrientation # 0
    ArcAroundVectorAxis : AnalysisDisplayStyleVectorOrientation # 1


class AnalysisDisplayStyleVectorPosition(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ToDataPoint : AnalysisDisplayStyleVectorPosition # 0
    FromDataPoint : AnalysisDisplayStyleVectorPosition # 1


class AnalysisDisplayStyleVectorTextType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ShowAll : AnalysisDisplayStyleVectorTextType # 0
    ShowNone : AnalysisDisplayStyleVectorTextType # 1
    ShowPredefined : AnalysisDisplayStyleVectorTextType # 2


class AnalysisDisplayVectorSettings(IDisposable):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: AnalysisDisplayVectorSettings) -> None: ...
    @property
    def ArrowheadScale(self) -> AnalysisDisplayStyleVectorArrowheadScale: ...
    @ArrowheadScale.setter
    def ArrowheadScale(self, value: AnalysisDisplayStyleVectorArrowheadScale) -> AnalysisDisplayStyleVectorArrowheadScale: ...
    @property
    def ArrowLineWeight(self) -> int: ...
    @ArrowLineWeight.setter
    def ArrowLineWeight(self, value: int) -> int: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def Rounding(self) -> float: ...
    @Rounding.setter
    def Rounding(self, value: float) -> float: ...
    @property
    def TextTypeId(self) -> ElementId: ...
    @TextTypeId.setter
    def TextTypeId(self, value: ElementId) -> ElementId: ...
    @property
    def VectorOrientation(self) -> AnalysisDisplayStyleVectorOrientation: ...
    @VectorOrientation.setter
    def VectorOrientation(self, value: AnalysisDisplayStyleVectorOrientation) -> AnalysisDisplayStyleVectorOrientation: ...
    @property
    def VectorPosition(self) -> AnalysisDisplayStyleVectorPosition: ...
    @VectorPosition.setter
    def VectorPosition(self, value: AnalysisDisplayStyleVectorPosition) -> AnalysisDisplayStyleVectorPosition: ...
    @property
    def VectorTextType(self) -> AnalysisDisplayStyleVectorTextType: ...
    @VectorTextType.setter
    def VectorTextType(self, value: AnalysisDisplayStyleVectorTextType) -> AnalysisDisplayStyleVectorTextType: ...
    def Dispose(self) -> None: ...
    def IsEqual(self, other: AnalysisDisplayVectorSettings) -> bool: ...


class AnalysisMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BuildingElements : AnalysisMode # 0
    ConceptualMasses : AnalysisMode # 1
    ConceptualMassesAndBuildingElements : AnalysisMode # 2
    RoomsOrSpaces : AnalysisMode # 3


class AnalysisResultSchema(IDisposable):
    @typing.overload
    def __init__(self, name: str, description: str) -> None: ...
    @typing.overload
    def __init__(self, other: AnalysisResultSchema) -> None: ...
    @property
    def AnalysisDisplayStyleId(self) -> ElementId: ...
    @AnalysisDisplayStyleId.setter
    def AnalysisDisplayStyleId(self, value: ElementId) -> ElementId: ...
    @property
    def CurrentUnits(self) -> int: ...
    @CurrentUnits.setter
    def CurrentUnits(self, value: int) -> int: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def IsVisible(self) -> bool: ...
    @IsVisible.setter
    def IsVisible(self, value: bool) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Scale(self) -> float: ...
    @Scale.setter
    def Scale(self, value: float) -> float: ...
    def Dispose(self) -> None: ...
    def GetNumberOfUnits(self) -> int: ...
    def GetUnitsMultiplier(self, index: int) -> float: ...
    def GetUnitsName(self, index: int) -> str: ...
    def IsEqual(self, other: AnalysisResultSchema) -> bool: ...
    def SetUnits(self, names: IList_1[str], multipliers: IList_1[float]) -> None: ...


class BuildingEnvelopeAnalyzer(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    @staticmethod
    def Create(document: Document, options: BuildingEnvelopeAnalyzerOptions) -> BuildingEnvelopeAnalyzer: ...
    def Dispose(self) -> None: ...
    def GetBoundingElements(self) -> IList_1[LinkElementId]: ...
    def GetBoundingElementsForSpaceVolume(self, spaceVolume: int) -> IList_1[LinkElementId]: ...
    def GetCenterPointsForConnectedGridCellsInSpaceVolume(self, spaceVolume: int) -> IList_1[XYZ]: ...


class BuildingEnvelopeAnalyzerOptions(IDisposable):
    def __init__(self) -> None: ...
    @property
    def AnalyzeEnclosedSpaceVolumes(self) -> bool: ...
    @AnalyzeEnclosedSpaceVolumes.setter
    def AnalyzeEnclosedSpaceVolumes(self, value: bool) -> bool: ...
    @property
    def GridCellSize(self) -> float: ...
    @GridCellSize.setter
    def GridCellSize(self, value: float) -> float: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def OptimizeGridCellSize(self) -> bool: ...
    @OptimizeGridCellSize.setter
    def OptimizeGridCellSize(self, value: bool) -> bool: ...
    def Dispose(self) -> None: ...


class ConceptualConstructionFloorSlabType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LightweightConstructionHighInsulation : ConceptualConstructionFloorSlabType # 0
    LightweightConstructionTypicalInsulation : ConceptualConstructionFloorSlabType # 1
    LightweightConstructionLowInsulation : ConceptualConstructionFloorSlabType # 2
    LightweightConstructionNoInsulationInterior : ConceptualConstructionFloorSlabType # 3
    HighMassConstructionFrigidClimateSlabInsulation : ConceptualConstructionFloorSlabType # 4
    HighMassConstructionColdClimateSlabInsulation : ConceptualConstructionFloorSlabType # 5
    HighMassConstructionTypicalNoInsulation : ConceptualConstructionFloorSlabType # 6
    NumFloorSlabTypeConstruction : ConceptualConstructionFloorSlabType # 7
    InvalidFloorSlabTypeConstruction : ConceptualConstructionFloorSlabType # -1


class ConceptualConstructionOpeningType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Air : ConceptualConstructionOpeningType # 0
    NumOpeningTypeConstruction : ConceptualConstructionOpeningType # 1
    InvalidOpeningTypeConstruction : ConceptualConstructionOpeningType # -1


class ConceptualConstructionRoofType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    HighInsulationCoolRoof : ConceptualConstructionRoofType # 0
    HighInsulationDarkRoof : ConceptualConstructionRoofType # 1
    TypicalInsulationCoolRoof : ConceptualConstructionRoofType # 2
    TypicalInsulationDarkRoof : ConceptualConstructionRoofType # 3
    LowInsulationCoolRoof : ConceptualConstructionRoofType # 4
    LowInsulationDarkRoof : ConceptualConstructionRoofType # 5
    NoInsulationDarkRoof : ConceptualConstructionRoofType # 6
    NumRoofTypeConstruction : ConceptualConstructionRoofType # 7
    InvalidRoofTypeConstruction : ConceptualConstructionRoofType # -1


class ConceptualConstructionShadeType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    BasicShade : ConceptualConstructionShadeType # 0
    NumShadeTypeConstruction : ConceptualConstructionShadeType # 1
    InvalidShadeTypeConstruction : ConceptualConstructionShadeType # -1


class ConceptualConstructionType(ElementType):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBeCopied(self) -> bool: ...
    @property
    def CanBeDeleted(self) -> bool: ...
    @property
    def CanBeRenamed(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FamilyName(self) -> str: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MassSurfaceSubCategoryId(self) -> ElementId: ...
    @property
    def MaterialId(self) -> ElementId: ...
    @MaterialId.setter
    def MaterialId(self, value: ElementId) -> ElementId: ...
    @property
    def Name(self) -> None: ...
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def GetAllConceptualConstructionsForCategory(ccda: Document, massSubCategoryId: ElementId) -> ICollection_1[ElementId]: ...
    @staticmethod
    def GetFloorOrSlabConstructionType(ccda: Document, typeEnum: ConceptualConstructionFloorSlabType) -> ElementId: ...
    def GetGBSId(self, massSurfaceSubCategoryId: ElementId) -> int: ...
    @staticmethod
    def GetOpeningConstructionType(ccda: Document, typeEnum: ConceptualConstructionOpeningType) -> ElementId: ...
    @staticmethod
    def GetRoofConstructionType(ccda: Document, typeEnum: ConceptualConstructionRoofType) -> ElementId: ...
    @staticmethod
    def GetShadeConstructionType(ccda: Document, typeEnum: ConceptualConstructionShadeType) -> ElementId: ...
    @staticmethod
    def GetWallConstructionType(ccda: Document, typeEnum: ConceptualConstructionWallType) -> ElementId: ...
    @staticmethod
    def GetWindowOrSkylightConstructionType(ccda: Document, typeEnum: ConceptualConstructionWindowSkylightType) -> ElementId: ...
    @staticmethod
    def IsValidConceptualConstructionId(ccda: Document, constructionTypeId: ElementId) -> bool: ...
    @staticmethod
    def IsValidConceptualConstructionIdForCategory(ccda: Document, constructionTypeId: ElementId, massSubcategoryId: ElementId) -> bool: ...
    @staticmethod
    def IsValidSubcategoryForMassSurfaceDatas(massSubCategoryId: ElementId) -> bool: ...
    def IsValidSurfaceSubcategoryForConstruction(self, massSurfaceSubcategoryId: ElementId) -> bool: ...


class ConceptualConstructionWallType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LightweightConstructionHighInsulation : ConceptualConstructionWallType # 0
    LightweightConstructionTypicalColdClimateInsulation : ConceptualConstructionWallType # 1
    LightweightConstructionTypicalMildClimateInsulation : ConceptualConstructionWallType # 2
    LightweightConstructionLowInsulation : ConceptualConstructionWallType # 3
    LightweightConstructionNoInsulationInterior : ConceptualConstructionWallType # 4
    HighMassConstructionHighInsulation : ConceptualConstructionWallType # 5
    HighMassConstructionTypicalColdClimateInsulation : ConceptualConstructionWallType # 6
    HighMassConstructionTypicalMildClimateInsulation : ConceptualConstructionWallType # 7
    HighMassConstructionNoInsulationInterior : ConceptualConstructionWallType # 8
    NumWallTypeConstruction : ConceptualConstructionWallType # 9
    InvalidExteriorWallTypeConstruction : ConceptualConstructionWallType # -1


class ConceptualConstructionWindowSkylightType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SinglePaneClearNoCoating : ConceptualConstructionWindowSkylightType # 0
    SinglePaneTinted : ConceptualConstructionWindowSkylightType # 1
    SinglePaneReflective : ConceptualConstructionWindowSkylightType # 2
    DoublePaneClearNoCoating : ConceptualConstructionWindowSkylightType # 3
    DoublePaneTinted : ConceptualConstructionWindowSkylightType # 4
    DoublePaneReflective : ConceptualConstructionWindowSkylightType # 5
    DoublePaneClearLowEColdClimateHighSHGC : ConceptualConstructionWindowSkylightType # 6
    DoublePaneClearLowEHotClimateLowSHGC : ConceptualConstructionWindowSkylightType # 7
    DoublePaneClearHighestPerformanceLowEHighVisTransLowSHGC : ConceptualConstructionWindowSkylightType # 8
    TriplePaneClearLowEHotOrColdClimate : ConceptualConstructionWindowSkylightType # 9
    QuadPaneClearLowEHotOrColdClimate : ConceptualConstructionWindowSkylightType # 10
    NumWindowSkylightTypeConstruction : ConceptualConstructionWindowSkylightType # 11
    InvalidWindowSkylightTypeConstruction : ConceptualConstructionWindowSkylightType # -1


class ConceptualSurfaceType(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DefaultConstructionTypeId(self) -> ElementId: ...
    @DefaultConstructionTypeId.setter
    def DefaultConstructionTypeId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MassSubCategoryId(self) -> ElementId: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def GetAllMassSubCategoryIds() -> IList_1[ElementId]: ...
    @staticmethod
    def GetByMassSubCategoryId(cda: Document, massSubCategoryId: ElementId) -> ConceptualSurfaceType: ...
    def GetConstructionTypeIds(self) -> ICollection_1[ElementId]: ...


class ConstructionType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ExteriorWall : ConstructionType # 0
    InteriorWall : ConstructionType # 1
    Slab : ConstructionType # 2
    Roof : ConstructionType # 3
    Ceiling : ConstructionType # 4
    Floor : ConstructionType # 5
    Door : ConstructionType # 6
    ExteriorWindow : ConstructionType # 7
    InteriorWindow : ConstructionType # 8
    Skylight : ConstructionType # 9


class EnergyAnalysisDetailModel(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def BuildingTypeId(self) -> ElementId: ...
    @BuildingTypeId.setter
    def BuildingTypeId(self, value: ElementId) -> ElementId: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def ExportCategory(self) -> ElementId: ...
    @ExportCategory.setter
    def ExportCategory(self, value: ElementId) -> ElementId: ...
    @property
    def ExportMullions(self) -> bool: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IncludeShadingSurfaces(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def SimplifyCurtainSystems(self) -> bool: ...
    @property
    def Tier(self) -> EnergyAnalysisDetailModelTier: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(document: Document, options: EnergyAnalysisDetailModelOptions) -> EnergyAnalysisDetailModel: ...
    def GetAnalyticalOpenings(self) -> IList_1[EnergyAnalysisOpening]: ...
    def GetAnalyticalShadingSurfaces(self) -> IList_1[EnergyAnalysisSurface]: ...
    def GetAnalyticalSpaces(self) -> IList_1[EnergyAnalysisSpace]: ...
    def GetAnalyticalSurfaces(self) -> IList_1[EnergyAnalysisSurface]: ...
    @staticmethod
    def GetMainEnergyAnalysisDetailModel(document: Document) -> EnergyAnalysisDetailModel: ...
    def TransformModel(self) -> None: ...


class EnergyAnalysisDetailModelOptions(IDisposable):
    def __init__(self) -> None: ...
    @property
    def EnergyModelType(self) -> EnergyModelType: ...
    @EnergyModelType.setter
    def EnergyModelType(self, value: EnergyModelType) -> EnergyModelType: ...
    @property
    def ExportMullions(self) -> bool: ...
    @ExportMullions.setter
    def ExportMullions(self, value: bool) -> bool: ...
    @property
    def IncludeShadingSurfaces(self) -> bool: ...
    @IncludeShadingSurfaces.setter
    def IncludeShadingSurfaces(self, value: bool) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def SimplifyCurtainSystems(self) -> bool: ...
    @SimplifyCurtainSystems.setter
    def SimplifyCurtainSystems(self, value: bool) -> bool: ...
    @property
    def Tier(self) -> EnergyAnalysisDetailModelTier: ...
    @Tier.setter
    def Tier(self, value: EnergyAnalysisDetailModelTier) -> EnergyAnalysisDetailModelTier: ...
    def Dispose(self) -> None: ...


class EnergyAnalysisDetailModelTier(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotComputed : EnergyAnalysisDetailModelTier # 0
    FirstLevelBoundaries : EnergyAnalysisDetailModelTier # 1
    SecondLevelBoundaries : EnergyAnalysisDetailModelTier # 2
    Final : EnergyAnalysisDetailModelTier # 3


class EnergyAnalysisOpening(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CADLinkUniqueId(self) -> str: ...
    @property
    def CADObjectUniqueId(self) -> str: ...
    @property
    def Category(self) -> Category: ...
    @property
    def Corner(self) -> XYZ: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Height(self) -> float: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OpeningId(self) -> str: ...
    @property
    def OpeningName(self) -> str: ...
    @property
    def OpeningType(self) -> EnergyAnalysisOpeningType: ...
    @property
    def OriginatingElementDescription(self) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def Type(self) -> gbXMLOpeningType: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def Width(self) -> float: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def GetAnalyticalSurface(self) -> EnergyAnalysisSurface: ...
    def GetPolyloop(self) -> Polyloop: ...


class EnergyAnalysisOpeningType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Door : EnergyAnalysisOpeningType # 0
    Window : EnergyAnalysisOpeningType # 1
    Skylight : EnergyAnalysisOpeningType # 2
    Air : EnergyAnalysisOpeningType # 3


class EnergyAnalysisSpace(Element):
    @property
    def AnalyticalVolume(self) -> float: ...
    @property
    def Area(self) -> float: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CADObjectUniqueId(self) -> str: ...
    @property
    def Category(self) -> Category: ...
    @property
    def ComposedName(self) -> str: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def Description(self) -> str: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def InnerVolume(self) -> float: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def SpaceName(self) -> str: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def GetAnalyticalSurfaces(self) -> IList_1[EnergyAnalysisSurface]: ...
    def GetBoundary(self) -> IList_1[Polyloop]: ...
    def GetClosedShell(self) -> IList_1[Polyloop]: ...


class EnergyAnalysisSurface(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def Azimuth(self) -> float: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CADLinkUniqueId(self) -> str: ...
    @property
    def CADObjectUniqueId(self) -> str: ...
    @property
    def Category(self) -> Category: ...
    @property
    def Corner(self) -> XYZ: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Height(self) -> float: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Normal(self) -> XYZ: ...
    @property
    def OriginatingElementDescription(self) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def SurfaceId(self) -> str: ...
    @property
    def SurfaceName(self) -> str: ...
    @property
    def SurfaceType(self) -> EnergyAnalysisSurfaceType: ...
    @property
    def Tilt(self) -> float: ...
    @property
    def Type(self) -> gbXMLSurfaceType: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def Width(self) -> float: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def GetAdjacentAnalyticalSpace(self) -> EnergyAnalysisSpace: ...
    def GetAnalyticalOpenings(self) -> IList_1[EnergyAnalysisOpening]: ...
    def GetAnalyticalSpace(self) -> EnergyAnalysisSpace: ...
    def GetPolyloop(self) -> Polyloop: ...


class EnergyAnalysisSurfaceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Roof : EnergyAnalysisSurfaceType # 0
    ExteriorWall : EnergyAnalysisSurfaceType # 1
    InteriorWall : EnergyAnalysisSurfaceType # 2
    Ceiling : EnergyAnalysisSurfaceType # 3
    InteriorFloor : EnergyAnalysisSurfaceType # 4
    ExteriorFloor : EnergyAnalysisSurfaceType # 5
    Shading : EnergyAnalysisSurfaceType # 6
    Air : EnergyAnalysisSurfaceType # 7
    Underground : EnergyAnalysisSurfaceType # 8


class EnergyDataSettings(Element):
    @property
    def AnalysisType(self) -> AnalysisMode: ...
    @AnalysisType.setter
    def AnalysisType(self, value: AnalysisMode) -> AnalysisMode: ...
    @property
    def AnalyticalGridCellSize(self) -> float: ...
    @AnalyticalGridCellSize.setter
    def AnalyticalGridCellSize(self, value: float) -> float: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def BuildingConstructionClass(self) -> HVACLoadConstructionClass: ...
    @BuildingConstructionClass.setter
    def BuildingConstructionClass(self, value: HVACLoadConstructionClass) -> HVACLoadConstructionClass: ...
    @property
    def BuildingEnvelopeDeterminationMethod(self) -> gbXMLExportBuildingEnvelope: ...
    @BuildingEnvelopeDeterminationMethod.setter
    def BuildingEnvelopeDeterminationMethod(self, value: gbXMLExportBuildingEnvelope) -> gbXMLExportBuildingEnvelope: ...
    @property
    def BuildingHVACSystem(self) -> gbXMLBuildingHVACSystem: ...
    @BuildingHVACSystem.setter
    def BuildingHVACSystem(self, value: gbXMLBuildingHVACSystem) -> gbXMLBuildingHVACSystem: ...
    @property
    def BuildingOperatingSchedule(self) -> gbXMLBuildingOperatingSchedule: ...
    @BuildingOperatingSchedule.setter
    def BuildingOperatingSchedule(self, value: gbXMLBuildingOperatingSchedule) -> gbXMLBuildingOperatingSchedule: ...
    @property
    def BuildingType(self) -> gbXMLBuildingType: ...
    @BuildingType.setter
    def BuildingType(self, value: gbXMLBuildingType) -> gbXMLBuildingType: ...
    @property
    def BuildingTypeId(self) -> ElementId: ...
    @BuildingTypeId.setter
    def BuildingTypeId(self, value: ElementId) -> ElementId: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CoreOffset(self) -> float: ...
    @CoreOffset.setter
    def CoreOffset(self, value: float) -> float: ...
    @property
    def CreateAnalyticalModel(self) -> bool: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def DividePerimeter(self) -> bool: ...
    @DividePerimeter.setter
    def DividePerimeter(self, value: bool) -> bool: ...
    @property
    def Document(self) -> Document: ...
    @property
    def EnergyModel(self) -> bool: ...
    @EnergyModel.setter
    def EnergyModel(self, value: bool) -> bool: ...
    @property
    def ExportCategory(self) -> ElementId: ...
    @ExportCategory.setter
    def ExportCategory(self, value: ElementId) -> ElementId: ...
    @property
    def ExportComplexity(self) -> gbXMLExportComplexity: ...
    @ExportComplexity.setter
    def ExportComplexity(self, value: gbXMLExportComplexity) -> gbXMLExportComplexity: ...
    @property
    def ExportDefaults(self) -> bool: ...
    @ExportDefaults.setter
    def ExportDefaults(self, value: bool) -> bool: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroundPlane(self) -> ElementId: ...
    @GroundPlane.setter
    def GroundPlane(self, value: ElementId) -> ElementId: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IncludeThermalProperties(self) -> bool: ...
    @IncludeThermalProperties.setter
    def IncludeThermalProperties(self, value: bool) -> bool: ...
    @property
    def IsExportMullionsEnabled(self) -> bool: ...
    @property
    def IsExportShadingSurfacesEnabled(self) -> bool: ...
    @property
    def IsExportSimplifiedCurtainSystemsEnabled(self) -> bool: ...
    @property
    def IsGlazingShaded(self) -> bool: ...
    @IsGlazingShaded.setter
    def IsGlazingShaded(self, value: bool) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OutsideAirChangesRatePerHour(self) -> float: ...
    @OutsideAirChangesRatePerHour.setter
    def OutsideAirChangesRatePerHour(self, value: float) -> float: ...
    @property
    def OutsideAirPerArea(self) -> float: ...
    @OutsideAirPerArea.setter
    def OutsideAirPerArea(self, value: float) -> float: ...
    @property
    def OutsideAirPerPerson(self) -> float: ...
    @OutsideAirPerPerson.setter
    def OutsideAirPerPerson(self, value: float) -> float: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def PercentageGlazing(self) -> float: ...
    @PercentageGlazing.setter
    def PercentageGlazing(self, value: float) -> float: ...
    @property
    def PercentageSkylights(self) -> float: ...
    @PercentageSkylights.setter
    def PercentageSkylights(self, value: float) -> float: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def ProjectPhase(self) -> ElementId: ...
    @ProjectPhase.setter
    def ProjectPhase(self, value: ElementId) -> ElementId: ...
    @property
    def ProjectReportType(self) -> HVACLoadLoadsReportType: ...
    @ProjectReportType.setter
    def ProjectReportType(self, value: HVACLoadLoadsReportType) -> HVACLoadLoadsReportType: ...
    @property
    def ReportsFolder(self) -> str: ...
    @property
    def ServiceType(self) -> gbXMLServiceType: ...
    @ServiceType.setter
    def ServiceType(self, value: gbXMLServiceType) -> gbXMLServiceType: ...
    @property
    def ShadeDepth(self) -> float: ...
    @ShadeDepth.setter
    def ShadeDepth(self, value: float) -> float: ...
    @property
    def SillHeight(self) -> float: ...
    @SillHeight.setter
    def SillHeight(self, value: float) -> float: ...
    @property
    def SkylightWidth(self) -> float: ...
    @SkylightWidth.setter
    def SkylightWidth(self, value: float) -> float: ...
    @property
    def SliverSpaceTolerance(self) -> float: ...
    @SliverSpaceTolerance.setter
    def SliverSpaceTolerance(self, value: float) -> float: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def UseAirChangesPerHour(self) -> bool: ...
    @UseAirChangesPerHour.setter
    def UseAirChangesPerHour(self, value: bool) -> bool: ...
    @property
    def UseHeatingCredits(self) -> bool: ...
    @UseHeatingCredits.setter
    def UseHeatingCredits(self, value: bool) -> bool: ...
    @property
    def UseOutsideAirPerArea(self) -> bool: ...
    @UseOutsideAirPerArea.setter
    def UseOutsideAirPerArea(self, value: bool) -> bool: ...
    @property
    def UseOutsideAirPerPerson(self) -> bool: ...
    @UseOutsideAirPerPerson.setter
    def UseOutsideAirPerPerson(self, value: bool) -> bool: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def CheckAnalysisType(analysisType: AnalysisMode) -> bool: ...
    @staticmethod
    def CheckBuildingConstructionClass(buildingConstructionClass: HVACLoadConstructionClass) -> bool: ...
    @staticmethod
    def CheckBuildingEnvelope(determinationMethod: gbXMLExportBuildingEnvelope) -> bool: ...
    @staticmethod
    def CheckBuildingHVACSystem(buildingHVACSystem: gbXMLBuildingHVACSystem) -> bool: ...
    @staticmethod
    def CheckBuildingOperatingSchedule(buildingOperatingSchedule: gbXMLBuildingOperatingSchedule) -> bool: ...
    @staticmethod
    def CheckBuildingType(buildingType: gbXMLBuildingType) -> bool: ...
    def CheckConstructionSetElement(self, constructionSetElementId: ElementId) -> bool: ...
    @staticmethod
    def CheckExportCategory(exportCategoryId: ElementId) -> bool: ...
    @staticmethod
    def CheckExportComplexity(exportComplexity: gbXMLExportComplexity) -> bool: ...
    def CheckProjectPhase(self, projectPhaseId: ElementId) -> bool: ...
    @staticmethod
    def CheckProjectReportType(projectReportType: HVACLoadLoadsReportType) -> bool: ...
    @staticmethod
    def CheckRangeOfPercentageGlazing(percentageGlazing: float) -> bool: ...
    @staticmethod
    def CheckRangeOfPercentageSkylights(percentageSkylights: float) -> bool: ...
    @staticmethod
    def CheckRangeOfShadeDepth(shadeDepth: float) -> bool: ...
    @staticmethod
    def CheckRangeOfSillHeight(sillHeight: float) -> bool: ...
    @staticmethod
    def CheckRangeOfSkylightWidth(skylightWidth: float) -> bool: ...
    @staticmethod
    def CheckRangeOfSliverSpaceTolerance(silverSpaceTolerance: float) -> bool: ...
    @staticmethod
    def CheckServiceType(serviceType: gbXMLServiceType) -> bool: ...
    @staticmethod
    def EnableConceptualEnergyAnalyticalModel() -> bool: ...
    @staticmethod
    def GetBuildingConstructionSetElementId(ccda: Document) -> ElementId: ...
    @staticmethod
    def GetFromDocument(cda: Document) -> EnergyDataSettings: ...
    def GetReportsFolderParsed(self) -> str: ...
    @staticmethod
    def IsDocumentUsingEnergyDataAnalyticalModel(ccda: Document) -> bool: ...
    def SetCreateAnalyticalModel(self, createAnalyticalModel: bool) -> None: ...
    def SetReportsFolder(self, folderPath: str) -> None: ...
    # Skipped CheckGroundPlane due to it being static, abstract and generic.

    CheckGroundPlane : CheckGroundPlane_MethodGroup
    class CheckGroundPlane_MethodGroup:
        @typing.overload
        def __call__(self, groundPlaneId: ElementId) -> bool:...
        @typing.overload
        def __call__(self, ccda: Document, groundPlaneId: ElementId) -> bool:...



class EnergyModelType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    SpatialElement : EnergyModelType # 0
    BuildingElement : EnergyModelType # 1
    AnalysisMode : EnergyModelType # 2


class FieldDomainPoints(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...


class FieldDomainPointsByParameter(FieldDomainPoints):
    def __init__(self, points: IList_1[float]) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...


class FieldDomainPointsByUV(FieldDomainPoints):
    @typing.overload
    def __init__(self, points: IList_1[UV]) -> None: ...
    @typing.overload
    def __init__(self, points: IList_1[UV], uCoordinates: ICollection_1[float], vCoordinates: ICollection_1[float]) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...
    def SetGridCoordinates(self, uCoordinates: ICollection_1[float], vCoordinates: ICollection_1[float]) -> None: ...


class FieldDomainPointsByXYZ(FieldDomainPoints):
    def __init__(self, points: IList_1[XYZ]) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...


class FieldValues(IDisposable):
    @typing.overload
    def __init__(self, otherObject: FieldValues) -> None: ...
    @typing.overload
    def __init__(self, valueAtPoint: IList_1[ValueAtPoint]) -> None: ...
    @typing.overload
    def __init__(self, valueAtPoint: IList_1[ValueAtPoint], unitDirection: XYZ) -> None: ...
    @typing.overload
    def __init__(self, vectorAtPoint: IList_1[VectorAtPoint]) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...


class gbXMLBuildingHVACSystem(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    TwelveSEERSPointNineAFUESplitPackagedGasFiveToElevenTon : gbXMLBuildingHVACSystem # 0
    ElevenPointThreeEERPackagedVAVEightyFourPointFourPercentBoilerHeating : gbXMLBuildingHVACSystem # 1
    CentralVAVHWHeatChillerFivePointNinetySixCOPBoilersEightyFourPoint5Eff : gbXMLBuildingHVACSystem # 2
    FourPipeFanCoilSystemChillerFivePointNinetySixCOPBoilersEightFourPointFiveEff : gbXMLBuildingHVACSystem # 3
    CentralVAVElectricResistanceHeatChillerFivePointNinetySixCOP : gbXMLBuildingHVACSystem # 4
    TwelveSEERSevenPointSevenHSPFSplitPackagedHeatPump : gbXMLBuildingHVACSystem # 5
    TwoPipeFanCoilSystemChillerFivePointNinetySixCOPBoilersEightyFourPointFiveEff : gbXMLBuildingHVACSystem # 6
    TwelveSEEREightPointThreeHSPFPackagedTerminalHeatPumpPTAC : gbXMLBuildingHVACSystem # 7
    ResidentialSeventeenSEERNinePointSixHSPFSplitHPLessThanFivePointFiveTon : gbXMLBuildingHVACSystem # 8
    UnderfloorAirDistribution : gbXMLBuildingHVACSystem # 9
    ResidentialFourteenSEERPointNineAFUESplitPackagedGasLessThanFivePointFiveTon : gbXMLBuildingHVACSystem # 10
    ResidentialFourteenSEEREightPointThreeHSPFSplitPackagedHeatPump : gbXMLBuildingHVACSystem # 11
    NoOfHVACSystemEnums : gbXMLBuildingHVACSystem # 12


class gbXMLBuildingOperatingSchedule(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DefaultOperatingSchedule : gbXMLBuildingOperatingSchedule # 0
    TwentyFourHourSevenDayFacility : gbXMLBuildingOperatingSchedule # 1
    TwentyFourHourHourSixDayFacility : gbXMLBuildingOperatingSchedule # 2
    TwentyFourHourHourFiveDayFacility : gbXMLBuildingOperatingSchedule # 3
    TwelveHourSevenDayFacility : gbXMLBuildingOperatingSchedule # 4
    TwelveHourSixDayFacility : gbXMLBuildingOperatingSchedule # 5
    TwelveHourFiveDayFacility : gbXMLBuildingOperatingSchedule # 6
    KindergartenThruTwelveGradeSchool : gbXMLBuildingOperatingSchedule # 7
    YearRoundSchool : gbXMLBuildingOperatingSchedule # 8
    TheaterPerformingArts : gbXMLBuildingOperatingSchedule # 9
    Worship : gbXMLBuildingOperatingSchedule # 10
    NoOfOperatingScheduleEnums : gbXMLBuildingOperatingSchedule # 11


class gbXMLBuildingType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AutomotiveFacility : gbXMLBuildingType # 0
    ConventionCenter : gbXMLBuildingType # 1
    Courthouse : gbXMLBuildingType # 2
    DiningBarLoungeOrLeisure : gbXMLBuildingType # 3
    DiningCafeteriaFastFood : gbXMLBuildingType # 4
    DiningFamily : gbXMLBuildingType # 5
    Dormitory : gbXMLBuildingType # 6
    ExerciseCenter : gbXMLBuildingType # 7
    FireStation : gbXMLBuildingType # 8
    Gymnasium : gbXMLBuildingType # 9
    HospitalOrHealthcare : gbXMLBuildingType # 10
    Hotel : gbXMLBuildingType # 11
    Library : gbXMLBuildingType # 12
    Manufacturing : gbXMLBuildingType # 13
    Motel : gbXMLBuildingType # 14
    MotionPictureTheatre : gbXMLBuildingType # 15
    MultiFamily : gbXMLBuildingType # 16
    Museum : gbXMLBuildingType # 17
    Office : gbXMLBuildingType # 18
    ParkingGarage : gbXMLBuildingType # 19
    Penitentiary : gbXMLBuildingType # 20
    PerformingArtsTheater : gbXMLBuildingType # 21
    PoliceStation : gbXMLBuildingType # 22
    PostOffice : gbXMLBuildingType # 23
    ReligiousBuilding : gbXMLBuildingType # 24
    Retail : gbXMLBuildingType # 25
    SchoolOrUniversity : gbXMLBuildingType # 26
    SingleFamily : gbXMLBuildingType # 27
    SportsArena : gbXMLBuildingType # 28
    TownHall : gbXMLBuildingType # 29
    Transportation : gbXMLBuildingType # 30
    Warehouse : gbXMLBuildingType # 31
    Workshop : gbXMLBuildingType # 32
    NoOfBuildingTypes : gbXMLBuildingType # 33
    CustomizeBuildingType : gbXMLBuildingType # -2
    NoBuildingType : gbXMLBuildingType # -1


class gbXMLConditionType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Heated : gbXMLConditionType # 0
    Cooled : gbXMLConditionType # 1
    HeatedAndCooled : gbXMLConditionType # 2
    Unconditioned : gbXMLConditionType # 3
    Vented : gbXMLConditionType # 4
    NaturallyVentedOnly : gbXMLConditionType # 5
    NoOfConditionTypes : gbXMLConditionType # 6
    NoConditionType : gbXMLConditionType # -1


class gbXMLExportBuildingEnvelope(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    UseFunctionParameter : gbXMLExportBuildingEnvelope # 0
    IdentifyExteriorElements : gbXMLExportBuildingEnvelope # 1


class gbXMLExportComplexity(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Simple : gbXMLExportComplexity # 0
    SimpleWithShadingSurfaces : gbXMLExportComplexity # 1
    Complex : gbXMLExportComplexity # 2
    ComplexWithShadingSurfaces : gbXMLExportComplexity # 3
    ComplexWithMullionsAndShadingSurfaces : gbXMLExportComplexity # 4


class gbXMLOpeningType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    FixedWindow : gbXMLOpeningType # 0
    OperableWindow : gbXMLOpeningType # 1
    FixedSkylight : gbXMLOpeningType # 2
    OperableSkylight : gbXMLOpeningType # 3
    SlidingDoor : gbXMLOpeningType # 4
    NonSlidingDoor : gbXMLOpeningType # 5
    OpeningAir : gbXMLOpeningType # 6
    NoOfOpeningTypes : gbXMLOpeningType # 7


class gbXMLServiceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    CentralHeatingRadiators : gbXMLServiceType # 0
    CentralHeatingConvectors : gbXMLServiceType # 1
    CentralHeatingRadiantFloor : gbXMLServiceType # 2
    CentralHeatingHotAir : gbXMLServiceType # 3
    OtherRoomHeater : gbXMLServiceType # 4
    RadiantHeaterFlue : gbXMLServiceType # 5
    RadiantHeaterNoFlue : gbXMLServiceType # 6
    RadiantHeaterMultiburner : gbXMLServiceType # 7
    ForcedConvectionHeaterFlue : gbXMLServiceType # 8
    ForcedConvectionHeaterNoFlue : gbXMLServiceType # 9
    VAVSingleDuct : gbXMLServiceType # 10
    VAVDualDuct : gbXMLServiceType # 11
    VAVIndoorPackagedCabinet : gbXMLServiceType # 12
    VAVTerminalReheat : gbXMLServiceType # 13
    FanCoilSystem : gbXMLServiceType # 14
    InductionSystem : gbXMLServiceType # 15
    ConstantVolumeFixedOA : gbXMLServiceType # 16
    ConstantVolumeVariableOA : gbXMLServiceType # 17
    ConstantVolumeTerminalReheat : gbXMLServiceType # 18
    MultizoneHotDeckColdDeck : gbXMLServiceType # 19
    ConstantVolumeDualDuct : gbXMLServiceType # 20
    RadiantCooledCeilings : gbXMLServiceType # 21
    ActiveChilledBeams : gbXMLServiceType # 22
    WaterLoopHeatPump : gbXMLServiceType # 23
    VariableRefrigerantFlow : gbXMLServiceType # 24
    SplitSystemsWithNaturalVentilation : gbXMLServiceType # 25
    SplitSystemsWithMechanicalVentilation : gbXMLServiceType # 26
    SplitSystemsWithMechanicalVentilationWithCooling : gbXMLServiceType # 27
    NoOfServiceTypes : gbXMLServiceType # 28
    NoServiceType : gbXMLServiceType # -1


class gbXMLSpaceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ActiveStorage : gbXMLSpaceType # 0
    ActiveStorageHospitalOrHealthcare : gbXMLSpaceType # 1
    AirOrTrainOrBusBaggageArea : gbXMLSpaceType # 2
    AirportConcourse : gbXMLSpaceType # 3
    AtriumEachAdditionalFloor : gbXMLSpaceType # 4
    AtriumFirstThreeFloors : gbXMLSpaceType # 5
    AudienceOrSeatingAreaPenitentiary : gbXMLSpaceType # 6
    AudienceOrSeatingAreaExerciseCenter : gbXMLSpaceType # 7
    AudienceOrSeatingAreaGymnasium : gbXMLSpaceType # 8
    AudienceOrSeatingAreaSportsArena : gbXMLSpaceType # 9
    AudienceOrSeatingAreaConventionCenter : gbXMLSpaceType # 10
    AudienceOrSeatingAreaMotionPictureTheatre : gbXMLSpaceType # 11
    AudienceOrSeatingAreaPerformingArtsTheatre : gbXMLSpaceType # 12
    AudienceOrSeatingAreaReligious : gbXMLSpaceType # 13
    AudienceOrSeatingAreaPoliceOrFireStations : gbXMLSpaceType # 14
    AudienceOrSeatingAreaCourtHouse : gbXMLSpaceType # 15
    AudienceOrSeatingAreaAuditorium : gbXMLSpaceType # 16
    BankCustomerArea : gbXMLSpaceType # 17
    BankingActivityAreaOffice : gbXMLSpaceType # 18
    BarberAndBeautyParlor : gbXMLSpaceType # 19
    CardFileAndCataloguingLibrary : gbXMLSpaceType # 20
    ClassroomOrLectureOrTrainingPenitentiary : gbXMLSpaceType # 21
    ClassroomOrLectureOrTraining : gbXMLSpaceType # 22
    ConfinementCellsPenitentiary : gbXMLSpaceType # 23
    ConfinementCellsCourtHouse : gbXMLSpaceType # 24
    ConferenceMeetingOrMultipurpose : gbXMLSpaceType # 25
    CorridorOrTransition : gbXMLSpaceType # 26
    CorridorOrTransitionManufacturingFacility : gbXMLSpaceType # 27
    CorridorsWithPatientWaitingExamHospitalOrHealthcare : gbXMLSpaceType # 28
    CourtSportsAreaSportsArena : gbXMLSpaceType # 29
    CourtroomCourtHouse : gbXMLSpaceType # 30
    DepartmentStoreSalesAreaRetail : gbXMLSpaceType # 31
    DetailedManufacturingFacility : gbXMLSpaceType # 32
    DiningArea : gbXMLSpaceType # 33
    DiningAreaHotel : gbXMLSpaceType # 34
    DiningAreaFamilyDining : gbXMLSpaceType # 35
    DiningAreaLoungeOrLeisureDining : gbXMLSpaceType # 36
    DiningAreaMotel : gbXMLSpaceType # 37
    DiningAreaTransportation : gbXMLSpaceType # 38
    DiningAreaPenitentiary : gbXMLSpaceType # 39
    DiningAreaCivilServices : gbXMLSpaceType # 40
    DormitoryBedroom : gbXMLSpaceType # 41
    DormitoryStudyHall : gbXMLSpaceType # 42
    DressingOrLockerOrFittingRoomGymnasium : gbXMLSpaceType # 43
    DressingOrLockerOrFittingRoomCourtHouse : gbXMLSpaceType # 44
    DressingOrLockerOrFittingRoomPerformingArtsTheatre : gbXMLSpaceType # 45
    DressingOrLockerOrFittingRoomAuditorium : gbXMLSpaceType # 46
    DressingOrLockerOrFittingRoomExerciseCenter : gbXMLSpaceType # 47
    ElectricalOrMechanical : gbXMLSpaceType # 48
    ElevatorLobbies : gbXMLSpaceType # 49
    EmergencyHospitalOrHealthcare : gbXMLSpaceType # 50
    EquipmentRoomManufacturingFacility : gbXMLSpaceType # 51
    ExamOrTreatmentHospitalOrHealthcare : gbXMLSpaceType # 52
    ExerciseAreaExerciseCenter : gbXMLSpaceType # 53
    ExerciseAreaGymnasium : gbXMLSpaceType # 54
    ExhibitSpaceConventionCenter : gbXMLSpaceType # 55
    FellowshipHallReligiousBuildings : gbXMLSpaceType # 56
    FineMaterialWarehouse : gbXMLSpaceType # 57
    FineMerchandiseSalesAreaRetail : gbXMLSpaceType # 58
    FireStationEngineRoomPoliceOrFireStation : gbXMLSpaceType # 59
    FoodPreparation : gbXMLSpaceType # 60
    GarageServiceOrRepairAutomotiveFacility : gbXMLSpaceType # 61
    GeneralHighBayManufacturingFacility : gbXMLSpaceType # 62
    GeneralLowBayManufacturingFacility : gbXMLSpaceType # 63
    GeneralExhibitionMuseum : gbXMLSpaceType # 64
    HospitalNurseryHospitalOrHealthcare : gbXMLSpaceType # 65
    HospitalOrMedicalSuppliesHospitalOrHealthcare : gbXMLSpaceType # 66
    HospitalOrRadiologyHospitalOrHealthcare : gbXMLSpaceType # 67
    HotelOrConferenceCenterConferenceOrMeeting : gbXMLSpaceType # 68
    InactiveStorage : gbXMLSpaceType # 69
    JudgesChambersCourtHouse : gbXMLSpaceType # 70
    LaboratoryOffice : gbXMLSpaceType # 71
    LaundryIroningAndSorting : gbXMLSpaceType # 72
    LaundryWashingHospitalOrHealthcare : gbXMLSpaceType # 73
    LibraryAudioVisualLibraryAudioVisual : gbXMLSpaceType # 74
    LivingQuartersDormitory : gbXMLSpaceType # 75
    LivingQuartersMotel : gbXMLSpaceType # 76
    LivingQuartersHotel : gbXMLSpaceType # 77
    Lobby : gbXMLSpaceType # 78
    LobbyReligiousBuildings : gbXMLSpaceType # 79
    LobbyMotionPictureTheatre : gbXMLSpaceType # 80
    LobbyAuditorium : gbXMLSpaceType # 81
    LobbyPerformingArtsTheatre : gbXMLSpaceType # 82
    LobbyPostOffice : gbXMLSpaceType # 83
    LobbyHotel : gbXMLSpaceType # 84
    LoungeOrRecreation : gbXMLSpaceType # 85
    MallConcourseSalesAreaRetail : gbXMLSpaceType # 86
    MassMerchandisingSalesAreaRetail : gbXMLSpaceType # 87
    MediumOrBulkyMaterialWarehouse : gbXMLSpaceType # 88
    MerchandisingSalesAreaRetail : gbXMLSpaceType # 89
    MuseumAndGalleryStorage : gbXMLSpaceType # 90
    NurseStationHospitalOrHealthcare : gbXMLSpaceType # 91
    OfficeEnclosed : gbXMLSpaceType # 92
    OfficeOpenPlan : gbXMLSpaceType # 93
    OfficeCommonActivityAreasInactiveStorage : gbXMLSpaceType # 94
    OperatingRoomHospitalOrHealthcare : gbXMLSpaceType # 95
    OtherTelevisedPlayingAreaSportsArena : gbXMLSpaceType # 96
    ParkingAreaAttendantOnlyParkingGarage : gbXMLSpaceType # 97
    ParkingAreaPedestrianParkingGarage : gbXMLSpaceType # 98
    PatientRoomHospitalOrHealthcare : gbXMLSpaceType # 99
    PersonalServicesSalesAreaRetail : gbXMLSpaceType # 100
    PharmacyHospitalOrHealthcare : gbXMLSpaceType # 101
    PhysicalTherapyHospitalOrHealthcare : gbXMLSpaceType # 102
    PlayingAreaGymnasium : gbXMLSpaceType # 103
    Plenum : gbXMLSpaceType # 104
    PoliceStationLaboratoryPoliceOrFireStations : gbXMLSpaceType # 105
    PublicAndStaffLoungeHospitalOrHealthcare : gbXMLSpaceType # 106
    ReadingAreaLibrary : gbXMLSpaceType # 107
    ReceptionOrWaitingTransportation : gbXMLSpaceType # 108
    ReceptionOrWaitingMotel : gbXMLSpaceType # 109
    ReceptionOrWaitingHotel : gbXMLSpaceType # 110
    RecoveryHospitalOrHealthcare : gbXMLSpaceType # 111
    RestorationMuseum : gbXMLSpaceType # 112
    Restrooms : gbXMLSpaceType # 113
    RingSportsAreaSportsArena : gbXMLSpaceType # 114
    SleepingQuartersPoliceOrFireStation : gbXMLSpaceType # 115
    SortingAreaPostOffice : gbXMLSpaceType # 116
    SpecialtyStoreSalesAreaRetail : gbXMLSpaceType # 117
    StacksLibrary : gbXMLSpaceType # 118
    StairsInactive : gbXMLSpaceType # 119
    Stairway : gbXMLSpaceType # 120
    SupermarketSalesAreaRetail : gbXMLSpaceType # 121
    TerminalTicketCounterTransportation : gbXMLSpaceType # 122
    WorkshopWorkshop : gbXMLSpaceType # 123
    WorshipPulpitChoirReligious : gbXMLSpaceType # 124
    NoOfSpaceTypes : gbXMLSpaceType # 125
    CustomizeSpaceType : gbXMLSpaceType # -2
    NoSpaceType : gbXMLSpaceType # -1


class gbXMLSurfaceType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    InteriorWall : gbXMLSurfaceType # 0
    ExteriorWall : gbXMLSurfaceType # 1
    Roof : gbXMLSurfaceType # 2
    InteriorFloor : gbXMLSurfaceType # 3
    Shade : gbXMLSurfaceType # 4
    UndergroundWall : gbXMLSurfaceType # 5
    UndergroundSlab : gbXMLSurfaceType # 6
    Ceiling : gbXMLSurfaceType # 7
    SurfaceAir : gbXMLSurfaceType # 8
    UndergroundCeiling : gbXMLSurfaceType # 9
    RaisedFloor : gbXMLSurfaceType # 10
    SlabOnGrade : gbXMLSurfaceType # 11
    NoOfSurfaceTypes : gbXMLSurfaceType # 12


class GenericZone(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def LevelOffset(self) -> float: ...
    @LevelOffset.setter
    def LevelOffset(self, value: float) -> float: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(doc: Document, name: str, domainData: GenericZoneDomainData, levelId: ElementId, curveLoops: IList_1[CurveLoop]) -> GenericZone: ...
    def GetBoundaries(self) -> IList_1[CurveLoop]: ...
    def GetDomainData(self) -> GenericZoneDomainData: ...


class GenericZoneDomainData(IDisposable):
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...


class HVACLoadBuildingType(HVACLoadType):
    @property
    def AirChangesPerHour(self) -> float: ...
    @AirChangesPerHour.setter
    def AirChangesPerHour(self, value: float) -> float: ...
    @property
    def AreaPerPerson(self) -> float: ...
    @AreaPerPerson.setter
    def AreaPerPerson(self, value: float) -> float: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def BuildingTypeName(self) -> str: ...
    @BuildingTypeName.setter
    def BuildingTypeName(self, value: str) -> str: ...
    @property
    def Category(self) -> Category: ...
    @property
    def ClosingTime(self) -> str: ...
    @ClosingTime.setter
    def ClosingTime(self, value: str) -> str: ...
    @property
    def CoolingSetPoint(self) -> float: ...
    @CoolingSetPoint.setter
    def CoolingSetPoint(self, value: float) -> float: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DehumidificationSetPoint(self) -> float: ...
    @DehumidificationSetPoint.setter
    def DehumidificationSetPoint(self, value: float) -> float: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def HeatingSetPoint(self) -> float: ...
    @HeatingSetPoint.setter
    def HeatingSetPoint(self, value: float) -> float: ...
    @property
    def HumidificationSetPoint(self) -> float: ...
    @HumidificationSetPoint.setter
    def HumidificationSetPoint(self, value: float) -> float: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LatentHeatGainPerPerson(self) -> float: ...
    @LatentHeatGainPerPerson.setter
    def LatentHeatGainPerPerson(self, value: float) -> float: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def LightingLoadDensity(self) -> float: ...
    @LightingLoadDensity.setter
    def LightingLoadDensity(self, value: float) -> float: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OpeningTime(self) -> str: ...
    @OpeningTime.setter
    def OpeningTime(self, value: str) -> str: ...
    @property
    def OutdoorAirFlowStandard(self) -> OutdoorAirFlowStandard: ...
    @OutdoorAirFlowStandard.setter
    def OutdoorAirFlowStandard(self, value: OutdoorAirFlowStandard) -> OutdoorAirFlowStandard: ...
    @property
    def OutdoorAirPerArea(self) -> float: ...
    @OutdoorAirPerArea.setter
    def OutdoorAirPerArea(self, value: float) -> float: ...
    @property
    def OutdoorAirPerPerson(self) -> float: ...
    @OutdoorAirPerPerson.setter
    def OutdoorAirPerPerson(self, value: float) -> float: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def PlenumLighting(self) -> float: ...
    @PlenumLighting.setter
    def PlenumLighting(self, value: float) -> float: ...
    @property
    def PowerLoadDensity(self) -> float: ...
    @PowerLoadDensity.setter
    def PowerLoadDensity(self, value: float) -> float: ...
    @property
    def SensibleHeatGainPerPerson(self) -> float: ...
    @SensibleHeatGainPerPerson.setter
    def SensibleHeatGainPerPerson(self, value: float) -> float: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def UnoccupiedCoolingSetPoint(self) -> float: ...
    @UnoccupiedCoolingSetPoint.setter
    def UnoccupiedCoolingSetPoint(self, value: float) -> float: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(document: Document, name: str) -> HVACLoadBuildingType: ...
    @staticmethod
    def IsValidTime(hourMinute: str) -> bool: ...
    # Skipped IsNameUnique due to it being static, abstract and generic.

    IsNameUnique : IsNameUnique_MethodGroup
    class IsNameUnique_MethodGroup:
        @typing.overload
        def __call__(self, name: str) -> bool:...
        @typing.overload
        def __call__(self, document: Document, name: str) -> bool:...



class HVACLoadConstructionClass(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LooseConstruction : HVACLoadConstructionClass # 0
    MediumConstruction : HVACLoadConstructionClass # 1
    TightConstruction : HVACLoadConstructionClass # 2
    NoneConstruction : HVACLoadConstructionClass # 3


class HVACLoadLoadsReportType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NoReport : HVACLoadLoadsReportType # 0
    SimpleReport : HVACLoadLoadsReportType # 1
    StandardReport : HVACLoadLoadsReportType # 2
    DetailedReport : HVACLoadLoadsReportType # 3


class HVACLoadSpaceType(HVACLoadType):
    @property
    def AirChangesPerHour(self) -> float: ...
    @AirChangesPerHour.setter
    def AirChangesPerHour(self, value: float) -> float: ...
    @property
    def AreaPerPerson(self) -> float: ...
    @AreaPerPerson.setter
    def AreaPerPerson(self, value: float) -> float: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CoolingSetPoint(self) -> float: ...
    @CoolingSetPoint.setter
    def CoolingSetPoint(self, value: float) -> float: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DehumidificationSetPoint(self) -> float: ...
    @DehumidificationSetPoint.setter
    def DehumidificationSetPoint(self, value: float) -> float: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def HeatingSetPoint(self) -> float: ...
    @HeatingSetPoint.setter
    def HeatingSetPoint(self, value: float) -> float: ...
    @property
    def HumidificationSetPoint(self) -> float: ...
    @HumidificationSetPoint.setter
    def HumidificationSetPoint(self, value: float) -> float: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsPlenum(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LatentHeatGainPerPerson(self) -> float: ...
    @LatentHeatGainPerPerson.setter
    def LatentHeatGainPerPerson(self, value: float) -> float: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def LightingLoadDensity(self) -> float: ...
    @LightingLoadDensity.setter
    def LightingLoadDensity(self, value: float) -> float: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OutdoorAirFlowStandard(self) -> OutdoorAirFlowStandard: ...
    @OutdoorAirFlowStandard.setter
    def OutdoorAirFlowStandard(self, value: OutdoorAirFlowStandard) -> OutdoorAirFlowStandard: ...
    @property
    def OutdoorAirPerArea(self) -> float: ...
    @OutdoorAirPerArea.setter
    def OutdoorAirPerArea(self, value: float) -> float: ...
    @property
    def OutdoorAirPerPerson(self) -> float: ...
    @OutdoorAirPerPerson.setter
    def OutdoorAirPerPerson(self, value: float) -> float: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def PlenumLighting(self) -> float: ...
    @PlenumLighting.setter
    def PlenumLighting(self, value: float) -> float: ...
    @property
    def PowerLoadDensity(self) -> float: ...
    @PowerLoadDensity.setter
    def PowerLoadDensity(self, value: float) -> float: ...
    @property
    def SensibleHeatGainPerPerson(self) -> float: ...
    @SensibleHeatGainPerPerson.setter
    def SensibleHeatGainPerPerson(self, value: float) -> float: ...
    @property
    def SpaceTypeName(self) -> str: ...
    @SpaceTypeName.setter
    def SpaceTypeName(self, value: str) -> str: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(document: Document, name: str) -> HVACLoadSpaceType: ...
    # Skipped IsNameUnique due to it being static, abstract and generic.

    IsNameUnique : IsNameUnique_MethodGroup
    class IsNameUnique_MethodGroup:
        @typing.overload
        def __call__(self, name: str) -> bool:...
        @typing.overload
        def __call__(self, document: Document, name: str) -> bool:...



class HVACLoadType(Element):
    @property
    def AirChangesPerHour(self) -> float: ...
    @AirChangesPerHour.setter
    def AirChangesPerHour(self, value: float) -> float: ...
    @property
    def AreaPerPerson(self) -> float: ...
    @AreaPerPerson.setter
    def AreaPerPerson(self, value: float) -> float: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CoolingSetPoint(self) -> float: ...
    @CoolingSetPoint.setter
    def CoolingSetPoint(self, value: float) -> float: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DehumidificationSetPoint(self) -> float: ...
    @DehumidificationSetPoint.setter
    def DehumidificationSetPoint(self, value: float) -> float: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def HeatingSetPoint(self) -> float: ...
    @HeatingSetPoint.setter
    def HeatingSetPoint(self, value: float) -> float: ...
    @property
    def HumidificationSetPoint(self) -> float: ...
    @HumidificationSetPoint.setter
    def HumidificationSetPoint(self, value: float) -> float: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LatentHeatGainPerPerson(self) -> float: ...
    @LatentHeatGainPerPerson.setter
    def LatentHeatGainPerPerson(self, value: float) -> float: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def LightingLoadDensity(self) -> float: ...
    @LightingLoadDensity.setter
    def LightingLoadDensity(self, value: float) -> float: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OutdoorAirFlowStandard(self) -> OutdoorAirFlowStandard: ...
    @OutdoorAirFlowStandard.setter
    def OutdoorAirFlowStandard(self, value: OutdoorAirFlowStandard) -> OutdoorAirFlowStandard: ...
    @property
    def OutdoorAirPerArea(self) -> float: ...
    @OutdoorAirPerArea.setter
    def OutdoorAirPerArea(self, value: float) -> float: ...
    @property
    def OutdoorAirPerPerson(self) -> float: ...
    @OutdoorAirPerPerson.setter
    def OutdoorAirPerPerson(self, value: float) -> float: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def PlenumLighting(self) -> float: ...
    @PlenumLighting.setter
    def PlenumLighting(self, value: float) -> float: ...
    @property
    def PowerLoadDensity(self) -> float: ...
    @PowerLoadDensity.setter
    def PowerLoadDensity(self, value: float) -> float: ...
    @property
    def SensibleHeatGainPerPerson(self) -> float: ...
    @SensibleHeatGainPerPerson.setter
    def SensibleHeatGainPerPerson(self, value: float) -> float: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...


class MassEnergyAnalyticalModel(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MassId(self) -> ElementId: ...
    @property
    def MassZoneCoreOffset(self) -> float: ...
    @MassZoneCoreOffset.setter
    def MassZoneCoreOffset(self, value: float) -> float: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def GetCoincidentEnergyAnalyticalModelFaceReference(document: Document, referenceToFace: Reference) -> Reference: ...
    @staticmethod
    def GetCoincidentMassZoneFaceReferences(document: Document, referenceToFace: Reference) -> IList_1[Reference]: ...
    def GetJoinedMassEnergyAnalyticalModelElementIds(self) -> ICollection_1[ElementId]: ...
    @staticmethod
    def GetMassEnergyAnalyticalModelIdForMassInstance(document: Document, massInstanceId: ElementId) -> ElementId: ...
    def GetMassSurfaceDataIdForReference(self, reference: Reference) -> ElementId: ...
    def GetMassZoneIds(self) -> ICollection_1[ElementId]: ...
    def GetReferencesToAllFaces(self) -> IList_1[Reference]: ...
    def GetReferencesToAllShadingFaces(self) -> IList_1[Reference]: ...
    def GetValidSurfaceCategoryIdsForReference(self, reference: Reference, recommendedDefaultSubcategoryId: clr.Reference[ElementId]) -> IList_1[ElementId]: ...


class MassGBXMLExportOptions(IDisposable):
    @typing.overload
    def __init__(self, massZoneIds: IList_1[ElementId]) -> None: ...
    @typing.overload
    def __init__(self, massZoneIds: IList_1[ElementId], massIds: IList_1[ElementId]) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...
    def Dispose(self) -> None: ...
    def GetMassIds(self) -> IList_1[ElementId]: ...
    def GetMassZoneIds(self) -> IList_1[ElementId]: ...


class MassLevelData(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def ConceptualConstructionId(self) -> ElementId: ...
    @ConceptualConstructionId.setter
    def ConceptualConstructionId(self, value: ElementId) -> ElementId: ...
    @property
    def ConceptualConstructionIsByEnergyData(self) -> bool: ...
    @ConceptualConstructionIsByEnergyData.setter
    def ConceptualConstructionIsByEnergyData(self, value: bool) -> bool: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MaterialId(self) -> ElementId: ...
    @MaterialId.setter
    def MaterialId(self, value: ElementId) -> ElementId: ...
    @property
    def MaterialType(self) -> MassSurfaceDataMaterialType: ...
    @MaterialType.setter
    def MaterialType(self, value: MassSurfaceDataMaterialType) -> MassSurfaceDataMaterialType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NExteriorSurfaceArea(self) -> float: ...
    @property
    def NLevelFafArea(self) -> float: ...
    @property
    def NLevelPerimeter(self) -> float: ...
    @property
    def NVolume(self) -> float: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def OwningMassId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def StrUsage(self) -> str: ...
    @StrUsage.setter
    def StrUsage(self, value: str) -> str: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def IsEmpty(self) -> bool: ...
    @staticmethod
    def IsMassFamilyInstance(document: Document, id: ElementId) -> bool: ...
    def IsValidConceptualConstructionTypeElement(self, id: ElementId) -> bool: ...


class MassSurfaceData(Element):
    @property
    def Area(self) -> float: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CategoryIdForConceptualSurfaceType(self) -> ElementId: ...
    @property
    def ConceptualConstructionId(self) -> ElementId: ...
    @ConceptualConstructionId.setter
    def ConceptualConstructionId(self, value: ElementId) -> ElementId: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsConceptualConstructionByEnergyData(self) -> bool: ...
    @IsConceptualConstructionByEnergyData.setter
    def IsConceptualConstructionByEnergyData(self, value: bool) -> bool: ...
    @property
    def IsGlazingShaded(self) -> bool: ...
    @IsGlazingShaded.setter
    def IsGlazingShaded(self, value: bool) -> bool: ...
    @property
    def IsSlab(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsUnderground(self) -> bool: ...
    @IsUnderground.setter
    def IsUnderground(self, value: bool) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MassLevelDataId(self) -> ElementId: ...
    @property
    def MaterialId(self) -> ElementId: ...
    @MaterialId.setter
    def MaterialId(self, value: ElementId) -> ElementId: ...
    @property
    def MaterialType(self) -> MassSurfaceDataMaterialType: ...
    @MaterialType.setter
    def MaterialType(self, value: MassSurfaceDataMaterialType) -> MassSurfaceDataMaterialType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def PercentageGlazing(self) -> float: ...
    @PercentageGlazing.setter
    def PercentageGlazing(self, value: float) -> float: ...
    @property
    def PercentageSkylights(self) -> float: ...
    @PercentageSkylights.setter
    def PercentageSkylights(self, value: float) -> float: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def ReferenceElementId(self) -> ElementId: ...
    @property
    def ShadeDepth(self) -> float: ...
    @ShadeDepth.setter
    def ShadeDepth(self, value: float) -> float: ...
    @property
    def SillHeight(self) -> float: ...
    @SillHeight.setter
    def SillHeight(self, value: float) -> float: ...
    @property
    def SkylightWidth(self) -> float: ...
    @SkylightWidth.setter
    def SkylightWidth(self, value: float) -> float: ...
    @property
    def SurfaceDataSource(self) -> MassSurfaceDataSource: ...
    @SurfaceDataSource.setter
    def SurfaceDataSource(self, value: MassSurfaceDataSource) -> MassSurfaceDataSource: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def GetFaceReferences(self) -> IList_1[Reference]: ...


class MassSurfaceDataMaterialType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NormalMaterial : MassSurfaceDataMaterialType # 0
    MaterialByConstruction : MassSurfaceDataMaterialType # -2


class MassSurfaceDataSource(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    EnergyData : MassSurfaceDataSource # 0
    Surface : MassSurfaceDataSource # 1
    Invalid : MassSurfaceDataSource # -1


class MassZone(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def ConditionType(self) -> gbXMLConditionType: ...
    @ConditionType.setter
    def ConditionType(self, value: gbXMLConditionType) -> gbXMLConditionType: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def CutByLowerLevel(self) -> MassZoneLevelCutState: ...
    @property
    def CutByUpperLevel(self) -> MassZoneLevelCutState: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def FloorArea(self) -> float: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def IsZoneOccupiable(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def LowerLevelId(self) -> ElementId: ...
    @property
    def MassEnergyAnalyticalModelId(self) -> ElementId: ...
    @property
    def MaterialId(self) -> ElementId: ...
    @MaterialId.setter
    def MaterialId(self, value: ElementId) -> ElementId: ...
    @property
    def MaterialType(self) -> MassZoneMaterialType: ...
    @MaterialType.setter
    def MaterialType(self, value: MassZoneMaterialType) -> MassZoneMaterialType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def SpaceType(self) -> gbXMLSpaceType: ...
    @SpaceType.setter
    def SpaceType(self, value: gbXMLSpaceType) -> gbXMLSpaceType: ...
    @property
    def SpaceTypeId(self) -> ElementId: ...
    @SpaceTypeId.setter
    def SpaceTypeId(self, value: ElementId) -> ElementId: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def UpperLevelId(self) -> ElementId: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def Volume(self) -> float: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def GetCoincidentReferenceFromAdjacentZone(self, referenceToZoneFace: Reference) -> Reference: ...
    def GetEquivalentReferenceFromMassOrLevel(self, referenceToZoneFace: Reference) -> Reference: ...
    def GetMassDataElementIdForZoneFaceReference(self, referenceOfZone: Reference) -> ElementId: ...
    def GetReferencesToEnergyAnalysisFaces(self) -> IList_1[Reference]: ...
    def IsEmpty(self) -> bool: ...


class MassZoneLevelCutState(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NotCut : MassZoneLevelCutState # 0
    Cut : MassZoneLevelCutState # 1
    NotCutButCoincident : MassZoneLevelCutState # 2


class MassZoneMaterialType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    NormalMaterial : MassZoneMaterialType # 0
    MaterialBySurfaceType : MassZoneMaterialType # -2


class OutdoorAirFlowStandard(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ByPeopleAndByArea : OutdoorAirFlowStandard # 0
    ByACH : OutdoorAirFlowStandard # 1
    MaxByPeople_ByArea : OutdoorAirFlowStandard # 2
    MaxByACH_ByPeopleByArea : OutdoorAirFlowStandard # 3
    MaxByACH_ByArea_ByPeople : OutdoorAirFlowStandard # 4


class PathOfTravel(Element):
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def LineStyle(self) -> ElementId: ...
    @LineStyle.setter
    def LineStyle(self, value: ElementId) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def PathEnd(self) -> XYZ: ...
    @PathEnd.setter
    def PathEnd(self, value: XYZ) -> XYZ: ...
    @property
    def PathMidpoint(self) -> XYZ: ...
    @property
    def PathStart(self) -> XYZ: ...
    @PathStart.setter
    def PathStart(self, value: XYZ) -> XYZ: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def FindEndsOfShortestPaths(DBView: View, destinationPoints: IList_1[XYZ], startPoints: IList_1[XYZ]) -> IList_1[XYZ]: ...
    @staticmethod
    def FindShortestPaths(DBView: View, destinationPoints: IList_1[XYZ], startPoints: IList_1[XYZ]) -> IList_1[IList_1[XYZ]]: ...
    @staticmethod
    def FindStartsOfLongestPathsFromRooms(DBView: View, destinationPoints: IList_1[XYZ]) -> IList_1[XYZ]: ...
    def GetCurves(self) -> IList_1[Curve]: ...
    def GetWaypoints(self) -> IList_1[XYZ]: ...
    def InsertWaypoint(self, waypoint: XYZ, index: int) -> None: ...
    @staticmethod
    def IsInRevealObstaclesMode(DBView: View) -> bool: ...
    def RemoveWaypoint(self, index: int) -> None: ...
    @staticmethod
    def SetRevealObstaclesMode(DBView: View, newState: bool) -> PathOfTravelCalculationStatus: ...
    def SetWaypoint(self, waypoint: XYZ, index: int) -> None: ...
    def Update(self) -> PathOfTravelCalculationStatus: ...
    # Skipped Create due to it being static, abstract and generic.

    Create : Create_MethodGroup
    class Create_MethodGroup:
        @typing.overload
        def __call__(self, DBView: View, pathStart: XYZ, pathEnd: XYZ) -> PathOfTravel:...
        @typing.overload
        def __call__(self, DBView: View, pathStart: XYZ, pathEnd: XYZ, resultStatus: clr.Reference[PathOfTravelCalculationStatus]) -> PathOfTravel:...

    # Skipped CreateMapped due to it being static, abstract and generic.

    CreateMapped : CreateMapped_MethodGroup
    class CreateMapped_MethodGroup:
        @typing.overload
        def __call__(self, DBView: View, pathStarts: IList_1[XYZ], pathEnds: IList_1[XYZ]) -> IList_1[PathOfTravel]:...
        @typing.overload
        def __call__(self, DBView: View, pathStarts: IList_1[XYZ], pathEnds: IList_1[XYZ], resultStatus: clr.Reference[IList_1[PathOfTravelCalculationStatus]]) -> IList_1[PathOfTravel]:...

    # Skipped CreateMultiple due to it being static, abstract and generic.

    CreateMultiple : CreateMultiple_MethodGroup
    class CreateMultiple_MethodGroup:
        @typing.overload
        def __call__(self, DBView: View, pathStarts: IList_1[XYZ], pathEnds: IList_1[XYZ]) -> IList_1[PathOfTravel]:...
        @typing.overload
        def __call__(self, DBView: View, pathStarts: IList_1[XYZ], pathEnds: IList_1[XYZ], resultStatus: clr.Reference[IList_1[PathOfTravelCalculationStatus]]) -> IList_1[PathOfTravel]:...

    # Skipped UpdateMultiple due to it being static, abstract and generic.

    UpdateMultiple : UpdateMultiple_MethodGroup
    class UpdateMultiple_MethodGroup:
        @typing.overload
        def __call__(self, adoc: Document, elementsToUpdate: IList_1[ElementId]) -> int:...
        @typing.overload
        def __call__(self, adoc: Document, elementsToUpdate: IList_1[ElementId], resultStatus: clr.Reference[IList_1[PathOfTravelCalculationStatus]]) -> int:...



class PathOfTravelCalculationServerIds(abc.ABC):
    @classmethod
    @property
    def DefaultPathOfTravelCalculationGUID(cls) -> Guid: ...


class PathOfTravelCalculationStatus(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Success : PathOfTravelCalculationStatus # 0
    NoPathOfTravel : PathOfTravelCalculationStatus # 1
    AreaTooLarge : PathOfTravelCalculationStatus # 2
    SplitView : PathOfTravelCalculationStatus # 3
    ResultAffectedByCrop : PathOfTravelCalculationStatus # 4
    StartAndEndPointsTooClose : PathOfTravelCalculationStatus # 5
    PointOutsideActiveCrop : PathOfTravelCalculationStatus # 6
    TooMuchGeometry : PathOfTravelCalculationStatus # 7
    RevealObstaclesModeFailureDataExist : PathOfTravelCalculationStatus # 8
    RevealObstaclesModeFailureWireframe : PathOfTravelCalculationStatus # 9
    TemporaryModeFailureDataExist : PathOfTravelCalculationStatus # 10
    TemporaryModeFailureWireframe : PathOfTravelCalculationStatus # 11


class Polyloop(IDisposable):
    @property
    def Centroid(self) -> XYZ: ...
    @property
    def Direction(self) -> XYZ: ...
    @property
    def IsValidObject(self) -> bool: ...
    def ComputeArea(self) -> float: ...
    def Dispose(self) -> None: ...
    def GetPoints(self) -> IList_1[XYZ]: ...


class RouteAnalysisSettings(Element):
    @property
    def AnalysisZoneBottomOffset(self) -> float: ...
    @AnalysisZoneBottomOffset.setter
    def AnalysisZoneBottomOffset(self, value: float) -> float: ...
    @property
    def AnalysisZoneTopOffset(self) -> float: ...
    @AnalysisZoneTopOffset.setter
    def AnalysisZoneTopOffset(self, value: float) -> float: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def EnableIgnoredCategoryIds(self) -> bool: ...
    @EnableIgnoredCategoryIds.setter
    def EnableIgnoredCategoryIds(self, value: bool) -> bool: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IgnoreImports(self) -> bool: ...
    @IgnoreImports.setter
    def IgnoreImports(self, value: bool) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def MinimumLength(self) -> float: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def GetExcludedCategoryIds(self) -> ICollection_1[ElementId]: ...
    def GetIgnoredCategoryIds(self) -> ICollection_1[ElementId]: ...
    @staticmethod
    def GetRouteAnalysisSettings(cda: Document) -> RouteAnalysisSettings: ...
    def IsLargeGeometryAllowed(self) -> bool: ...
    def SetIgnoredCategoryIds(self, categoryIds: ICollection_1[ElementId]) -> None: ...


class SpatialFieldManager(Element):
    @property
    def AllowInteractiveSettings(self) -> bool: ...
    @AllowInteractiveSettings.setter
    def AllowInteractiveSettings(self, value: bool) -> bool: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def CurrentMeasurement(self) -> int: ...
    @CurrentMeasurement.setter
    def CurrentMeasurement(self, value: int) -> int: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def Document(self) -> Document: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LegendPosition(self) -> XYZ: ...
    @LegendPosition.setter
    def LegendPosition(self, value: XYZ) -> XYZ: ...
    @property
    def LegendShowConfigurationName(self) -> bool: ...
    @LegendShowConfigurationName.setter
    def LegendShowConfigurationName(self, value: bool) -> bool: ...
    @property
    def LegendShowDescription(self) -> bool: ...
    @LegendShowDescription.setter
    def LegendShowDescription(self, value: bool) -> bool: ...
    @property
    def LegendTextTypeId(self) -> ElementId: ...
    @LegendTextTypeId.setter
    def LegendTextTypeId(self, value: ElementId) -> ElementId: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def NumberOfMeasurements(self) -> int: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def ResultsVisibleInView(self) -> bool: ...
    @ResultsVisibleInView.setter
    def ResultsVisibleInView(self, value: bool) -> bool: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def UseRangeForAllMeasurements(self) -> bool: ...
    @UseRangeForAllMeasurements.setter
    def UseRangeForAllMeasurements(self, value: bool) -> bool: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    def Clear(self) -> None: ...
    @staticmethod
    def CreateSpatialFieldManager(view: View, numberOfMeasurements: int) -> SpatialFieldManager: ...
    def GetLegend(self) -> AnalysisDisplayLegend: ...
    def GetMaximum(self, resultIndex: int, rawValue: bool) -> float: ...
    def GetMinimum(self, resultIndex: int, rawValue: bool) -> float: ...
    def GetRegisteredResults(self) -> IList_1[int]: ...
    def GetResultSchema(self, idx: int) -> AnalysisResultSchema: ...
    @staticmethod
    def GetSpatialFieldManager(view: View) -> SpatialFieldManager: ...
    def IsResultSchemaNameUnique(self, name: str, resultIndexToSkip: int) -> bool: ...
    @staticmethod
    def IsTextTypeIdValid(textTypeId: ElementId, doc: Document) -> bool: ...
    def RegisterResult(self, resultSchema: AnalysisResultSchema) -> int: ...
    def RemoveSpatialFieldPrimitive(self, idx: int) -> None: ...
    def SetMeasurementDescriptions(self, measurementDescriptions: IList_1[str]) -> None: ...
    def SetMeasurementNames(self, measurementNames: IList_1[str]) -> None: ...
    def SetResultSchema(self, idx: int, resultSchema: AnalysisResultSchema) -> None: ...
    def UpdateSpatialFieldPrimitive(self, idx: int, fieldDomainPoints: FieldDomainPoints, fieldValues: FieldValues, resultIndex: int) -> None: ...
    # Skipped AddSpatialFieldPrimitive due to it being static, abstract and generic.

    AddSpatialFieldPrimitive : AddSpatialFieldPrimitive_MethodGroup
    class AddSpatialFieldPrimitive_MethodGroup:
        @typing.overload
        def __call__(self) -> int:...
        @typing.overload
        def __call__(self, reference: Reference) -> int:...
        @typing.overload
        def __call__(self, curve: Curve, trf: Transform) -> int:...
        @typing.overload
        def __call__(self, face: Face, trf: Transform) -> int:...
        @typing.overload
        def __call__(self, reference: Reference, hidingMode: SpatialFieldPrimitiveHideMode) -> int:...



class SpatialFieldPrimitiveHideMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Default : SpatialFieldPrimitiveHideMode # 0
    HideNone : SpatialFieldPrimitiveHideMode # 1
    HideOnlyReference : SpatialFieldPrimitiveHideMode # 2
    HideWholeElement : SpatialFieldPrimitiveHideMode # 3


class SystemsAnalysisOptions(IDisposable):
    def __init__(self) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def OutputFolder(self) -> str: ...
    @OutputFolder.setter
    def OutputFolder(self, value: str) -> str: ...
    @property
    def WeatherFile(self) -> str: ...
    @WeatherFile.setter
    def WeatherFile(self, value: str) -> str: ...
    @property
    def WorkflowFile(self) -> str: ...
    @WorkflowFile.setter
    def WorkflowFile(self, value: str) -> str: ...
    def Dispose(self) -> None: ...


class SystemsAnalysisReportStyle(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Detailed : SystemsAnalysisReportStyle # 0
    Loads : SystemsAnalysisReportStyle # 1


class ValueAtPoint(ValueAtPointBase):
    @typing.overload
    def __init__(self, otherObject: ValueAtPoint) -> None: ...
    @typing.overload
    def __init__(self, values: IList_1[float]) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...


class VectorAtPoint(ValueAtPointBase):
    @typing.overload
    def __init__(self, otherObject: VectorAtPoint) -> None: ...
    @typing.overload
    def __init__(self, vectors: IList_1[XYZ]) -> None: ...
    @property
    def IsValidObject(self) -> bool: ...


class ViewSystemsAnalysisReport(View):
    @property
    def AnalysisDateAndTime(self) -> DateTime: ...
    @property
    def AnalysisDisplayStyleId(self) -> ElementId: ...
    @AnalysisDisplayStyleId.setter
    def AnalysisDisplayStyleId(self, value: ElementId) -> ElementId: ...
    @property
    def AreAnalyticalModelCategoriesHidden(self) -> bool: ...
    @AreAnalyticalModelCategoriesHidden.setter
    def AreAnalyticalModelCategoriesHidden(self, value: bool) -> bool: ...
    @property
    def AreAnnotationCategoriesHidden(self) -> bool: ...
    @AreAnnotationCategoriesHidden.setter
    def AreAnnotationCategoriesHidden(self, value: bool) -> bool: ...
    @property
    def AreCoordinationModelHandlesHidden(self) -> bool: ...
    @AreCoordinationModelHandlesHidden.setter
    def AreCoordinationModelHandlesHidden(self, value: bool) -> bool: ...
    @property
    def AreImportCategoriesHidden(self) -> bool: ...
    @AreImportCategoriesHidden.setter
    def AreImportCategoriesHidden(self, value: bool) -> bool: ...
    @property
    def AreModelCategoriesHidden(self) -> bool: ...
    @AreModelCategoriesHidden.setter
    def AreModelCategoriesHidden(self, value: bool) -> bool: ...
    @property
    def ArePointCloudsHidden(self) -> bool: ...
    @ArePointCloudsHidden.setter
    def ArePointCloudsHidden(self, value: bool) -> bool: ...
    @property
    def AssemblyInstanceId(self) -> ElementId: ...
    @property
    def AssociatedAssemblyInstanceId(self) -> ElementId: ...
    @property
    def BoundingBox(self) -> BoundingBoxXYZ: ...
    @property
    def CanBePrinted(self) -> bool: ...
    @property
    def Category(self) -> Category: ...
    @property
    def CreatedPhaseId(self) -> ElementId: ...
    @CreatedPhaseId.setter
    def CreatedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def CropBox(self) -> BoundingBoxXYZ: ...
    @CropBox.setter
    def CropBox(self, value: BoundingBoxXYZ) -> BoundingBoxXYZ: ...
    @property
    def CropBoxActive(self) -> bool: ...
    @CropBoxActive.setter
    def CropBoxActive(self, value: bool) -> bool: ...
    @property
    def CropBoxVisible(self) -> bool: ...
    @CropBoxVisible.setter
    def CropBoxVisible(self, value: bool) -> bool: ...
    @property
    def DemolishedPhaseId(self) -> ElementId: ...
    @DemolishedPhaseId.setter
    def DemolishedPhaseId(self, value: ElementId) -> ElementId: ...
    @property
    def DesignOption(self) -> DesignOption: ...
    @property
    def DetailLevel(self) -> ViewDetailLevel: ...
    @DetailLevel.setter
    def DetailLevel(self, value: ViewDetailLevel) -> ViewDetailLevel: ...
    @property
    def Discipline(self) -> ViewDiscipline: ...
    @Discipline.setter
    def Discipline(self, value: ViewDiscipline) -> ViewDiscipline: ...
    @property
    def DisplayStyle(self) -> DisplayStyle: ...
    @DisplayStyle.setter
    def DisplayStyle(self, value: DisplayStyle) -> DisplayStyle: ...
    @property
    def Document(self) -> Document: ...
    @property
    def GenLevel(self) -> Level: ...
    @property
    def Geometry(self) -> GeometryElement: ...
    @property
    def GroupId(self) -> ElementId: ...
    @property
    def Id(self) -> ElementId: ...
    @property
    def IsAssemblyView(self) -> bool: ...
    @property
    def IsCallout(self) -> bool: ...
    @property
    def IsTemplate(self) -> bool: ...
    @property
    def IsTransient(self) -> bool: ...
    @property
    def IsValidObject(self) -> bool: ...
    @property
    def LevelId(self) -> ElementId: ...
    @property
    def Location(self) -> Location: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Origin(self) -> XYZ: ...
    @property
    def Outline(self) -> BoundingBoxUV: ...
    @property
    def OwnerViewId(self) -> ElementId: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameter(self) -> Parameter: ...
    @property
    def Parameters(self) -> ParameterSet: ...
    @property
    def ParametersMap(self) -> ParameterMap: ...
    @property
    def PartsVisibility(self) -> PartsVisibility: ...
    @PartsVisibility.setter
    def PartsVisibility(self, value: PartsVisibility) -> PartsVisibility: ...
    @property
    def Pinned(self) -> bool: ...
    @Pinned.setter
    def Pinned(self, value: bool) -> bool: ...
    @property
    def ReportStyle(self) -> SystemsAnalysisReportStyle: ...
    @ReportStyle.setter
    def ReportStyle(self, value: SystemsAnalysisReportStyle) -> SystemsAnalysisReportStyle: ...
    @property
    def RevealConstraintsMode(self) -> bool: ...
    @RevealConstraintsMode.setter
    def RevealConstraintsMode(self, value: bool) -> bool: ...
    @property
    def RightDirection(self) -> XYZ: ...
    @property
    def Scale(self) -> int: ...
    @Scale.setter
    def Scale(self, value: int) -> int: ...
    @property
    def ShadowIntensity(self) -> int: ...
    @ShadowIntensity.setter
    def ShadowIntensity(self, value: int) -> int: ...
    @property
    def SketchPlane(self) -> SketchPlane: ...
    @SketchPlane.setter
    def SketchPlane(self, value: SketchPlane) -> SketchPlane: ...
    @property
    def SunAndShadowSettings(self) -> SunAndShadowSettings: ...
    @property
    def SunlightIntensity(self) -> int: ...
    @SunlightIntensity.setter
    def SunlightIntensity(self, value: int) -> int: ...
    @property
    def SystemsAnalysisOutputFolder(self) -> str: ...
    @property
    def SystemsAnalysisWorkflowFile(self) -> str: ...
    @property
    def TemporaryViewModes(self) -> TemporaryViewModes: ...
    @property
    def Title(self) -> str: ...
    @property
    def UniqueId(self) -> str: ...
    @property
    def UpDirection(self) -> XYZ: ...
    @property
    def VersionGuid(self) -> Guid: ...
    @property
    def ViewDirection(self) -> XYZ: ...
    @property
    def ViewSpecific(self) -> bool: ...
    @property
    def ViewTemplateId(self) -> ElementId: ...
    @ViewTemplateId.setter
    def ViewTemplateId(self, value: ElementId) -> ElementId: ...
    @property
    def ViewType(self) -> ViewType: ...
    @property
    def WeatherFile(self) -> str: ...
    @property
    def WorksetId(self) -> WorksetId: ...
    @staticmethod
    def Create(document: Document, viewName: str) -> ViewSystemsAnalysisReport: ...
    @staticmethod
    def GetLatestSystemsAnalysisReport(document: Document) -> ElementId: ...
    def GetReportContent(self) -> str: ...
    def IsAnalysisCompleted(self) -> bool: ...
    def RequestSystemsAnalysis(self, options: SystemsAnalysisOptions) -> None: ...

