import typing, clr
from Autodesk.Revit.DB import APIObject, ViewPlan, UV, BoundingBoxXYZ, CategorySet, Color, CombinableElementArray, CurveArrArray, CurveArray, CurveLoopsProfile, DoubleArray, DWFExportOptions, DWFXExportOptions, ElementId, ElementSet, FaceArray, FamilySymbolProfile, FamilySymbol, FBXExportOptions, GBXMLImportOptions, Options, IntersectionResultArray, PointOnEdge, Reference, PointLocationOnCurve, PointOnEdgeEdgeIntersection, PointOnEdgeFaceIntersection, PointOnFace, PointOnPlane, PointRelativeToPoint, ProjectPosition, ReferenceArray, ReferencePointArray, VertexIndexPair, VertexIndexPairArray, ViewSet, BoundingBoxUV, XYZ, Face, Line, Curve, Level, Element, InstanceBinding, TypeBinding, Area, ModelCurve, SketchPlane, AreaTag, FamilyInstance, Connector, CurtainSystem, CurtainSystemType, ExtrusionRoof, ReferencePlane, RoofType, FootPrintRoof, ModelCurveArray, Floor, FloorType, ConnectorSet, View, LinkElementId, SpotDimension, MEPCurve, Phase, Opening, Wall, PlanCircuit, SlabEdge, SlabEdgeType, Blend, Control, ControlShape, CurveByPoints, Dimension, Extrusion, Form, ReferenceArrayArray, ModelText, ModelTextType, HorizontalAlign, Revolution, FormArray, SymbolicCurve, Arc, DimensionType, ReferencePoint, Transform, PointElementReference, Sweep, SweepProfile, ProfilePlaneLocation, SweptBlend, DetailCurve, DetailCurveArray, Group, GroupType
from Autodesk.Revit.DB.Mechanical import SpaceSet, MechanicalSystem, DuctSystemType, SpaceTag, Space, Zone, FlexDuct, FlexDuctType
from System.Collections.Generic import IList_1, List_1, ICollection_1
from Autodesk.Revit.DB.Structure import StructuralType, BoundaryConditions, TranslationRotationValue
from Autodesk.Revit.DB.Plumbing import PipingSystem, PipeSystemType, FlexPipe, FlexPipeType
from Autodesk.Revit.DB.Architecture import RoomTag, Fascia, FasciaType, Gutter, GutterType, Room

class Application(APIObject):
    @property
    def IsReadOnly(self) -> bool: ...
    def NewAreaCreationData(self, areaView: ViewPlan, point: UV) -> AreaCreationData: ...
    def NewBoundingBoxXYZ(self) -> BoundingBoxXYZ: ...
    def NewCategorySet(self) -> CategorySet: ...
    def NewColor(self) -> Color: ...
    def NewCombinableElementArray(self) -> CombinableElementArray: ...
    def NewCurveArrArray(self) -> CurveArrArray: ...
    def NewCurveArray(self) -> CurveArray: ...
    def NewCurveLoopsProfile(self, curveLoops: CurveArrArray) -> CurveLoopsProfile: ...
    def NewDoubleArray(self) -> DoubleArray: ...
    def NewDWFExportOptions(self) -> DWFExportOptions: ...
    def NewDWFXExportOptions(self) -> DWFXExportOptions: ...
    def NewElementId(self) -> ElementId: ...
    def NewElementSet(self) -> ElementSet: ...
    def NewFaceArray(self) -> FaceArray: ...
    def NewFamilySymbolProfile(self, familySymbol: FamilySymbol) -> FamilySymbolProfile: ...
    def NewFBXExportOptions(self) -> FBXExportOptions: ...
    def NewGBXMLImportOptions(self) -> GBXMLImportOptions: ...
    def NewGeometryOptions(self) -> Options: ...
    def NewIntersectionResultArray(self) -> IntersectionResultArray: ...
    def NewPointOnEdge(self, edgeReference: Reference, locationOnCurve: PointLocationOnCurve) -> PointOnEdge: ...
    def NewPointOnEdgeEdgeIntersection(self, edgeReference1: Reference, edgeReference2: Reference) -> PointOnEdgeEdgeIntersection: ...
    def NewPointOnEdgeFaceIntersection(self, edgeReference: Reference, faceReference: Reference, orientWithEdge: bool) -> PointOnEdgeFaceIntersection: ...
    def NewPointOnFace(self, faceReference: Reference, uv: UV) -> PointOnFace: ...
    def NewPointOnPlane(self, planeReference: Reference, position: UV, xvec: UV, offset: float) -> PointOnPlane: ...
    def NewPointRelativeToPoint(self, hostPointReference: Reference) -> PointRelativeToPoint: ...
    def NewProjectPosition(self, ew: float, ns: float, elevation: float, angle: float) -> ProjectPosition: ...
    def NewReferenceArray(self) -> ReferenceArray: ...
    def NewReferencePointArray(self) -> ReferencePointArray: ...
    def NewSpaceSet(self) -> SpaceSet: ...
    def NewVertexIndexPair(self, iTop: int, iBottom: int) -> VertexIndexPair: ...
    def NewVertexIndexPairArray(self) -> VertexIndexPairArray: ...
    def NewViewSet(self) -> ViewSet: ...
    # Skipped NewBoundingBoxUV due to it being static, abstract and generic.

    NewBoundingBoxUV : NewBoundingBoxUV_MethodGroup
    class NewBoundingBoxUV_MethodGroup:
        @typing.overload
        def __call__(self) -> BoundingBoxUV:...
        @typing.overload
        def __call__(self, min_u: float, min_v: float, max_u: float, max_v: float) -> BoundingBoxUV:...

    # Skipped NewFamilyInstanceCreationData due to it being static, abstract and generic.

    NewFamilyInstanceCreationData : NewFamilyInstanceCreationData_MethodGroup
    class NewFamilyInstanceCreationData_MethodGroup:
        @typing.overload
        def __call__(self, symbol: FamilySymbol, adaptivePoints: IList_1[XYZ]) -> FamilyInstanceCreationData:...
        @typing.overload
        def __call__(self, face: Face, position: Line, symbol: FamilySymbol) -> FamilyInstanceCreationData:...
        @typing.overload
        def __call__(self, location: XYZ, symbol: FamilySymbol, structuralType: StructuralType) -> FamilyInstanceCreationData:...
        @typing.overload
        def __call__(self, curve: Curve, symbol: FamilySymbol, level: Level, structuralType: StructuralType) -> FamilyInstanceCreationData:...
        @typing.overload
        def __call__(self, face: Face, location: XYZ, referenceDirection: XYZ, symbol: FamilySymbol) -> FamilyInstanceCreationData:...
        @typing.overload
        def __call__(self, location: XYZ, symbol: FamilySymbol, level: Level, structuralType: StructuralType) -> FamilyInstanceCreationData:...
        @typing.overload
        def __call__(self, location: XYZ, symbol: FamilySymbol, host: Element, structuralType: StructuralType) -> FamilyInstanceCreationData:...
        @typing.overload
        def __call__(self, location: XYZ, symbol: FamilySymbol, host: Element, level: Level, structuralType: StructuralType) -> FamilyInstanceCreationData:...
        @typing.overload
        def __call__(self, location: XYZ, symbol: FamilySymbol, referenceDirection: XYZ, host: Element, structuralType: StructuralType) -> FamilyInstanceCreationData:...

    # Skipped NewInstanceBinding due to it being static, abstract and generic.

    NewInstanceBinding : NewInstanceBinding_MethodGroup
    class NewInstanceBinding_MethodGroup:
        @typing.overload
        def __call__(self) -> InstanceBinding:...
        @typing.overload
        def __call__(self, categorySet: CategorySet) -> InstanceBinding:...

    # Skipped NewTypeBinding due to it being static, abstract and generic.

    NewTypeBinding : NewTypeBinding_MethodGroup
    class NewTypeBinding_MethodGroup:
        @typing.overload
        def __call__(self) -> TypeBinding:...
        @typing.overload
        def __call__(self, categorySet: CategorySet) -> TypeBinding:...

    # Skipped NewUV due to it being static, abstract and generic.

    NewUV : NewUV_MethodGroup
    class NewUV_MethodGroup:
        @typing.overload
        def __call__(self) -> UV:...
        @typing.overload
        def __call__(self, uv: UV) -> UV:...
        @typing.overload
        def __call__(self, u: float, v: float) -> UV:...

    # Skipped NewXYZ due to it being static, abstract and generic.

    NewXYZ : NewXYZ_MethodGroup
    class NewXYZ_MethodGroup:
        @typing.overload
        def __call__(self) -> XYZ:...
        @typing.overload
        def __call__(self, xyz: XYZ) -> XYZ:...
        @typing.overload
        def __call__(self, x: float, y: float, z: float) -> XYZ:...



class AreaCreationData:
    @typing.overload
    def __init__(self, areaView: ViewPlan, point: UV) -> None: ...
    @typing.overload
    def __init__(self, proxy: typing.Any) -> None: ...
    @property
    def TagPoint(self) -> UV: ...
    @TagPoint.setter
    def TagPoint(self, value: UV) -> UV: ...


class Document(ItemFactoryBase):
    @property
    def IsReadOnly(self) -> bool: ...
    def NewArea(self, areaView: ViewPlan, point: UV) -> Area: ...
    def NewAreaBoundaryLine(self, sketchPlane: SketchPlane, geometryCurve: Curve, areaView: ViewPlan) -> ModelCurve: ...
    def NewAreas(self, dataList: List_1[AreaCreationData]) -> ElementSet: ...
    def NewAreaTag(self, areaView: ViewPlan, room: Area, point: UV) -> AreaTag: ...
    def NewCrossFitting(self, connector1: Connector, connector2: Connector, connector3: Connector, connector4: Connector) -> FamilyInstance: ...
    def NewCurtainSystem(self, faces: FaceArray, curtainSystemType: CurtainSystemType) -> CurtainSystem: ...
    def NewCurtainSystem2(self, faces: ReferenceArray, curtainSystemType: CurtainSystemType) -> ICollection_1[ElementId]: ...
    def NewElbowFitting(self, connector1: Connector, connector2: Connector) -> FamilyInstance: ...
    def NewExtrusionRoof(self, profile: CurveArray, refPlane: ReferencePlane, level: Level, roofType: RoofType, extrusionStart: float, extrusionEnd: float) -> ExtrusionRoof: ...
    def NewFootPrintRoof(self, footPrint: CurveArray, level: Level, roofType: RoofType, footPrintToModelCurvesMapping: clr.Reference[ModelCurveArray]) -> FootPrintRoof: ...
    def NewFoundationSlab(self, profile: CurveArray, floorType: FloorType, level: Level, structural: bool, normal: XYZ) -> Floor: ...
    def NewMechanicalSystem(self, baseEquipmentConnector: Connector, connectors: ConnectorSet, ductSystemType: DuctSystemType) -> MechanicalSystem: ...
    def NewPipingSystem(self, baseEquipmentConnector: Connector, connectors: ConnectorSet, pipingSystemType: PipeSystemType) -> PipingSystem: ...
    def NewPointBoundaryConditions(self, reference: Reference, X_Translation: TranslationRotationValue, X_TranslationSpringModulus: float, Y_Translation: TranslationRotationValue, Y_TranslationSpringModulus: float, Z_Translation: TranslationRotationValue, Z_TranslationSpringModulus: float, X_Rotation: TranslationRotationValue, X_RotationSpringModulus: float, Y_Rotation: TranslationRotationValue, Y_RotationSpringModulus: float, Z_Rotation: TranslationRotationValue, Z_RotationSpringModulus: float) -> BoundaryConditions: ...
    def NewRoomBoundaryLines(self, sketchPlane: SketchPlane, curves: CurveArray, view: View) -> ModelCurveArray: ...
    def NewRoomTag(self, roomId: LinkElementId, point: UV, viewId: ElementId) -> RoomTag: ...
    def NewSlab(self, profile: CurveArray, level: Level, slopedArrow: Line, slope: float, isStructural: bool) -> Floor: ...
    def NewSpaceBoundaryLines(self, sketchPlane: SketchPlane, curves: CurveArray, view: View) -> ModelCurveArray: ...
    def NewSpaceTag(self, space: Space, point: UV, view: View) -> SpaceTag: ...
    def NewSpotCoordinate(self, view: View, reference: Reference, origin: XYZ, bend: XYZ, end: XYZ, refPt: XYZ, hasLeader: bool) -> SpotDimension: ...
    def NewSpotElevation(self, view: View, reference: Reference, origin: XYZ, bend: XYZ, end: XYZ, refPt: XYZ, hasLeader: bool) -> SpotDimension: ...
    def NewTakeoffFitting(self, connector: Connector, curve: MEPCurve) -> FamilyInstance: ...
    def NewTeeFitting(self, connector1: Connector, connector2: Connector, connector3: Connector) -> FamilyInstance: ...
    def NewTransitionFitting(self, connector1: Connector, connector2: Connector) -> FamilyInstance: ...
    def NewUnionFitting(self, connector1: Connector, connector2: Connector) -> FamilyInstance: ...
    def NewZone(self, level: Level, phase: Phase) -> Zone: ...
    # Skipped NewAreaBoundaryConditions due to it being static, abstract and generic.

    NewAreaBoundaryConditions : NewAreaBoundaryConditions_MethodGroup
    class NewAreaBoundaryConditions_MethodGroup:
        @typing.overload
        def __call__(self, reference: Reference, X_Translation: TranslationRotationValue, X_TranslationSpringModulus: float, Y_Translation: TranslationRotationValue, Y_TranslationSpringModulus: float, Z_Translation: TranslationRotationValue, Z_TranslationSpringModulus: float) -> BoundaryConditions:...
        @typing.overload
        def __call__(self, hostElement: Element, X_Translation: TranslationRotationValue, X_TranslationSpringModulus: float, Y_Translation: TranslationRotationValue, Y_TranslationSpringModulus: float, Z_Translation: TranslationRotationValue, Z_TranslationSpringModulus: float) -> BoundaryConditions:...

    # Skipped NewFamilyInstance due to it being static, abstract and generic.

    NewFamilyInstance : NewFamilyInstance_MethodGroup
    class NewFamilyInstance_MethodGroup:
        @typing.overload
        def __call__(self, curve: Curve, symbol: FamilySymbol, level: Level, structuralType: StructuralType) -> FamilyInstance:...
        @typing.overload
        def __call__(self, location: XYZ, symbol: FamilySymbol, level: Level, structuralType: StructuralType) -> FamilyInstance:...
        @typing.overload
        def __call__(self, location: XYZ, symbol: FamilySymbol, host: Element, level: Level, structuralType: StructuralType) -> FamilyInstance:...

    # Skipped NewFascia due to it being static, abstract and generic.

    NewFascia : NewFascia_MethodGroup
    class NewFascia_MethodGroup:
        @typing.overload
        def __call__(self, FasciaType: FasciaType, reference: Reference) -> Fascia:...
        @typing.overload
        def __call__(self, FasciaType: FasciaType, references: ReferenceArray) -> Fascia:...

    # Skipped NewFlexDuct due to it being static, abstract and generic.

    NewFlexDuct : NewFlexDuct_MethodGroup
    class NewFlexDuct_MethodGroup:
        @typing.overload
        def __call__(self, points: IList_1[XYZ], ductType: FlexDuctType) -> FlexDuct:...
        @typing.overload
        def __call__(self, connector: Connector, points: IList_1[XYZ], ductType: FlexDuctType) -> FlexDuct:...
        @typing.overload
        def __call__(self, connector1: Connector, connector2: Connector, ductType: FlexDuctType) -> FlexDuct:...

    # Skipped NewFlexPipe due to it being static, abstract and generic.

    NewFlexPipe : NewFlexPipe_MethodGroup
    class NewFlexPipe_MethodGroup:
        @typing.overload
        def __call__(self, points: IList_1[XYZ], pipeType: FlexPipeType) -> FlexPipe:...
        @typing.overload
        def __call__(self, connector: Connector, points: IList_1[XYZ], pipeType: FlexPipeType) -> FlexPipe:...
        @typing.overload
        def __call__(self, connector1: Connector, connector2: Connector, pipeType: FlexPipeType) -> FlexPipe:...

    # Skipped NewFloor due to it being static, abstract and generic.

    NewFloor : NewFloor_MethodGroup
    class NewFloor_MethodGroup:
        @typing.overload
        def __call__(self, profile: CurveArray, structural: bool) -> Floor:...
        @typing.overload
        def __call__(self, profile: CurveArray, floorType: FloorType, level: Level, structural: bool) -> Floor:...
        @typing.overload
        def __call__(self, profile: CurveArray, floorType: FloorType, level: Level, structural: bool, normal: XYZ) -> Floor:...

    # Skipped NewGutter due to it being static, abstract and generic.

    NewGutter : NewGutter_MethodGroup
    class NewGutter_MethodGroup:
        @typing.overload
        def __call__(self, GutterType: GutterType, reference: Reference) -> Gutter:...
        @typing.overload
        def __call__(self, GutterType: GutterType, references: ReferenceArray) -> Gutter:...

    # Skipped NewLineBoundaryConditions due to it being static, abstract and generic.

    NewLineBoundaryConditions : NewLineBoundaryConditions_MethodGroup
    class NewLineBoundaryConditions_MethodGroup:
        @typing.overload
        def __call__(self, reference: Reference, X_Translation: TranslationRotationValue, X_TranslationSpringModulus: float, Y_Translation: TranslationRotationValue, Y_TranslationSpringModulus: float, Z_Translation: TranslationRotationValue, Z_TranslationSpringModulus: float, X_Rotation: TranslationRotationValue, X_RotationSpringModulus: float) -> BoundaryConditions:...
        @typing.overload
        def __call__(self, hostElement: Element, X_Translation: TranslationRotationValue, X_TranslationSpringModulus: float, Y_Translation: TranslationRotationValue, Y_TranslationSpringModulus: float, Z_Translation: TranslationRotationValue, Z_TranslationSpringModulus: float, X_Rotation: TranslationRotationValue, X_RotationSpringModulus: float) -> BoundaryConditions:...

    # Skipped NewOpening due to it being static, abstract and generic.

    NewOpening : NewOpening_MethodGroup
    class NewOpening_MethodGroup:
        @typing.overload
        def __call__(self, bottomLevel: Level, topLevel: Level, profile: CurveArray) -> Opening:...
        @typing.overload
        def __call__(self, wall: Wall, pntStart: XYZ, pntEnd: XYZ) -> Opening:...
        @typing.overload
        def __call__(self, famInstElement: Element, profile: CurveArray, iFace: eRefFace) -> Opening:...
        @typing.overload
        def __call__(self, hostElement: Element, profile: CurveArray, bPerpendicularFace: bool) -> Opening:...

    # Skipped NewRoom due to it being static, abstract and generic.

    NewRoom : NewRoom_MethodGroup
    class NewRoom_MethodGroup:
        @typing.overload
        def __call__(self, phase: Phase) -> Room:...
        @typing.overload
        def __call__(self, room: Room, circuit: PlanCircuit) -> Room:...
        @typing.overload
        def __call__(self, level: Level, point: UV) -> Room:...

    # Skipped NewRooms2 due to it being static, abstract and generic.

    NewRooms2 : NewRooms2_MethodGroup
    class NewRooms2_MethodGroup:
        @typing.overload
        def __call__(self, level: Level) -> ICollection_1[ElementId]:...
        @typing.overload
        def __call__(self, level: Level, phase: Phase) -> ICollection_1[ElementId]:...
        @typing.overload
        def __call__(self, phase: Phase, count: int) -> ICollection_1[ElementId]:...

    # Skipped NewSlabEdge due to it being static, abstract and generic.

    NewSlabEdge : NewSlabEdge_MethodGroup
    class NewSlabEdge_MethodGroup:
        @typing.overload
        def __call__(self, SlabEdgeType: SlabEdgeType, reference: Reference) -> SlabEdge:...
        @typing.overload
        def __call__(self, SlabEdgeType: SlabEdgeType, references: ReferenceArray) -> SlabEdge:...

    # Skipped NewSpace due to it being static, abstract and generic.

    NewSpace : NewSpace_MethodGroup
    class NewSpace_MethodGroup:
        @typing.overload
        def __call__(self, phase: Phase) -> Space:...
        @typing.overload
        def __call__(self, level: Level, point: UV) -> Space:...
        @typing.overload
        def __call__(self, level: Level, phase: Phase, point: UV) -> Space:...

    # Skipped NewSpaces2 due to it being static, abstract and generic.

    NewSpaces2 : NewSpaces2_MethodGroup
    class NewSpaces2_MethodGroup:
        @typing.overload
        def __call__(self, phase: Phase, count: int) -> ICollection_1[ElementId]:...
        @typing.overload
        def __call__(self, level: Level, phase: Phase, view: View) -> ICollection_1[ElementId]:...



class eRefFace(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    CenterX : eRefFace # 1
    CenterY : eRefFace # 4
    CenterZ : eRefFace # 7


class FamilyInstanceCreationData:
    @typing.overload
    def __init__(self, curve: Curve, symbol: FamilySymbol, level: Level, structuralType: StructuralType) -> None: ...
    @typing.overload
    def __init__(self, face: Face, location: XYZ, referenceDirection: XYZ, symbol: FamilySymbol) -> None: ...
    @typing.overload
    def __init__(self, face: Face, position: Line, symbol: FamilySymbol) -> None: ...
    @typing.overload
    def __init__(self, location: XYZ, symbol: FamilySymbol, host: Element, level: Level, structuralType: StructuralType) -> None: ...
    @typing.overload
    def __init__(self, location: XYZ, symbol: FamilySymbol, host: Element, structuralType: StructuralType) -> None: ...
    @typing.overload
    def __init__(self, location: XYZ, symbol: FamilySymbol, level: Level, structuralType: StructuralType) -> None: ...
    @typing.overload
    def __init__(self, location: XYZ, symbol: FamilySymbol, referenceDirection: XYZ, host: Element, structuralType: StructuralType) -> None: ...
    @typing.overload
    def __init__(self, location: XYZ, symbol: FamilySymbol, structuralType: StructuralType) -> None: ...
    @typing.overload
    def __init__(self, proxy: typing.Any) -> None: ...
    @typing.overload
    def __init__(self, symbol: FamilySymbol, adaptivePoints: IList_1[XYZ]) -> None: ...
    @property
    def Axis(self) -> Line: ...
    @Axis.setter
    def Axis(self, value: Line) -> Line: ...
    @property
    def RotateAngle(self) -> float: ...
    @RotateAngle.setter
    def RotateAngle(self, value: float) -> float: ...


class FamilyItemFactory(ItemFactoryBase):
    @property
    def IsReadOnly(self) -> bool: ...
    def NewBlend(self, isSolid: bool, profile1: CurveArray, profile2: CurveArray, sketchPlane: SketchPlane) -> Blend: ...
    def NewControl(self, controlShape: ControlShape, view: View, origin: XYZ) -> Control: ...
    def NewCurveByPoints(self, points: ReferencePointArray) -> CurveByPoints: ...
    def NewDiameterDimension(self, view: View, arcRef: Reference, origin: XYZ) -> Dimension: ...
    def NewExtrusion(self, isSolid: bool, profile: CurveArrArray, sketchPlane: SketchPlane, end: float) -> Extrusion: ...
    def NewExtrusionForm(self, isSolid: bool, profile: ReferenceArray, direction: XYZ) -> Form: ...
    def NewFormByCap(self, isSolid: bool, profile: ReferenceArray) -> Form: ...
    def NewFormByThickenSingleSurface(self, isSolid: bool, singleSurfaceForm: Form, thickenDir: XYZ) -> Form: ...
    def NewLoftForm(self, isSolid: bool, profiles: ReferenceArrayArray) -> Form: ...
    def NewModelText(self, text: str, modelTextType: ModelTextType, sketchPlane: SketchPlane, position: XYZ, horizontalAlign: HorizontalAlign, depth: float) -> ModelText: ...
    def NewOpening(self, host: Element, profile: CurveArray) -> Opening: ...
    def NewRevolution(self, isSolid: bool, profile: CurveArrArray, sketchPlane: SketchPlane, axis: Line, startAngle: float, endAngle: float) -> Revolution: ...
    def NewRevolveForms(self, isSolid: bool, profile: ReferenceArray, axis: Reference, startAngle: float, endAngle: float) -> FormArray: ...
    def NewSweptBlendForm(self, isSolid: bool, path: ReferenceArray, profiles: ReferenceArrayArray) -> Form: ...
    def NewSymbolicCurve(self, curve: Curve, sketchPlane: SketchPlane) -> SymbolicCurve: ...
    # Skipped NewAngularDimension due to it being static, abstract and generic.

    NewAngularDimension : NewAngularDimension_MethodGroup
    class NewAngularDimension_MethodGroup:
        @typing.overload
        def __call__(self, view: View, arc: Arc, firstRef: Reference, secondRef: Reference) -> Dimension:...
        @typing.overload
        def __call__(self, view: View, arc: Arc, firstRef: Reference, secondRef: Reference, dimensionType: DimensionType) -> Dimension:...

    # Skipped NewArcLengthDimension due to it being static, abstract and generic.

    NewArcLengthDimension : NewArcLengthDimension_MethodGroup
    class NewArcLengthDimension_MethodGroup:
        @typing.overload
        def __call__(self, view: View, arc: Arc, arcRef: Reference, firstRef: Reference, secondRef: Reference) -> Dimension:...
        @typing.overload
        def __call__(self, view: View, arc: Arc, arcRef: Reference, firstRef: Reference, secondRef: Reference, dimensionType: DimensionType) -> Dimension:...

    # Skipped NewLinearDimension due to it being static, abstract and generic.

    NewLinearDimension : NewLinearDimension_MethodGroup
    class NewLinearDimension_MethodGroup:
        @typing.overload
        def __call__(self, view: View, line: Line, references: ReferenceArray) -> Dimension:...
        @typing.overload
        def __call__(self, view: View, line: Line, references: ReferenceArray, dimensionType: DimensionType) -> Dimension:...

    # Skipped NewRadialDimension due to it being static, abstract and generic.

    NewRadialDimension : NewRadialDimension_MethodGroup
    class NewRadialDimension_MethodGroup:
        @typing.overload
        def __call__(self, view: View, arcRef: Reference, origin: XYZ) -> Dimension:...
        @typing.overload
        def __call__(self, view: View, arcRef: Reference, origin: XYZ, dimensionType: DimensionType) -> Dimension:...

    # Skipped NewReferencePoint due to it being static, abstract and generic.

    NewReferencePoint : NewReferencePoint_MethodGroup
    class NewReferencePoint_MethodGroup:
        @typing.overload
        def __call__(self, A_0: Transform) -> ReferencePoint:...
        @typing.overload
        def __call__(self, A_0: PointElementReference) -> ReferencePoint:...
        @typing.overload
        def __call__(self, A_0: XYZ) -> ReferencePoint:...

    # Skipped NewSweep due to it being static, abstract and generic.

    NewSweep : NewSweep_MethodGroup
    class NewSweep_MethodGroup:
        @typing.overload
        def __call__(self, isSolid: bool, path: ReferenceArray, profile: SweepProfile, profileLocationCurveIndex: int, profilePlaneLocation: ProfilePlaneLocation) -> Sweep:...
        @typing.overload
        def __call__(self, isSolid: bool, path: CurveArray, pathPlane: SketchPlane, profile: SweepProfile, profileLocationCurveIndex: int, profilePlaneLocation: ProfilePlaneLocation) -> Sweep:...

    # Skipped NewSweptBlend due to it being static, abstract and generic.

    NewSweptBlend : NewSweptBlend_MethodGroup
    class NewSweptBlend_MethodGroup:
        @typing.overload
        def __call__(self, isSolid: bool, path: Reference, bottomProfile: SweepProfile, topProfile: SweepProfile) -> SweptBlend:...
        @typing.overload
        def __call__(self, isSolid: bool, path: Curve, pathPlane: SketchPlane, bottomProfile: SweepProfile, topProfile: SweepProfile) -> SweptBlend:...



class ItemFactoryBase(APIObject):
    @property
    def IsReadOnly(self) -> bool: ...
    def NewAlignment(self, view: View, reference1: Reference, reference2: Reference) -> Dimension: ...
    def NewDetailCurve(self, view: View, geometryCurve: Curve) -> DetailCurve: ...
    def NewDetailCurveArray(self, view: View, geometryCurveArray: CurveArray) -> DetailCurveArray: ...
    def NewFamilyInstances2(self, dataList: List_1[FamilyInstanceCreationData]) -> ICollection_1[ElementId]: ...
    def NewGroup(self, elementIds: ICollection_1[ElementId]) -> Group: ...
    def NewModelCurve(self, geometryCurve: Curve, sketchPlane: SketchPlane) -> ModelCurve: ...
    def NewModelCurveArray(self, geometryCurveArray: CurveArray, sketchPlane: SketchPlane) -> ModelCurveArray: ...
    def NewReferencePlane(self, bubbleEnd: XYZ, freeEnd: XYZ, cutVec: XYZ, pView: View) -> ReferencePlane: ...
    def NewReferencePlane2(self, bubbleEnd: XYZ, freeEnd: XYZ, thirdPnt: XYZ, pView: View) -> ReferencePlane: ...
    def PlaceGroup(self, location: XYZ, groupType: GroupType) -> Group: ...
    # Skipped NewDimension due to it being static, abstract and generic.

    NewDimension : NewDimension_MethodGroup
    class NewDimension_MethodGroup:
        @typing.overload
        def __call__(self, view: View, line: Line, references: ReferenceArray) -> Dimension:...
        @typing.overload
        def __call__(self, view: View, line: Line, references: ReferenceArray, dimensionType: DimensionType) -> Dimension:...

    # Skipped NewFamilyInstance due to it being static, abstract and generic.

    NewFamilyInstance : NewFamilyInstance_MethodGroup
    class NewFamilyInstance_MethodGroup:
        @typing.overload
        def __call__(self, line: Line, symbol: FamilySymbol, specView: View) -> FamilyInstance:...
        @typing.overload
        def __call__(self, face: Face, position: Line, symbol: FamilySymbol) -> FamilyInstance:...
        @typing.overload
        def __call__(self, reference: Reference, position: Line, symbol: FamilySymbol) -> FamilyInstance:...
        @typing.overload
        def __call__(self, location: XYZ, symbol: FamilySymbol, structuralType: StructuralType) -> FamilyInstance:...
        @typing.overload
        def __call__(self, origin: XYZ, symbol: FamilySymbol, specView: View) -> FamilyInstance:...
        @typing.overload
        def __call__(self, face: Face, location: XYZ, referenceDirection: XYZ, symbol: FamilySymbol) -> FamilyInstance:...
        @typing.overload
        def __call__(self, reference: Reference, location: XYZ, referenceDirection: XYZ, symbol: FamilySymbol) -> FamilyInstance:...
        @typing.overload
        def __call__(self, location: XYZ, symbol: FamilySymbol, host: Element, structuralType: StructuralType) -> FamilyInstance:...
        @typing.overload
        def __call__(self, location: XYZ, symbol: FamilySymbol, referenceDirection: XYZ, host: Element, structuralType: StructuralType) -> FamilyInstance:...


