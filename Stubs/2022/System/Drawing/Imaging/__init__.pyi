import typing
from System import Array_1, Guid
from System.Drawing import Color

class BitmapData:
    def __init__(self) -> None: ...
    @property
    def Height(self) -> int: ...
    @Height.setter
    def Height(self, value: int) -> int: ...
    @property
    def PixelFormat(self) -> PixelFormat: ...
    @PixelFormat.setter
    def PixelFormat(self, value: PixelFormat) -> PixelFormat: ...
    @property
    def Reserved(self) -> int: ...
    @Reserved.setter
    def Reserved(self, value: int) -> int: ...
    @property
    def Scan0(self) -> int: ...
    @Scan0.setter
    def Scan0(self, value: int) -> int: ...
    @property
    def Stride(self) -> int: ...
    @Stride.setter
    def Stride(self, value: int) -> int: ...
    @property
    def Width(self) -> int: ...
    @Width.setter
    def Width(self, value: int) -> int: ...


class ColorPalette:
    @property
    def Entries(self) -> Array_1[Color]: ...
    @property
    def Flags(self) -> int: ...


class ImageFormat:
    def __init__(self, guid: Guid) -> None: ...
    @classmethod
    @property
    def Bmp(cls) -> ImageFormat: ...
    @classmethod
    @property
    def Emf(cls) -> ImageFormat: ...
    @classmethod
    @property
    def Exif(cls) -> ImageFormat: ...
    @classmethod
    @property
    def Gif(cls) -> ImageFormat: ...
    @property
    def Guid(self) -> Guid: ...
    @classmethod
    @property
    def Icon(cls) -> ImageFormat: ...
    @classmethod
    @property
    def Jpeg(cls) -> ImageFormat: ...
    @classmethod
    @property
    def MemoryBmp(cls) -> ImageFormat: ...
    @classmethod
    @property
    def Png(cls) -> ImageFormat: ...
    @classmethod
    @property
    def Tiff(cls) -> ImageFormat: ...
    @classmethod
    @property
    def Wmf(cls) -> ImageFormat: ...
    def Equals(self, o: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...


class ImageLockMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ReadOnly : ImageLockMode # 1
    WriteOnly : ImageLockMode # 2
    ReadWrite : ImageLockMode # 3
    UserInputBuffer : ImageLockMode # 4


class PixelFormat(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    DontCare : PixelFormat # 0
    Undefined : PixelFormat # 0
    Max : PixelFormat # 15
    Indexed : PixelFormat # 65536
    Gdi : PixelFormat # 131072
    Format16bppRgb555 : PixelFormat # 135173
    Format16bppRgb565 : PixelFormat # 135174
    Format24bppRgb : PixelFormat # 137224
    Format32bppRgb : PixelFormat # 139273
    Format1bppIndexed : PixelFormat # 196865
    Format4bppIndexed : PixelFormat # 197634
    Format8bppIndexed : PixelFormat # 198659
    Alpha : PixelFormat # 262144
    Format16bppArgb1555 : PixelFormat # 397319
    PAlpha : PixelFormat # 524288
    Format32bppPArgb : PixelFormat # 925707
    Extended : PixelFormat # 1048576
    Format16bppGrayScale : PixelFormat # 1052676
    Format48bppRgb : PixelFormat # 1060876
    Format64bppPArgb : PixelFormat # 1851406
    Canonical : PixelFormat # 2097152
    Format32bppArgb : PixelFormat # 2498570
    Format64bppArgb : PixelFormat # 3424269


class PropertyItem:
    @property
    def Id(self) -> int: ...
    @Id.setter
    def Id(self, value: int) -> int: ...
    @property
    def Len(self) -> int: ...
    @Len.setter
    def Len(self, value: int) -> int: ...
    @property
    def Type(self) -> int: ...
    @Type.setter
    def Type(self, value: int) -> int: ...
    @property
    def Value(self) -> Array_1[int]: ...
    @Value.setter
    def Value(self, value: Array_1[int]) -> Array_1[int]: ...

